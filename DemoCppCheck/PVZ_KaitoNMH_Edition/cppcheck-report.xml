<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.17.1"/>
    <errors>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Image&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Image&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="src/draw/image_directory.cpp">
            <location file="src\draw\ImageType.hpp" line="371" column="5"/>
            <symbol>Image</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Window::dump_err&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;Window::dump_err&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/elements/Player/Player.cpp">
            <location file="src\draw\rsdl.hpp" line="132" column="7"/>
            <symbol>Window::dump_err</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Player::is_choosing_a_plant&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;Player::is_choosing_a_plant&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/elements/Player/Player.cpp">
            <location file="src\elements\Player\Player.hpp" line="16" column="10"/>
            <location file="src\elements\Player\Player.cpp" line="3" column="14"/>
            <symbol>Player::is_choosing_a_plant</symbol>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;mower&apos; can be declared as reference to const" verbose="Parameter &apos;mower&apos; can be declared as reference to const" cwe="398" file0="src/elements/collision/MowerVsZombie.cpp">
            <location file="src\elements\collision\MowerVsZombie.cpp" line="79" column="33" info="Parameter &apos;mower&apos; can be declared as reference to const"/>
            <symbol>mower</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;nlohmann/json.hpp&quot; not found." verbose="Include file: &quot;nlohmann/json.hpp&quot; not found.">
            <location file="src\elements\plants\cherrybomb\cherrybomb.cpp" line="2" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;nlohmann/json.hpp&quot; not found." verbose="Include file: &quot;nlohmann/json.hpp&quot; not found.">
            <location file="src\elements\plants\PotatoMine\PotatoMine.cpp" line="3" column="0"/>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~CherryBomb&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~CherryBomb&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/plants/cherrybomb/cherrybomb.cpp">
            <location file="src\elements\plants\cherrybomb\cherrybomb.hpp" line="11" column="6" info="Destructor in derived class"/>
            <location file="src\elements\plants\plants.hpp" line="50" column="14" info="Virtual destructor in base class"/>
            <symbol>~CherryBomb</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Window&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Window&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="src/elements/collision/ZombieVsPlant.cpp">
            <location file="src\draw\rsdl.hpp" line="59" column="2"/>
            <symbol>Window</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;iostream&quot; not found." verbose="Include file: &quot;iostream&quot; not found.">
            <location file="src\draw\ImageType.cpp" line="3" column="0"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Window::init&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;Window::init&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/draw/rsdl.cpp">
            <location file="src\draw\rsdl.hpp" line="133" column="7"/>
            <location file="src\draw\rsdl.cpp" line="9" column="14"/>
            <symbol>Window::init</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;show_text&apos; argument 7 names different: declaration &apos;aplha&apos; definition &apos;alpha&apos;." verbose="Function &apos;show_text&apos; argument 7 names different: declaration &apos;aplha&apos; definition &apos;alpha&apos;." cwe="628" inconclusive="true" file0="src/draw/rsdl_ttf.cpp">
            <location file="src\draw\rsdl_ttf.cpp" line="30" column="88"/>
            <location file="src\draw\rsdl.hpp" line="105" column="41"/>
            <symbol>show_text</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Announcer::img_directory&apos; is not initialized in the constructor." verbose="Member variable &apos;Announcer::img_directory&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/announcer/announcer.cpp">
            <location file="src\elements\announcer\announcer.cpp" line="8" column="12"/>
            <symbol>Announcer::img_directory</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Announcer::sound_directory&apos; is not initialized in the constructor." verbose="Member variable &apos;Announcer::sound_directory&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/announcer/announcer.cpp">
            <location file="src\elements\announcer\announcer.cpp" line="8" column="12"/>
            <symbol>Announcer::sound_directory</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Bullet::y_location&apos; is not initialized in the constructor." verbose="Member variable &apos;Bullet::y_location&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/bullets/bullet.cpp">
            <location file="src\elements\bullets\bullet.cpp" line="11" column="9"/>
            <symbol>Bullet::y_location</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeedPacket::x&apos; is not initialized in the constructor." verbose="Member variable &apos;SeedPacket::x&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/SeedPacket/SeedPacket.cpp">
            <location file="src\elements\SeedPacket\SeedPacket.cpp" line="9" column="13"/>
            <symbol>SeedPacket::x</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;move&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;move&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/bullets/snowpea/snowzpea.cpp">
            <location file="src\elements\bullets\snowpea\snowzpea.hpp" line="8" column="10" info="Function in derived class"/>
            <location file="src\elements\bullets\bullet.hpp" line="34" column="18" info="Virtual function in base class"/>
            <symbol>move</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Mower::x&apos; is not initialized in the constructor." verbose="Member variable &apos;Mower::x&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/mower/mower.cpp">
            <location file="src\elements\mower\mower.cpp" line="13" column="8"/>
            <symbol>Mower::x</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;move&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;move&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/bullets/pea/pea.cpp">
            <location file="src\elements\bullets\pea\pea.hpp" line="8" column="10" info="Function in derived class"/>
            <location file="src\elements\bullets\bullet.hpp" line="34" column="18" info="Virtual function in base class"/>
            <symbol>move</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~BucketZombie&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~BucketZombie&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/collision/BulletVsZombie.cpp">
            <location file="src\elements\zombies\bucket\bucket_zombie.hpp" line="7" column="6" info="Destructor in derived class"/>
            <location file="src\elements\zombies\zombie_struct.hpp" line="54" column="14" info="Virtual destructor in base class"/>
            <symbol>~BucketZombie</symbol>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;zombie&apos; can be declared as reference to const" verbose="Parameter &apos;zombie&apos; can be declared as reference to const" cwe="398" file0="src/elements/collision/MowerVsZombie.cpp">
            <location file="src\elements\collision\MowerVsZombie.cpp" line="79" column="48" info="Parameter &apos;zombie&apos; can be declared as reference to const"/>
            <symbol>zombie</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SeedPacket&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SeedPacket&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="src/elements/Player/Player.cpp">
            <location file="src\elements\SeedPacket\SeedPacket.hpp" line="20" column="5"/>
            <symbol>SeedPacket</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PotatoMine::is_armed&apos; can be const." verbose="The member function &apos;PotatoMine::is_armed&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/plants/PotatoMine/PotatoMine.cpp">
            <location file="src\elements\plants\PotatoMine\PotatoMine.hpp" line="27" column="10"/>
            <location file="src\elements\plants\PotatoMine\PotatoMine.cpp" line="144" column="18"/>
            <symbol>PotatoMine::is_armed</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;zombie&apos; can be declared as pointer to const" verbose="Variable &apos;zombie&apos; can be declared as pointer to const" cwe="398" file0="src/elements/collision/AttackPlantVsZombie.cpp">
            <location file="src\elements\collision\AttackPlantVsZombie.cpp" line="44" column="22" info="Variable &apos;zombie&apos; can be declared as pointer to const"/>
            <symbol>zombie</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;next_frame&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;next_frame&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/plants/cherrybomb/cherrybomb.cpp">
            <location file="src\elements\plants\cherrybomb\cherrybomb.hpp" line="16" column="10" info="Function in derived class"/>
            <location file="src\elements\plants\plants.hpp" line="53" column="18" info="Virtual function in base class"/>
            <symbol>next_frame</symbol>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;plant&apos; can be declared as reference to const" verbose="Parameter &apos;plant&apos; can be declared as reference to const" cwe="398" file0="src/elements/collision/InstancePlantVsZombie.cpp">
            <location file="src\elements\collision\InstancePlantVsZombie.cpp" line="3" column="46" info="Parameter &apos;plant&apos; can be declared as reference to const"/>
            <symbol>plant</symbol>
        </error>
        <error id="passedByValueCallback" severity="performance" msg="Function parameter &apos;title&apos; should be passed by const reference. However it seems that &apos;Window&apos; is a callback function." verbose="Parameter &apos;title&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="src/draw/rsdl.cpp">
            <location file="src\draw\rsdl.cpp" line="27" column="46" info="Function parameter &apos;title&apos; should be passed by const reference. However it seems that &apos;Window&apos; is a callback function."/>
            <location file="src\draw\rsdl.hpp" line="54" column="7" info="Function pointer used here."/>
            <symbol>title</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;img_dir&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;img_dir&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="src/draw/ImageType.cpp">
            <location file="src\draw\ImageType.cpp" line="156" column="5"/>
            <symbol>img_dir</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Button::x1&apos; is not initialized in the constructor." verbose="Member variable &apos;Button::x1&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/button/button.cpp">
            <location file="src\elements\button\button.cpp" line="56" column="9"/>
            <symbol>Button::x1</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;font_addr&apos; should be passed by const reference." verbose="Parameter &apos;font_addr&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="src/draw/rsdl_ttf.cpp">
            <location file="src\draw\rsdl_ttf.cpp" line="102" column="58" info="Function parameter &apos;font_addr&apos; should be passed by const reference."/>
            <symbol>font_addr</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="src/draw/rsdl_img.cpp">
            <location file="src\draw\rsdl_img.cpp" line="49" column="22"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Announcer::remain_time&apos; is not initialized in the constructor." verbose="Member variable &apos;Announcer::remain_time&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/announcer/announcer.cpp">
            <location file="src\elements\announcer\announcer.cpp" line="8" column="12"/>
            <symbol>Announcer::remain_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Bullet::directory_num&apos; is not initialized in the constructor." verbose="Member variable &apos;Bullet::directory_num&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/bullets/bullet.cpp">
            <location file="src\elements\bullets\bullet.cpp" line="11" column="9"/>
            <symbol>Bullet::directory_num</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeedPacket::y&apos; is not initialized in the constructor." verbose="Member variable &apos;SeedPacket::y&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/SeedPacket/SeedPacket.cpp">
            <location file="src\elements\SeedPacket\SeedPacket.cpp" line="9" column="13"/>
            <symbol>SeedPacket::y</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;display&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;display&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/bullets/snowpea/snowzpea.cpp">
            <location file="src\elements\bullets\snowpea\snowzpea.hpp" line="9" column="10" info="Function in derived class"/>
            <location file="src\elements\bullets\bullet.hpp" line="35" column="18" info="Virtual function in base class"/>
            <symbol>display</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Mower::row&apos; is not initialized in the constructor." verbose="Member variable &apos;Mower::row&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/mower/mower.cpp">
            <location file="src\elements\mower\mower.cpp" line="13" column="8"/>
            <symbol>Mower::row</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;display&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;display&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/bullets/pea/pea.cpp">
            <location file="src\elements\bullets\pea\pea.hpp" line="9" column="10" info="Function in derived class"/>
            <location file="src\elements\bullets\bullet.hpp" line="35" column="18" info="Virtual function in base class"/>
            <symbol>display</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Mower::frame&apos; is not initialized in the constructor." verbose="Member variable &apos;Mower::frame&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/mower/mower.cpp">
            <location file="src\elements\mower\mower.cpp" line="13" column="8"/>
            <symbol>Mower::frame</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~DoorZombie&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~DoorZombie&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/collision/BulletVsZombie.cpp">
            <location file="src\elements\zombies\door\door_zombie.hpp" line="7" column="6" info="Destructor in derived class"/>
            <location file="src\elements\zombies\zombie_struct.hpp" line="54" column="14" info="Virtual destructor in base class"/>
            <symbol>~DoorZombie</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::type&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="14" column="9"/>
            <symbol>Plants::type</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;zombie&apos; can be declared as pointer to const" verbose="Variable &apos;zombie&apos; can be declared as pointer to const" cwe="398" file0="src/elements/collision/MowerVsZombie.cpp">
            <location file="src\elements\collision\MowerVsZombie.cpp" line="17" column="16" info="Variable &apos;zombie&apos; can be declared as pointer to const"/>
            <symbol>zombie</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~PotatoMine&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~PotatoMine&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/plants/PotatoMine/PotatoMine.cpp">
            <location file="src\elements\plants\PotatoMine\PotatoMine.hpp" line="21" column="6" info="Destructor in derived class"/>
            <location file="src\elements\plants\plants.hpp" line="50" column="14" info="Virtual destructor in base class"/>
            <symbol>~PotatoMine</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="src/elements/collision/AttackPlantVsZombie.cpp">
            <location file="src\elements\collision\AttackPlantVsZombie.cpp" line="44" column="5"/>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~ConeZombie&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~ConeZombie&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/collision/ZombieVsPlant.cpp">
            <location file="src\elements\zombies\cone\cone_zombie.hpp" line="7" column="6" info="Destructor in derived class"/>
            <location file="src\elements\zombies\zombie_struct.hpp" line="54" column="14" info="Virtual destructor in base class"/>
            <symbol>~ConeZombie</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;img_dir&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;img_dir&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="src/draw/ImageType.cpp">
            <location file="src\draw\ImageType.cpp" line="163" column="5"/>
            <symbol>img_dir</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Button::x2&apos; is not initialized in the constructor." verbose="Member variable &apos;Button::x2&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/button/button.cpp">
            <location file="src\elements\button\button.cpp" line="56" column="9"/>
            <symbol>Button::x2</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;font_addr&apos; should be passed by const reference." verbose="Parameter &apos;font_addr&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="src/draw/rsdl_ttf.cpp">
            <location file="src\draw\rsdl_ttf.cpp" line="112" column="58" info="Function parameter &apos;font_addr&apos; should be passed by const reference."/>
            <symbol>font_addr</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;res&apos; can be declared as pointer to const" verbose="Parameter &apos;res&apos; can be declared as pointer to const" cwe="398" file0="src/draw/rsdl_img.cpp">
            <location file="src\draw\rsdl_img.cpp" line="21" column="31" info="Parameter &apos;res&apos; can be declared as pointer to const"/>
            <symbol>res</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Bullet::width&apos; is not initialized in the constructor." verbose="Member variable &apos;Bullet::width&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/bullets/bullet.cpp">
            <location file="src\elements\bullets\bullet.cpp" line="11" column="9"/>
            <symbol>Bullet::width</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;crash_effect&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;crash_effect&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/bullets/snowpea/snowzpea.cpp">
            <location file="src\elements\bullets\snowpea\snowzpea.hpp" line="10" column="10" info="Function in derived class"/>
            <location file="src\elements\bullets\bullet.hpp" line="36" column="18" info="Virtual function in base class"/>
            <symbol>crash_effect</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Announcer::state&apos; is not initialized in the constructor." verbose="Member variable &apos;Announcer::state&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/announcer/announcer.cpp">
            <location file="src\elements\announcer\announcer.cpp" line="8" column="12"/>
            <symbol>Announcer::state</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;crash_effect&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;crash_effect&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/bullets/pea/pea.cpp">
            <location file="src\elements\bullets\pea\pea.hpp" line="10" column="10" info="Function in derived class"/>
            <location file="src\elements\bullets\bullet.hpp" line="36" column="18" info="Virtual function in base class"/>
            <symbol>crash_effect</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Mower::status&apos; is not initialized in the constructor." verbose="Member variable &apos;Mower::status&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/mower/mower.cpp">
            <location file="src\elements\mower\mower.cpp" line="13" column="8"/>
            <symbol>Mower::status</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~FlagZombie&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~FlagZombie&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/collision/BulletVsZombie.cpp">
            <location file="src\elements\zombies\flag\flag_zombie.hpp" line="7" column="6" info="Destructor in derived class"/>
            <location file="src\elements\zombies\zombie_struct.hpp" line="54" column="14" info="Virtual destructor in base class"/>
            <symbol>~FlagZombie</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::row&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::row&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="14" column="9"/>
            <symbol>Plants::row</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;next_frame&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;next_frame&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/plants/PotatoMine/PotatoMine.cpp">
            <location file="src\elements\plants\PotatoMine\PotatoMine.hpp" line="26" column="10" info="Function in derived class"/>
            <location file="src\elements\plants\plants.hpp" line="53" column="18" info="Virtual function in base class"/>
            <symbol>next_frame</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~NormalZombie&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~NormalZombie&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/collision/ZombieVsPlant.cpp">
            <location file="src\elements\zombies\normal\normal_zombie.hpp" line="7" column="6" info="Destructor in derived class"/>
            <location file="src\elements\zombies\zombie_struct.hpp" line="54" column="14" info="Virtual destructor in base class"/>
            <symbol>~NormalZombie</symbol>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;img_dir&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;img_dir&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="src/draw/ImageType.cpp">
            <location file="src\draw\ImageType.cpp" line="170" column="5"/>
            <symbol>img_dir</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;nlohmann/json.hpp&quot; not found." verbose="Include file: &quot;nlohmann/json.hpp&quot; not found.">
            <location file="src\elements\plants\peashooter\peashooter.cpp" line="3" column="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Button::y1&apos; is not initialized in the constructor." verbose="Member variable &apos;Button::y1&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/button/button.cpp">
            <location file="src\elements\button\button.cpp" line="56" column="9"/>
            <symbol>Button::y1</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;font_addr&apos; should be passed by const reference." verbose="Parameter &apos;font_addr&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="src/draw/rsdl_ttf.cpp">
            <location file="src\draw\rsdl_ttf.cpp" line="125" column="56" info="Function parameter &apos;font_addr&apos; should be passed by const reference."/>
            <symbol>font_addr</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;res&apos; can be declared as pointer to const" verbose="Parameter &apos;res&apos; can be declared as pointer to const" cwe="398" file0="src/draw/rsdl_img.cpp">
            <location file="src\draw\rsdl_img.cpp" line="33" column="31" info="Parameter &apos;res&apos; can be declared as pointer to const"/>
            <symbol>res</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Bullet::height&apos; is not initialized in the constructor." verbose="Member variable &apos;Bullet::height&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/bullets/bullet.cpp">
            <location file="src\elements\bullets\bullet.cpp" line="11" column="9"/>
            <symbol>Bullet::height</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;make_explode&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;make_explode&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/bullets/snowpea/snowzpea.cpp">
            <location file="src\elements\bullets\snowpea\snowzpea.hpp" line="11" column="10" info="Function in derived class"/>
            <location file="src\elements\bullets\bullet.hpp" line="37" column="18" info="Virtual function in base class"/>
            <symbol>make_explode</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Announcer::is_finished&apos; can be const." verbose="The member function &apos;Announcer::is_finished&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/announcer/announcer.cpp">
            <location file="src\elements\announcer\announcer.hpp" line="19" column="10"/>
            <location file="src\elements\announcer\announcer.cpp" line="39" column="17"/>
            <symbol>Announcer::is_finished</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;make_explode&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;make_explode&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/bullets/pea/pea.cpp">
            <location file="src\elements\bullets\pea\pea.hpp" line="11" column="10" info="Function in derived class"/>
            <location file="src\elements\bullets\bullet.hpp" line="37" column="18" info="Virtual function in base class"/>
            <symbol>make_explode</symbol>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;bullet&apos; can be declared as reference to const" verbose="Parameter &apos;bullet&apos; can be declared as reference to const" cwe="398" file0="src/elements/collision/BulletVsZombie.cpp">
            <location file="src\elements\collision\BulletVsZombie.cpp" line="59" column="30" info="Parameter &apos;bullet&apos; can be declared as reference to const"/>
            <symbol>bullet</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::col&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::col&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="14" column="9"/>
            <symbol>Plants::col</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;_dir&apos; should be passed by const reference." verbose="Parameter &apos;_dir&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="src/draw/ImageType.cpp">
            <location file="src\draw\ImageType.cpp" line="154" column="21" info="Function parameter &apos;_dir&apos; should be passed by const reference."/>
            <symbol>_dir</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;_dir&apos; should be passed by const reference." verbose="Parameter &apos;_dir&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="src/draw/ImageType.cpp">
            <location file="src\draw\ImageType.cpp" line="161" column="21" info="Function parameter &apos;_dir&apos; should be passed by const reference."/>
            <symbol>_dir</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;_dir&apos; should be passed by const reference." verbose="Parameter &apos;_dir&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="src/draw/ImageType.cpp">
            <location file="src\draw\ImageType.cpp" line="168" column="21" info="Function parameter &apos;_dir&apos; should be passed by const reference."/>
            <symbol>_dir</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="src/draw/ImageType.cpp">
            <location file="src\draw\ImageType.cpp" line="141" column="0"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Bullet::has_exploded&apos; can be const." verbose="The member function &apos;Bullet::has_exploded&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/bullets/bullet.cpp">
            <location file="src\elements\bullets\bullet.hpp" line="29" column="10"/>
            <location file="src\elements\bullets\bullet.cpp" line="39" column="14"/>
            <symbol>Bullet::has_exploded</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="src/elements/announcer/announcer.cpp">
            <location file="src\elements\announcer\announcer.cpp" line="28" column="12"/>
            <symbol>t</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::health&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::health&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="14" column="9"/>
            <symbol>Plants::health</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Peashooter::fire_pea&apos; can be const." verbose="The member function &apos;Peashooter::fire_pea&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/plants/peashooter/peashooter.cpp">
            <location file="src\elements\plants\peashooter\peashooter.hpp" line="13" column="10"/>
            <location file="src\elements\plants\peashooter\peashooter.cpp" line="40" column="18"/>
            <symbol>Peashooter::fire_pea</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~Peashooter&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~Peashooter&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/elements.cpp">
            <location file="src\elements\plants\peashooter\peashooter.hpp" line="9" column="6" info="Destructor in derived class"/>
            <location file="src\elements\plants\plants.hpp" line="50" column="14" info="Virtual destructor in base class"/>
            <symbol>~Peashooter</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Button::y2&apos; is not initialized in the constructor." verbose="Member variable &apos;Button::y2&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/button/button.cpp">
            <location file="src\elements\button\button.cpp" line="56" column="9"/>
            <symbol>Button::y2</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Bullet::display_shadow&apos; can be const." verbose="The member function &apos;Bullet::display_shadow&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/bullets/bullet.cpp">
            <location file="src\elements\bullets\bullet.hpp" line="31" column="10"/>
            <location file="src\elements\bullets\bullet.cpp" line="57" column="14"/>
            <symbol>Bullet::display_shadow</symbol>
        </error>
        <error id="unusedScopedObject" severity="style" msg="Instance of &apos;Announcer&apos; object is destroyed immediately." verbose="Instance of &apos;Announcer&apos; object is destroyed immediately." cwe="563" file0="src/elements/announcer/announcer.cpp">
            <location file="src\elements\announcer\announcer.cpp" line="10" column="5"/>
            <symbol>Announcer</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~SnowPea&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~SnowPea&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/plants/plant_type.cpp">
            <location file="src\elements\plants\snowpea\snowpea.hpp" line="9" column="6" info="Destructor in derived class"/>
            <location file="src\elements\plants\plants.hpp" line="50" column="14" info="Virtual destructor in base class"/>
            <symbol>~SnowPea</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~Sunflower&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~Sunflower&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/draw/render_elements.cpp">
            <location file="src\elements\plants\sunflower\sunflower.hpp" line="9" column="6" info="Destructor in derived class"/>
            <location file="src\elements\plants\plants.hpp" line="50" column="14" info="Virtual destructor in base class"/>
            <symbol>~Sunflower</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::sec_for_prepare&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::sec_for_prepare&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="14" column="9"/>
            <symbol>Plants::sec_for_prepare</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;zombie&apos; can be declared as pointer to const" verbose="Variable &apos;zombie&apos; can be declared as pointer to const" cwe="398" file0="src/draw/render_elements.cpp">
            <location file="src\draw\render_elements.cpp" line="100" column="22" info="Variable &apos;zombie&apos; can be declared as pointer to const"/>
            <symbol>zombie</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::directory_num&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::directory_num&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="14" column="9"/>
            <symbol>Plants::directory_num</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The destructor &apos;~WallNut&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." verbose="The destructor &apos;~WallNut&apos; overrides a destructor in a base class but is not marked with a &apos;override&apos; specifier." file0="src/elements/elements_actions.cpp">
            <location file="src\elements\plants\wallnut\wallnut.hpp" line="8" column="6" info="Destructor in derived class"/>
            <location file="src\elements\plants\plants.hpp" line="50" column="14" info="Virtual destructor in base class"/>
            <symbol>~WallNut</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::attack_range&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::attack_range&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="14" column="9"/>
            <symbol>Plants::attack_range</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::type&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="25" column="9"/>
            <symbol>Plants::type</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::health&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::health&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="25" column="9"/>
            <symbol>Plants::health</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::sec_for_prepare&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::sec_for_prepare&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="25" column="9"/>
            <symbol>Plants::sec_for_prepare</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Plants::directory_num&apos; is not initialized in the constructor." verbose="Member variable &apos;Plants::directory_num&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.cpp" line="25" column="9"/>
            <symbol>Plants::directory_num</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Plants::is_died&apos; can be const." verbose="The member function &apos;Plants::is_died&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/plants/plants.cpp">
            <location file="src\elements\plants\plants.hpp" line="47" column="10"/>
            <location file="src\elements\plants\plants.cpp" line="100" column="14"/>
            <symbol>Plants::is_died</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;nlohmann/json.hpp&quot; not found." verbose="Include file: &quot;nlohmann/json.hpp&quot; not found.">
            <location file="src\elements\plants\snowpea\snowpea.cpp" line="3" column="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;nlohmann/json.hpp&quot; not found." verbose="Include file: &quot;nlohmann/json.hpp&quot; not found.">
            <location file="src\elements\plants\sunflower\sunflower.cpp" line="3" column="0"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Sunflower::is_gen_sun&apos; can be const." verbose="The member function &apos;Sunflower::is_gen_sun&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/plants/sunflower/sunflower.cpp">
            <location file="src\elements\plants\sunflower\sunflower.hpp" line="13" column="10"/>
            <location file="src\elements\plants\sunflower\sunflower.cpp" line="38" column="17"/>
            <symbol>Sunflower::is_gen_sun</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SnowPea::fire_pea&apos; can be const." verbose="The member function &apos;SnowPea::fire_pea&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/plants/snowpea/snowpea.cpp">
            <location file="src\elements\plants\snowpea\snowpea.hpp" line="13" column="10"/>
            <location file="src\elements\plants\snowpea\snowpea.cpp" line="39" column="15"/>
            <symbol>SnowPea::fire_pea</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;delete_plant&apos; argument 2 names different: declaration &apos;ind&apos; definition &apos;idx&apos;." verbose="Function &apos;delete_plant&apos; argument 2 names different: declaration &apos;ind&apos; definition &apos;idx&apos;." cwe="628" inconclusive="true" file0="src/elements/plants/plants_action.cpp">
            <location file="src\elements\plants\plants_action.cpp" line="77" column="50"/>
            <location file="src\elements\plants\plants.hpp" line="56" column="50"/>
            <symbol>delete_plant</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: temp.x_location" verbose="Uninitialized variable: temp.x_location" cwe="457" file0="src/elements/plants/sunflower/sunflower.cpp">
            <location file="src\elements\plants\sunflower\sunflower.cpp" line="99" column="28"/>
            <symbol>temp</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: temp.x_location" verbose="Uninitialized struct member: temp.x_location" cwe="457" file0="src/elements/plants/sunflower/sunflower.cpp">
            <location file="src\elements\plants\sunflower\sunflower.cpp" line="99" column="28"/>
            <symbol>temp.x_location</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Wave::zombie_count&apos; can be const." verbose="The member function &apos;Wave::zombie_count&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/zombies/wave.cpp">
            <location file="src\elements\zombies\wave.hpp" line="12" column="12"/>
            <location file="src\elements\zombies\wave.cpp" line="8" column="14"/>
            <symbol>Wave::zombie_count</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;nlohmann/json.hpp&quot; not found." verbose="Include file: &quot;nlohmann/json.hpp&quot; not found.">
            <location file="src\elements\plants\wallnut\wallnut.cpp" line="2" column="0"/>
        </error>
        <error id="constParameterReference" severity="style" msg="Parameter &apos;plants&apos; can be declared as reference to const" verbose="Parameter &apos;plants&apos; can be declared as reference to const" cwe="398" file0="src/elements/plants/plants_action.cpp">
            <location file="src\elements\plants\plants_action.cpp" line="90" column="45" info="Parameter &apos;plants&apos; can be declared as reference to const"/>
            <symbol>plants</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &quot;nlohmann/json.hpp&quot; not found." verbose="Include file: &quot;nlohmann/json.hpp&quot; not found.">
            <location file="src\level\level_data.hpp" line="3" column="0"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: temp.x_location" verbose="Uninitialized variable: temp.x_location" cwe="457" file0="src/elements/sun/sun.cpp">
            <location file="src\elements\sun\sun.cpp" line="21" column="20"/>
            <symbol>temp</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: temp.x_location" verbose="Uninitialized struct member: temp.x_location" cwe="457" file0="src/elements/sun/sun.cpp">
            <location file="src\elements\sun\sun.cpp" line="21" column="20"/>
            <symbol>temp.x_location</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::health&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::health&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::health</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::directory_num&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::directory_num&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::directory_num</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::frame&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::frame&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::frame</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::dir_width&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::dir_width&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::dir_width</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::dir_height&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::dir_height&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::dir_height</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::nZom&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::nZom&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::nZom</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::type&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::type</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::row&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::row&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::row</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::x_location&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::x_location&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::x_location</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::y_location&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::y_location&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::y_location</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::is_moving&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::is_moving&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::is_moving</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::attacked_time&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::attacked_time&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::attacked_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::cold_time&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::cold_time&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::cold_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::bite_time&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::bite_time&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::bite_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::next_step_time&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::next_step_time&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="48" column="9"/>
            <symbol>Zombie::next_step_time</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::health&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::health&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="57" column="9"/>
            <symbol>Zombie::health</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::dir_width&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::dir_width&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="57" column="9"/>
            <symbol>Zombie::dir_width</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::dir_height&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::dir_height&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="57" column="9"/>
            <symbol>Zombie::dir_height</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Zombie::nZom&apos; is not initialized in the constructor." verbose="Member variable &apos;Zombie::nZom&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.cpp" line="57" column="9"/>
            <symbol>Zombie::nZom</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Zombie::get_health&apos; can be const." verbose="The member function &apos;Zombie::get_health&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.hpp" line="63" column="9"/>
            <location file="src\elements\zombies\zombie_struct.cpp" line="90" column="13"/>
            <symbol>Zombie::get_health</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Zombie::add_zombie_die&apos; can be const." verbose="The member function &apos;Zombie::add_zombie_die&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true" file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.hpp" line="67" column="10"/>
            <location file="src\elements\zombies\zombie_struct.cpp" line="165" column="14"/>
            <symbol>Zombie::add_zombie_die</symbol>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &apos;init&apos; is called from constructor &apos;Zombie(int _type,int level_num)&apos; at line 76. Dynamic binding is not used." verbose="Virtual function &apos;init&apos; is called from constructor &apos;Zombie(int _type,int level_num)&apos; at line 76. Dynamic binding is not used." file0="src/elements/zombies/zombie_struct.cpp">
            <location file="src\elements\zombies\zombie_struct.hpp" line="56" column="18" info="init is a virtual function"/>
            <location file="src\elements\zombies\zombie_struct.cpp" line="76" column="5" info="Calling init"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;LevelSelector&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;LevelSelector&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="src/events/choose_level_scene/render_scene/display_choose_level.cpp">
            <location file="src\events\choose_level_scene\render_scene\LevelSelector.hpp" line="25" column="5"/>
            <symbol>LevelSelector</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;LevelSelector::display_locked&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;LevelSelector::display_locked&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/events/choose_level_scene/render_scene/LevelSelector.cpp">
            <location file="src\events\choose_level_scene\render_scene\LevelSelector.hpp" line="27" column="10"/>
            <location file="src\events\choose_level_scene\render_scene\LevelSelector.cpp" line="71" column="21"/>
            <symbol>LevelSelector::display_locked</symbol>
        </error>
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="src/events/choose_level_scene/choose_level/choose_level.cpp">
            <location file="src\events\choose_level_scene\choose_level\choose_level.cpp" line="0" column="0"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;LevelSelector::display_blink&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;LevelSelector::display_blink&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/events/choose_level_scene/render_scene/LevelSelector.cpp">
            <location file="src\events\choose_level_scene\render_scene\LevelSelector.hpp" line="28" column="10"/>
            <location file="src\events\choose_level_scene\render_scene\LevelSelector.cpp" line="85" column="21"/>
            <symbol>LevelSelector::display_blink</symbol>
        </error>
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="src/events/in_game/credit/credit.cpp">
            <location file="src\events\in_game\credit\credit.cpp" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;i!=MOUSE_CURSOR_DIRECTORY&apos; is always true" verbose="Condition &apos;i!=MOUSE_CURSOR_DIRECTORY&apos; is always true" cwe="571" file0="src/events/in_game/credit/credit.cpp">
            <location file="src\events\in_game\credit\credit.cpp" line="113" column="15" info="Condition &apos;i!=MOUSE_CURSOR_DIRECTORY&apos; is always true"/>
            <location file="src\events\in_game\credit\credit.cpp" line="112" column="46" info="Assuming that condition &apos;i&lt;=DOOR_ZOMBIE_EATING_3_BLINK_DIRECTORY&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cap_width&apos; can be reduced." verbose="The scope of the variable &apos;cap_width&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="src/events/in_game/credit/credit.cpp">
            <location file="src\events\in_game\credit\credit.cpp" line="156" column="9"/>
            <symbol>cap_width</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;LevelSelector::display_complete&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;LevelSelector::display_complete&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/events/choose_level_scene/render_scene/LevelSelector.cpp">
            <location file="src\events\choose_level_scene\render_scene\LevelSelector.hpp" line="29" column="10"/>
            <location file="src\events\choose_level_scene\render_scene\LevelSelector.cpp" line="92" column="21"/>
            <symbol>LevelSelector::display_complete</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::level_num&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::level_num&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::level_num</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;LevelSelector::is_mouse_in&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;LevelSelector::is_mouse_in&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/events/choose_level_scene/render_scene/LevelSelector.cpp">
            <location file="src\events\choose_level_scene\render_scene\LevelSelector.hpp" line="30" column="10"/>
            <location file="src\events\choose_level_scene\render_scene\LevelSelector.cpp" line="97" column="21"/>
            <symbol>LevelSelector::is_mouse_in</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::map_type&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::map_type&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::map_type</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::has_sun_from_sky&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::has_sun_from_sky&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::has_sun_from_sky</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::wave_count&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::wave_count&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::wave_count</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::cur_wave&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::cur_wave&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::cur_wave</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::final_wave&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::final_wave&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::final_wave</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::waves_finished&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::waves_finished&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::waves_finished</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::zombie_has_coming&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::zombie_has_coming&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::zombie_has_coming</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::zombie_count&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::zombie_count&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::zombie_count</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;zombie&apos; can be declared as pointer to const" verbose="Variable &apos;zombie&apos; can be declared as pointer to const" cwe="398" file0="src/events/in_game/lose/lose.cpp">
            <location file="src\events\in_game\lose\lose.cpp" line="41" column="22" info="Variable &apos;zombie&apos; can be declared as pointer to const"/>
            <symbol>zombie</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="src/events/in_game/lose/lose.cpp">
            <location file="src\events\in_game\lose\lose.cpp" line="41" column="5"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::used_zombie_count&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::used_zombie_count&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::used_zombie_count</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::next_wave_clk&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::next_wave_clk&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::next_wave_clk</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Level::zombie_delay_state&apos; is not initialized in the constructor." verbose="Member variable &apos;Level::zombie_delay_state&apos; is not initialized in the constructor. Member variables of native types, pointers, or references are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398" file0="src/elements/Level/Level.cpp">
            <location file="src\elements\Level\Level.cpp" line="5" column="8"/>
            <symbol>Level::zombie_delay_state</symbol>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;zombie&apos; can be declared as pointer to const" verbose="Variable &apos;zombie&apos; can be declared as pointer to const" cwe="398" file0="src/events/in_game/turbo/turbo.cpp">
            <location file="src\events\in_game\turbo\turbo.cpp" line="18" column="22" info="Variable &apos;zombie&apos; can be declared as pointer to const"/>
            <symbol>zombie</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="src/events/in_game/turbo/turbo.cpp">
            <location file="src\events\in_game\turbo\turbo.cpp" line="22" column="9"/>
        </error>
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="src/events/in_game/win/win.cpp">
            <location file="src\events\in_game\win\win.cpp" line="0" column="0"/>
        </error>
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="src/player/player_name.cpp">
            <location file="src\player\player_name.cpp" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;line&apos; can be reduced." verbose="The scope of the variable &apos;line&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="src/player/player_name.cpp">
            <location file="src\player\player_name.cpp" line="27" column="12"/>
            <symbol>line</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;display_unlock_plant&apos; argument 1 names different: declaration &apos;new_plant_dir&apos; definition &apos;_plant_type&apos;." verbose="Function &apos;display_unlock_plant&apos; argument 1 names different: declaration &apos;new_plant_dir&apos; definition &apos;_plant_type&apos;." cwe="628" inconclusive="true" file0="src/events/unlock_plant/unlock_plant.cpp">
            <location file="src\events\unlock_plant\unlock_plant.cpp" line="23" column="38"/>
            <location file="src\events\unlock_plant\unlock_plant.hpp" line="5" column="38"/>
            <symbol>display_unlock_plant</symbol>
        </error>
        <error id="stlcstrParam" severity="performance" msg="Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant." verbose="The conversion from const char* as returned by c_str() to std::string creates an unnecessary string copy or length calculation. Solve that by directly passing the string." cwe="704" file0="src/player/player_name.cpp">
            <location file="src\player\player_name.cpp" line="184" column="17"/>
        </error>
        <error id="constVariableReference" severity="style" msg="Variable &apos;des&apos; can be declared as reference to const" verbose="Variable &apos;des&apos; can be declared as reference to const" cwe="398" file0="src/events/unlock_plant/unlock_plant.cpp">
            <location file="src\events\unlock_plant\unlock_plant.cpp" line="103" column="16" info="Variable &apos;des&apos; can be declared as reference to const"/>
            <symbol>des</symbol>
        </error>
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="src/events/start_game/start_game.cpp">
            <location file="src\events\start_game\start_game.cpp" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!quit&apos; is always true" verbose="Condition &apos;!quit&apos; is always true" cwe="571" file0="src/events/start_game/start_game.cpp">
            <location file="src\events\start_game\start_game.cpp" line="55" column="12" info="Condition &apos;!quit&apos; is always true"/>
            <location file="src\events\start_game\start_game.cpp" line="54" column="17" info="Assignment &apos;quit=false&apos;, assigned value is 0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;quit&apos; shadows outer variable" verbose="Local variable &apos;quit&apos; shadows outer variable" cwe="398" file0="src/events/start_game/start_game.cpp">
            <location file="src\events\start_game\start_game.cpp" line="54" column="10" info="Shadow variable"/>
            <location file="src\events\start_game\start_game.cpp" line="10" column="13" info="Shadowed declaration"/>
            <symbol>quit</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: map_typ" verbose="Unused variable: map_typ" cwe="563" file0="src/level/level_data.cpp">
            <location file="src\level\level_data.cpp" line="68" column="12"/>
            <symbol>map_typ</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: wave_cnt" verbose="Unused variable: wave_cnt" cwe="563" file0="src/level/level_data.cpp">
            <location file="src\level\level_data.cpp" line="68" column="21"/>
            <symbol>wave_cnt</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: zombie_seq" verbose="Unused variable: zombie_seq" cwe="563" file0="src/level/level_data.cpp">
            <location file="src\level\level_data.cpp" line="68" column="31"/>
            <symbol>zombie_seq</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: wave_dur" verbose="Unused variable: wave_dur" cwe="563" file0="src/level/level_data.cpp">
            <location file="src\level\level_data.cpp" line="68" column="43"/>
            <symbol>wave_dur</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: temp" verbose="Unused variable: temp" cwe="563" file0="src/level/level_data.cpp">
            <location file="src\level\level_data.cpp" line="68" column="53"/>
            <symbol>temp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;auto_disable_turbo&apos; is never used." verbose="The function &apos;auto_disable_turbo&apos; is never used." cwe="561">
            <location file="src\events\in_game\turbo\turbo.cpp" line="16" column="0"/>
            <symbol>auto_disable_turbo</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;delete_all_sound_effect&apos; is never used." verbose="The function &apos;delete_all_sound_effect&apos; is never used." cwe="561">
            <location file="src\music\music.cpp" line="108" column="0"/>
            <symbol>delete_all_sound_effect</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;delete_all_texture_no_use&apos; is never used." verbose="The function &apos;delete_all_texture_no_use&apos; is never used." cwe="561">
            <location file="src\draw\rsdl_img.cpp" line="335" column="0"/>
            <symbol>delete_all_texture_no_use</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;display_chosen_plant&apos; is never used." verbose="The function &apos;display_chosen_plant&apos; is never used." cwe="561">
            <location file="src\draw\render_elements.cpp" line="143" column="0"/>
            <symbol>display_chosen_plant</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;display_credit&apos; is never used." verbose="The function &apos;display_credit&apos; is never used." cwe="561">
            <location file="src\events\in_game\credit\credit.cpp" line="61" column="0"/>
            <symbol>display_credit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;display_game_announce&apos; is never used." verbose="The function &apos;display_game_announce&apos; is never used." cwe="561">
            <location file="src\draw\render_message.cpp" line="24" column="0"/>
            <symbol>display_game_announce</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;display_game_leave&apos; is never used." verbose="The function &apos;display_game_leave&apos; is never used." cwe="561">
            <location file="src\events\in_game\main_menu\leave_menu.cpp" line="22" column="0"/>
            <symbol>display_game_leave</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;display_game_pause&apos; is never used." verbose="The function &apos;display_game_pause&apos; is never used." cwe="561">
            <location file="src\events\in_game\pause_menu\game_pause.cpp" line="13" column="0"/>
            <symbol>display_game_pause</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;display_game_restart&apos; is never used." verbose="The function &apos;display_game_restart&apos; is never used." cwe="561">
            <location file="src\events\in_game\restart_menu\restart_menu.cpp" line="23" column="0"/>
            <symbol>display_game_restart</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;display_level_is_locked&apos; is never used." verbose="The function &apos;display_level_is_locked&apos; is never used." cwe="561">
            <location file="src\elements\button\button.cpp" line="118" column="0"/>
            <symbol>display_level_is_locked</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;display_lose&apos; is never used." verbose="The function &apos;display_lose&apos; is never used." cwe="561">
            <location file="src\events\in_game\lose\lose.cpp" line="55" column="0"/>
            <symbol>display_lose</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;display_turbo_icon&apos; is never used." verbose="The function &apos;display_turbo_icon&apos; is never used." cwe="561">
            <location file="src\events\in_game\turbo\turbo.cpp" line="49" column="0"/>
            <symbol>display_turbo_icon</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;display_win&apos; is never used." verbose="The function &apos;display_win&apos; is never used." cwe="561">
            <location file="src\events\in_game\win\win.cpp" line="28" column="0"/>
            <symbol>display_win</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;draw_bmp&apos; is never used." verbose="The function &apos;draw_bmp&apos; is never used." cwe="561">
            <location file="src\draw\rsdl_img.cpp" line="114" column="0"/>
            <symbol>draw_bmp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;draw_point&apos; is never used." verbose="The function &apos;draw_point&apos; is never used." cwe="561">
            <location file="src\draw\rsdl_draw.cpp" line="37" column="0"/>
            <symbol>draw_point</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;draw_rect&apos; is never used." verbose="The function &apos;draw_rect&apos; is never used." cwe="561">
            <location file="src\draw\rsdl_draw.cpp" line="46" column="0"/>
            <symbol>draw_rect</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dump_err&apos; is never used." verbose="The function &apos;dump_err&apos; is never used." cwe="561">
            <location file="src\draw\rsdl.hpp" line="132" column="0"/>
            <symbol>dump_err</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_type&apos; is never used." verbose="The function &apos;get_type&apos; is never used." cwe="561">
            <location file="src\elements\plants\plants.cpp" line="45" column="0"/>
            <symbol>get_type</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;handle_changes&apos; is never used." verbose="The function &apos;handle_changes&apos; is never used." cwe="561">
            <location file="src\elements\elements_actions.cpp" line="28" column="0"/>
            <symbol>handle_changes</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;handle_leave_menu_click&apos; is never used." verbose="The function &apos;handle_leave_menu_click&apos; is never used." cwe="561">
            <location file="src\events\in_game\main_menu\leave_menu.cpp" line="51" column="0"/>
            <symbol>handle_leave_menu_click</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;handle_menu_click&apos; is never used." verbose="The function &apos;handle_menu_click&apos; is never used." cwe="561">
            <location file="src\events\in_game\pause_menu\game_pause.cpp" line="31" column="0"/>
            <symbol>handle_menu_click</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;handle_movements&apos; is never used." verbose="The function &apos;handle_movements&apos; is never used." cwe="561">
            <location file="src\elements\elements_actions.cpp" line="178" column="0"/>
            <symbol>handle_movements</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;handle_pause_icon_click&apos; is never used." verbose="The function &apos;handle_pause_icon_click&apos; is never used." cwe="561">
            <location file="src\events\in_game\pause_menu\game_pause.cpp" line="58" column="0"/>
            <symbol>handle_pause_icon_click</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;handle_restart_menu_click&apos; is never used." verbose="The function &apos;handle_restart_menu_click&apos; is never used." cwe="561">
            <location file="src\events\in_game\restart_menu\restart_menu.cpp" line="52" column="0"/>
            <symbol>handle_restart_menu_click</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;handle_turbo_icon_click&apos; is never used." verbose="The function &apos;handle_turbo_icon_click&apos; is never used." cwe="561">
            <location file="src\events\in_game\turbo\turbo.cpp" line="35" column="0"/>
            <symbol>handle_turbo_icon_click</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;handle_user_click&apos; is never used." verbose="The function &apos;handle_user_click&apos; is never used." cwe="561">
            <location file="src\events\in_game\game\player_click.cpp" line="23" column="0"/>
            <symbol>handle_user_click</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;handle_volume_change&apos; is never used." verbose="The function &apos;handle_volume_change&apos; is never used." cwe="561">
            <location file="src\events\in_game\volume\volume.cpp" line="34" column="0"/>
            <symbol>handle_volume_change</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;has_player_lost&apos; is never used." verbose="The function &apos;has_player_lost&apos; is never used." cwe="561">
            <location file="src\events\in_game\lose\lose.cpp" line="39" column="0"/>
            <symbol>has_player_lost</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;has_player_won&apos; is never used." verbose="The function &apos;has_player_won&apos; is never used." cwe="561">
            <location file="src\events\in_game\win\win.cpp" line="15" column="0"/>
            <symbol>has_player_won</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;is_armed&apos; is never used." verbose="The function &apos;is_armed&apos; is never used." cwe="561">
            <location file="src\elements\plants\PotatoMine\PotatoMine.cpp" line="144" column="0"/>
            <symbol>is_armed</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;show_text_utf8&apos; is never used." verbose="The function &apos;show_text_utf8&apos; is never used." cwe="561">
            <location file="src\draw\rsdl_ttf.cpp" line="144" column="0"/>
            <symbol>show_text_utf8</symbol>
        </error>
        <error id="checkersReport" severity="information" msg="Active checkers: 178/856 (use --checkers-report=&lt;filename&gt; to see details)" verbose="Active checkers: 178/856 (use --checkers-report=&lt;filename&gt; to see details)"/>
    </errors>
</results>
