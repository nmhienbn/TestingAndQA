ext\expert\expert.c:15:0: information: Include file: <sqlite3.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sqlite3.h>
^
ext\expert\expert.c:16:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts3\fts3_term.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3_aux.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3_unicode2.c:21:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_tokenize_vtab.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3_porter.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3_test.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3_expr.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\expert\sqlite3expert.h:15:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\fts3\tool\fts3view.c:17:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\expert\expert.c:17:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\fts3\fts3Int.h:17:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3Int.h:18:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\fts3\fts3_unicode.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3_snippet.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3_tokenizer.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3_unicode2.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_tokenizer1.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3Int.h:19:0: information: Include file: <stddef.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stddef.h>
^
ext\fts3\fts3_icu.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3Int.h:20:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts3\fts3_test.c:21:0: information: Include file: "tclsqlite.h" not found. [missingInclude]
#include "tclsqlite.h"
^
ext\fts3\fts3_hash.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3Int.h:21:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\expert\test_expert.c:17:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\tool\fts3view.c:18:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\expert\expert.c:18:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3Int.h:22:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\fts3\fts3Int.h:47:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
# include "sqlite3ext.h"
^
ext\expert\sqlite3expert.c:14:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3Int.h:51:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\fts3\fts3_tokenizer.h:27:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\fts3\fts3_tokenizer.c:29:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_unicode2.c:182:17: style: Variable 'aChar' can be declared as const array [constVariable]
  unsigned char aChar[] = {
                ^
ext\fts3\fts3_tokenizer1.c:28:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_tokenize_vtab.c:44:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_icu.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_porter.c:28:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_test.c:22:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_hash.c:29:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_expr.c:81:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\expert\test_expert.c:18:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\tool\fts3view.c:19:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\expert\expert.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_term.c:22:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_aux.c:17:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\expert\sqlite3expert.c:15:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_unicode.c:21:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_snippet.c:17:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_tokenizer.c:30:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_tokenizer1.c:29:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\fts3\fts3_tokenize_vtab.c:45:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_icu.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_icu.c:22:0: information: Include file: <unicode/ubrk.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unicode/ubrk.h>
^
ext\fts3\fts3_porter.c:29:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\fts3\fts3_test.c:23:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_hash.c:30:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\fts3\fts3_expr.c:82:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\expert\test_expert.c:19:0: information: Include file: "tclsqlite.h" not found. [missingInclude]
#include "tclsqlite.h"
^
ext\fts3\tool\fts3view.c:20:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_term.c:23:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_aux.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\expert\sqlite3expert.c:16:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts3\fts3_unicode.c:22:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\fts3\fts3_snippet.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_snippet.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_tokenizer1.c:30:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts5\fts5.h:24:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\fts3\fts3_tokenize_vtab.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_tokenize_vtab.c:78:13: style: Parameter 'pHash' can be declared as pointer to const [constParameterPointer]
  Fts3Hash *pHash,
            ^
ext\fts3\fts3_icu.c:23:0: information: Include file: <unicode/ucol.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unicode/ucol.h>
^
ext\fts3\fts3_porter.c:30:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts3\fts3_test.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_hash.c:31:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_expr.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_expr.c:1134:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts3\tool\fts3view.c:21:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\fts3\fts3_term.c:24:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\fts3\fts3_aux.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\expert\sqlite3expert.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_unicode.c:23:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts3\fts3_tokenizer.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_snippet.c:213:19: style: Condition 'p->aRef[0]==0' is always true [knownConditionTrueFalse]
    if( p->aRef[0]==0 && p->aRef[1]==0 && p->aRef[2]==0 ){
                  ^
ext\fts3\fts3_snippet.c:212:18: note: Assignment 'p->aRef[0]=0', assigned value is 0
    p->aRef[0] = 0;
                 ^
ext\fts3\fts3_snippet.c:213:19: note: Condition 'p->aRef[0]==0' is always true
    if( p->aRef[0]==0 && p->aRef[1]==0 && p->aRef[2]==0 ){
                  ^
ext\fts3\fts3_tokenizer1.c:31:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts5\fts5Int.h:18:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\fts3\fts3_tokenize_vtab.c:371:18: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts3tokCursor *pCsr = (Fts3tokCursor *)pCursor;
                 ^
ext\fts3\fts3_icu.c:24:0: information: Include file: <unicode/ustring.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unicode/ustring.h>
^
ext\fts3\fts3_porter.c:31:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_test.c:55:14: style: Parameter 'aToken' can be declared as pointer to const [constParameterPointer]
  NearToken *aToken
             ^
ext\fts3\fts3_hash.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\expert\test_expert.c:85:13: style: Variable 'zArg' can be declared as pointer to const [constVariablePointer]
      char *zArg = Tcl_GetString(objv[2]);
            ^
ext\fts3\fts3_expr.c:1279:8: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
    rc = pTokenizer->pModule->xDestroy(pTokenizer);
       ^
ext\fts3\tool\fts3view.c:22:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\fts3\fts3_term.c:207:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
ext\fts3\fts3_aux.c:462:18: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts3auxCursor *pCsr = (Fts3auxCursor *)pCursor;
                 ^
ext\expert\sqlite3expert.c:1465:6: style: Redundant initialization for 'rc'. The initialized value is overwritten before it is read. [redundantInitialization]
  rc = idxPrepareStmt(p->db, &pSchema, pzErrmsg,
     ^
ext\expert\sqlite3expert.c:1457:10: note: rc is initialized
  int rc = idxRegisterVtab(p);
         ^
ext\expert\sqlite3expert.c:1465:6: note: rc is overwritten
  rc = idxPrepareStmt(p->db, &pSchema, pzErrmsg,
     ^
ext\fts3\fts3_unicode.c:24:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_tokenizer.c:161:17: warning: Either the condition 'z2==0' is redundant or there is overflow in pointer subtraction. [nullPointerArithmeticRedundantCheck]
  *pn = (int)(z2-z1);
                ^
ext\fts3\fts3_tokenizer.c:134:12: note: Assuming that condition 'z2==0' is not redundant
  while( z2==0 ){
           ^
ext\fts3\fts3_tokenizer.c:161:17: note: Null pointer subtraction
  *pn = (int)(z2-z1);
                ^
ext\fts5\fts5Int.h:21:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_snippet.c:534:7: style: The scope of the variable 'iBestScore' can be reduced. [variableScope]
  int iBestScore = -1;            /* Best snippet score found so far */
      ^
ext\fts3\fts3_snippet.c:535:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                          /* Loop counter */
      ^
ext\fts3\fts3_snippet.c:301:15: style: Variable 'pPhrase' can be declared as pointer to const [constVariablePointer]
  Fts3Phrase *pPhrase = pExpr->pPhrase;
              ^
ext\fts3\fts3_icu.c:25:0: information: Include file: <unicode/utf16.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unicode/utf16.h>
^
ext\fts3\fts3_porter.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_test.c:60:16: style: Variable 'pToken' can be declared as pointer to const [constVariablePointer]
    NearToken *pToken = &p->aToken[ii];
               ^
ext\fts3\fts3_hash.c:227:7: style: The scope of the variable 'count' can be reduced. [variableScope]
  int count;                     /* Number of elements left to test */
      ^
ext\expert\test_expert.c:55:17: style: struct member 'Subcmd::zSub' is never used. [unusedStructMember]
    const char *zSub;
                ^
ext\fts3\tool\fts3view.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_term.c:299:19: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts3termCursor *pCsr = (Fts3termCursor *)pCursor;
                  ^
ext\fts3\fts3_aux.c:514:18: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts3auxCursor *pCsr = (Fts3auxCursor *)pCursor;
                 ^
ext\expert\sqlite3expert.c:792:9: style: The scope of the variable 'zAppend' can be reduced. [variableScope]
  char *zAppend = 0;
        ^
ext\fts3\fts3_unicode.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_tokenizer.c:83:13: style: Variable 'pOld' can be declared as pointer to const [constVariablePointer]
      void *pOld;
            ^
ext\fts3\fts3_tokenizer.c:166:13: style: Parameter 'pHash' can be declared as pointer to const [constParameterPointer]
  Fts3Hash *pHash,                /* Tokenizer hash table */
            ^
ext\fts3\fts3_tokenizer.c:175:9: style: Variable 'zEnd' can be declared as pointer to const [constVariablePointer]
  char *zEnd;                     /* Pointer to nul-term of zCopy */
        ^
ext\fts3\fts3_snippet.c:396:22: style: Variable 'pPhrase' can be declared as pointer to const [constVariablePointer]
      SnippetPhrase *pPhrase = &pIter->aPhrase[i];
                     ^
ext\fts3\fts3_icu.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_porter.c:295:14: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, mx, j;
             ^
ext\fts3\fts3_test.c:87:15: style: Variable 'pPrev' can be declared as pointer to const [constVariablePointer]
  NearPhrase *pPrev;
              ^
ext\fts3\fts3_hash.c:228:9: style: The scope of the variable 'xCompare' can be reduced. [variableScope]
  int (*xCompare)(const void*,int,const void*,int);  /* comparison function */
        ^
ext\fts3\tool\fts3view.c:462:7: style: The scope of the variable 'prevLevel' can be reduced. [variableScope]
  int prevLevel;
      ^
ext\fts3\fts3_term.c:339:19: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts3termCursor *pCsr = (Fts3termCursor *)pCursor;
                  ^
ext\fts3\fts3_aux.c:209:55: style: Variable 'iNext' is assigned a value that is never used. [unreadVariable]
    pInfo->aConstraintUsage[iLangid].argvIndex = iNext++;
                                                      ^
ext\expert\sqlite3expert.c:795:7: style: The scope of the variable 'nAppend' can be reduced. [variableScope]
  int nAppend = 0;
      ^
ext\fts3\fts3_unicode.c:187:10: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
    int *a = p->aiException;
         ^
ext\fts3\fts3_tokenizer1.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5Int.h:22:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_tokenizer.c:229:0: information: Include file: "tclsqlite.h" not found. [missingInclude]
#include "tclsqlite.h"
^
ext\fts3\fts3_write.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\fts3\fts3_snippet.c:727:20: style: Parameter 'pFragment' can be declared as pointer to const [constParameterPointer]
  SnippetFragment *pFragment,     /* Snippet to extract */
                   ^
ext\fts3\fts3_test.c:178:13: style: struct member 'TestnmSubcmd::zName' is never used. [unusedStructMember]
      char *zName;
            ^
ext\fts3\tool\fts3view.c:163:24: style: Variable 'x' can be declared as pointer to const [constVariablePointer]
        unsigned char *x = (unsigned char*)sqlite3_column_blob(pStmt, 1);
                       ^
ext\fts3\fts3_aux.c:405:20: style: Variable 'iNext' is assigned a value that is never used. [unreadVariable]
    iLangid = iNext++;
                   ^
ext\fts3\fts3.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\expert\sqlite3expert.c:974:11: style: The scope of the variable 'zIdx' can be reduced. [variableScope]
    char *zIdx = 0;
          ^
ext\fts3\fts3_tokenizer1.c:167:18: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  unsigned char *p = (unsigned char *)c->pInput;
                 ^
ext\fts5\fts5_aux.c:16:0: information: Include file: <math.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <math.h>                 /* amalgamator: keep */
^
ext\fts3\fts3_tokenizer.c:230:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_snippet.c:875:14: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Fts3Table *pTab = (Fts3Table *)p->pCursor->base.pVtab;
             ^
ext\fts3\fts3_snippet.c:993:14: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
  Fts3Table *pTab,
             ^
ext\fts3\fts3_test.c:580:10: style: Parameter 'clientData' can be declared as pointer to const. However it seems that 'fts3_may_be_corrupt' is a callback function, if 'clientData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void * clientData,
         ^
ext\fts3\fts3_test.c:615:46: note: You might need to cast the function pointer here
      interp, "sqlite3_fts3_may_be_corrupt", fts3_may_be_corrupt, 0, 0
                                             ^
ext\fts3\fts3_test.c:580:10: note: Parameter 'clientData' can be declared as pointer to const
  void * clientData,
         ^
ext\fts3\fts3_test.c:581:15: style: Parameter 'interp' can be declared as pointer to const. However it seems that 'fts3_may_be_corrupt' is a callback function, if 'interp' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Interp *interp,
              ^
ext\fts3\fts3_test.c:615:46: note: You might need to cast the function pointer here
      interp, "sqlite3_fts3_may_be_corrupt", fts3_may_be_corrupt, 0, 0
                                             ^
ext\fts3\fts3_test.c:581:15: note: Parameter 'interp' can be declared as pointer to const
  Tcl_Interp *interp,
              ^
ext\expert\sqlite3expert.c:976:18: style: The scope of the variable 'h' can be reduced. [variableScope]
    unsigned int h = 0;
                 ^
ext\fts3\fts3_tokenizer.c:262:13: style: Variable 'pHash' can be declared as pointer to const [constVariablePointer]
  Fts3Hash *pHash;
            ^
ext\fts3\fts3_snippet.c:1013:44: style: Parameter 'pInfo' can be declared as pointer to const [constParameterPointer]
static size_t fts3MatchinfoSize(MatchInfo *pInfo, char cArg){
                                           ^
ext\fts3\tool\fts3view.c:711:26: style: Variable 'iPrevPos' is assigned a value that is never used. [unreadVariable]
  sqlite3_int64 iPrevPos = 0;
                         ^
ext\fts3\fts3_test.c:583:18: style: Parameter 'objv' can be declared as const array. However it seems that 'fts3_may_be_corrupt' is a callback function, if 'objv' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Obj *CONST objv[]
                 ^
ext\fts3\fts3_test.c:615:46: note: You might need to cast the function pointer here
      interp, "sqlite3_fts3_may_be_corrupt", fts3_may_be_corrupt, 0, 0
                                             ^
ext\fts3\fts3_test.c:583:18: note: Parameter 'objv' can be declared as const array
  Tcl_Obj *CONST objv[]
                 ^
ext\expert\sqlite3expert.c:977:17: style: The scope of the variable 'zFmt' can be reduced. [variableScope]
    const char *zFmt;
                ^
ext\expert\sqlite3expert.c:1301:22: style: The scope of the variable 'zDrop' can be reduced. [variableScope]
  static const char *zDrop = "DROP TABLE " UNIQUE_TABLE_NAME;
                     ^
ext\expert\sqlite3expert.c:1682:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\expert\sqlite3expert.c:1806:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\expert\sqlite3expert.c:267:43: style: Parameter 'pHash' can be declared as pointer to const [constParameterPointer]
static IdxHashEntry *idxHashFind(IdxHash *pHash, const char *zKey, int nKey){
                                          ^
ext\expert\sqlite3expert.c:475:40: style: Variable 'pCons' can be declared as pointer to const [constVariablePointer]
      struct sqlite3_index_constraint *pCons = &pIdxInfo->aConstraint[i];
                                       ^
ext\expert\sqlite3expert.c:563:14: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  ExpertCsr *pCsr = (ExpertCsr*)cur;
             ^
ext\expert\sqlite3expert.c:955:32: style: Parameter 'azResults' can be declared as const array. However it seems that 'countNonzeros' is a callback function, if 'azResults' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
                         char* azResults[], char* azColumns[]){
                               ^
ext\expert\sqlite3expert.c:1006:39: note: You might need to cast the function pointer here
        rc = sqlite3_exec(dbm, zFind, countNonzeros, &i, 0);
                                      ^
ext\expert\sqlite3expert.c:955:32: note: Parameter 'azResults' can be declared as const array
                         char* azResults[], char* azColumns[]){
                               ^
ext\expert\sqlite3expert.c:1051:67: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int idxFindConstraint(IdxConstraint *pList, IdxConstraint *p){
                                                                  ^
ext\expert\sqlite3expert.c:1129:50: style: Parameter 'pLast' can be declared as pointer to const [constParameterPointer]
static void idxScanFree(IdxScan *pScan, IdxScan *pLast){
                                                 ^
ext\expert\sqlite3expert.c:1145:70: style: Parameter 'pLast' can be declared as pointer to const [constParameterPointer]
static void idxStatementFree(IdxStatement *pStatement, IdxStatement *pLast){
                                                                     ^
ext\expert\sqlite3expert.c:1380:13: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
  IdxWrite *pEnd = 0;
            ^
ext\fts3\fts3_write.c:23:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts5\fts5_expr.c:18:0: information: Include file: "fts5parse.h" not found. [missingInclude]
#include "fts5parse.h"
^
ext\fts3\fts3_write.c:24:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3.h:16:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\expert\sqlite3expert.c:792:17: style: Variable 'zAppend' is assigned a value that is never used. [unreadVariable]
  char *zAppend = 0;
                ^
ext\expert\sqlite3expert.c:974:16: style: Variable 'zIdx' is assigned a value that is never used. [unreadVariable]
    char *zIdx = 0;
               ^
ext\fts5\fts5_expr.c:40:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts3\fts3_write.c:25:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\fts3\fts3.c:301:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
# include "sqlite3ext.h"
^
ext\fts5\fts5_test_tok.c:44:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts3\fts3_write.c:26:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts5\fts5_test_tok.c:45:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts5\fts5_test_mi.c:47:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts5\fts5_test_mi.c:48:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts5\fts5_unicode2.c:19:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts5\fts5_tcl.c:17:0: information: Include file: "tclsqlite.h" not found. [missingInclude]
#include "tclsqlite.h"
^
ext\fts5\fts5_test_tok.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_tcl.c:22:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts5\fts5_tcl.c:23:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts5\fts5_tcl.c:24:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\icu\icu.c:36:0: information: Include file: <unicode/utypes.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unicode/utypes.h>
^
ext\icu\icu.c:37:0: information: Include file: <unicode/uregex.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unicode/uregex.h>
^
ext\icu\icu.c:38:0: information: Include file: <unicode/ustring.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unicode/ustring.h>
^
ext\icu\icu.c:39:0: information: Include file: <unicode/ucol.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unicode/ucol.h>
^
ext\icu\icu.c:41:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\icu\icu.c:44:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
  #include "sqlite3ext.h"
^
ext\icu\icu.c:583:3: error: There is an unknown macro here somewhere. Configuration is required. If SQLITE_EXTENSION_INIT2 is a macro then please configure it. [unknownMacro]
  SQLITE_EXTENSION_INIT2(pApi)
  ^
ext\intck\test_intck.c:16:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\fts5\fts5_buffer.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\icu\icu.c:47:0: information: Include file: "sqlite3.h" not found. [missingInclude]
  #include "sqlite3.h"
^
ext\intck\test_intck.c:18:0: information: Include file: "tclsqlite.h" not found. [missingInclude]
#include "tclsqlite.h"
^
ext\intck\sqlite3intck.h:61:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\fts5\fts5_varint.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest_tdb.h:17:0: information: Include file: "lsm.h" not found. [missingInclude]
#include "lsm.h"
^
ext\lsm1\lsm-test\lsmtest.h:6:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\lsm1\lsm-test\lsmtest.h:7:0: information: Include file: "lsm.h" not found. [missingInclude]
#include "lsm.h"
^
ext\fts3\fts3.c:6201:3: error: There is an unknown macro here somewhere. Configuration is required. If SQLITE_EXTENSION_INIT2 is a macro then please configure it. [unknownMacro]
  SQLITE_EXTENSION_INIT2(pApi)
  ^
ext\fts5\fts5_test_mi.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_vocab.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_aux.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\intck\test_intck.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\intck\sqlite3intck.c:15:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm-test\lsmtest.h:9:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm-test\lsmtest.h:10:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\lsm1\lsm-test\lsmtest.h:11:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\jni\src\c\sqlite3-jni.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
autosetup\jimsh0.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\intck\sqlite3intck.c:16:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm-test\lsmtest.h:12:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm-test\lsmtest.h:13:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm-test\lsmtest.h:18:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
ext\lsm1\lsm-test\lsmtest.h:19:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
ext\intck\sqlite3intck.c:18:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm-test\lsmtest.h:17:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
ext\intck\sqlite3intck.c:19:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\lsm1\lsm-test\lsmtest.h:21:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\icu\icu.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest.h:22:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
ext\intck\test_intck.c:20:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts5\fts5_config.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_hash.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest.h:20:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\lsm1\lsm-test\lsmtest4.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\jni\src\c\sqlite3-jni.c:147:0: information: Include file: "sqlite3.c" not found. [missingInclude]
#include INC__STRINGIFY(SQLITE_C)
^
ext\intck\sqlite3intck.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\jni\src\c\sqlite3-jni.h:2:0: information: Include file: <jni.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <jni.h>
^
ext\jni\src\c\sqlite3-jni.h:2209:0: information: Include file: <jni.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <jni.h>
^
ext\lsm1\lsm-test\lsmtest.h:15:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
ext\jni\src\c\sqlite3-jni.h:2238:0: information: Include file: <jni.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <jni.h>
^
ext\jni\src\c\sqlite3-jni.h:2411:0: information: Include file: <jni.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <jni.h>
^
ext\jni\src\c\sqlite3-jni.h:2442:0: information: Include file: <jni.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <jni.h>
^
ext\jni\src\c\sqlite3-jni.c:157:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\jni\src\c\sqlite3-jni.c:158:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h> /* only for testing/debugging */
^
ext\jni\src\c\sqlite3-jni.c:159:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h> /* intptr_t for 32-bit builds */
^
ext\jni\src\c\sqlite3-jni.c:4294:0: error: failed to expand 'S3JniHook_localdup', it is invalid to use a preprocessor directive as macro parameter [preprocessorErrorDirective]
#ifdef SQLITE_ENABLE_PREUPDATE_HOOK
^
ext\fts5\fts5_test_tok.c:397:18: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts5tokCursor *pCsr = (Fts5tokCursor *)pCursor;
                 ^
ext\fts5\fts5_test_tok.c:93:14: style: Variable 'iIn' is assigned a value that is never used. [unreadVariable]
          iIn++;
             ^
ext\intck\test_intck.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest5.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest.h:29:0: information: Include file: "windows.h" not found. [missingInclude]
# include "windows.h"
^
ext\lsm1\lsm-test\lsmtest.h:35:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <io.h>
^
ext\fts5\fts5_unicode2.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_tcl.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:157:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\fts5\fts5_tokenize.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:189:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
autosetup\jimsh0.c:190:0: information: Include file: <limits.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <limits.h>
^
autosetup\jimsh0.c:191:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
autosetup\jimsh0.c:192:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
autosetup\jimsh0.c:1057:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
autosetup\jimsh0.c:1154:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:1155:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
autosetup\jimsh0.c:1156:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
autosetup\jimsh0.c:1234:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
        #include <unistd.h>
^
autosetup\jimsh0.c:1235:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
        #include <fcntl.h>
^
autosetup\jimsh0.c:1236:0: information: Include file: <sys/wait.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
        #include <sys/wait.h>
^
autosetup\jimsh0.c:2027:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:2028:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:2029:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
autosetup\jimsh0.c:2030:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
autosetup\jimsh0.c:2031:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
autosetup\jimsh0.c:2033:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
autosetup\jimsh0.c:2034:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
autosetup\jimsh0.c:3539:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
autosetup\jimsh0.c:3540:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:3541:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:3545:0: information: Include file: <dirent.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <dirent.h>
^
autosetup\jimsh0.c:3601:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
autosetup\jimsh0.c:3602:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:4159:0: information: Include file: <limits.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <limits.h>
^
autosetup\jimsh0.c:4160:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
autosetup\jimsh0.c:4161:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm-test\lsmtest1.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest6.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:4162:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:4163:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
autosetup\jimsh0.c:4170:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
autosetup\jimsh0.c:5199:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:5200:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
autosetup\jimsh0.c:5258:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
autosetup\jimsh0.c:5259:0: information: Include file: <signal.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <signal.h>
^
ext\fts5\fts5_storage.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:5260:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
autosetup\jimsh0.c:6406:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
autosetup\jimsh0.c:6407:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:6408:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:6409:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
autosetup\jimsh0.c:6413:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/time.h>
^
autosetup\jimsh0.c:6607:0: information: Include file: <limits.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <limits.h>
^
autosetup\jimsh0.c:6608:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
autosetup\jimsh0.c:6609:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:6610:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:6611:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
autosetup\jimsh0.c:6856:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:6857:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\fts5\fts5_expr.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:6859:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:6860:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
autosetup\jimsh0.c:6861:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
autosetup\jimsh0.c:6862:0: information: Include file: <limits.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <limits.h>
^
autosetup\jimsh0.c:6863:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm-test\lsmtest3.c:66:10: style: Condition 'i==nEntry' is always false [knownConditionTrueFalse]
    if( i==nEntry ) break;
         ^
ext\lsm1\lsm-test\lsmtest3.c:64:13: note: Assuming that condition 'i<nEntry' is not redundant
  for(i=0; i<nEntry; i++){
            ^
ext\lsm1\lsm-test\lsmtest3.c:66:10: note: Condition 'i==nEntry' is always false
    if( i==nEntry ) break;
         ^
autosetup\jimsh0.c:6864:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
autosetup\jimsh0.c:6865:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
autosetup\jimsh0.c:6866:0: information: Include file: <setjmp.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <setjmp.h>
^
autosetup\jimsh0.c:6870:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/time.h>
^
autosetup\jimsh0.c:6880:0: information: Include file: <math.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <math.h>
^
autosetup\jimsh0.c:16865:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
autosetup\jimsh0.c:21520:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:21521:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:21748:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\lsm1\lsm-test\lsmtest3.c:48:10: warning: If memory allocation fails, then there is a possible null pointer dereference: pRet [nullPointerOutOfMemory]
  memset(pRet, 0, sizeof(CksumDb));
         ^
ext\lsm1\lsm-test\lsmtest3.c:47:16: note: Assuming allocation function fails
  pRet = malloc(sizeof(CksumDb));
               ^
ext\lsm1\lsm-test\lsmtest3.c:47:16: note: Assignment 'pRet=malloc(sizeof(struct CksumDb))', assigned value is 0
  pRet = malloc(sizeof(CksumDb));
               ^
ext\lsm1\lsm-test\lsmtest3.c:48:10: note: Null pointer dereference
  memset(pRet, 0, sizeof(CksumDb));
         ^
autosetup\jimsh0.c:21749:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
autosetup\jimsh0.c:21750:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm-test\lsmtest3.c:49:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pRet [nullPointerOutOfMemory]
  pRet->nFirst = nFirst;
  ^
ext\lsm1\lsm-test\lsmtest3.c:47:16: note: Assuming allocation function fails
  pRet = malloc(sizeof(CksumDb));
               ^
ext\lsm1\lsm-test\lsmtest3.c:47:16: note: Assignment 'pRet=malloc(sizeof(struct CksumDb))', assigned value is 0
  pRet = malloc(sizeof(CksumDb));
               ^
ext\lsm1\lsm-test\lsmtest3.c:49:3: note: Null pointer dereference
  pRet->nFirst = nFirst;
  ^
ext\lsm1\lsm-test\lsmtest7.c:90:7: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
  ret = lsm_csr_next(pCsr);
      ^
ext\lsm1\lsm-test\lsmtest7.c:85:7: note: ret is assigned
  ret = lsm_csr_first(pCsr);
      ^
ext\lsm1\lsm-test\lsmtest7.c:90:7: note: ret is overwritten
  ret = lsm_csr_next(pCsr);
      ^
autosetup\jimsh0.c:21751:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm-test\lsmtest3.c:50:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pRet [nullPointerOutOfMemory]
  pRet->nLast = nLast;
  ^
ext\lsm1\lsm-test\lsmtest3.c:47:16: note: Assuming allocation function fails
  pRet = malloc(sizeof(CksumDb));
               ^
ext\lsm1\lsm-test\lsmtest3.c:47:16: note: Assignment 'pRet=malloc(sizeof(struct CksumDb))', assigned value is 0
  pRet = malloc(sizeof(CksumDb));
               ^
ext\lsm1\lsm-test\lsmtest3.c:50:3: note: Null pointer dereference
  pRet->nLast = nLast;
  ^
ext\lsm1\lsm-test\lsmtest7.c:100:7: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
  ret = lsm_csr_prev(pCsr);
      ^
ext\lsm1\lsm-test\lsmtest7.c:95:7: note: ret is assigned
  ret = lsm_csr_last(pCsr);
      ^
ext\lsm1\lsm-test\lsmtest7.c:100:7: note: ret is overwritten
  ret = lsm_csr_prev(pCsr);
      ^
autosetup\jimsh0.c:21752:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm-test\lsmtest3.c:51:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pRet [nullPointerOutOfMemory]
  pRet->nStep = nStep;
  ^
ext\lsm1\lsm-test\lsmtest3.c:47:16: note: Assuming allocation function fails
  pRet = malloc(sizeof(CksumDb));
               ^
ext\lsm1\lsm-test\lsmtest3.c:47:16: note: Assignment 'pRet=malloc(sizeof(struct CksumDb))', assigned value is 0
  pRet = malloc(sizeof(CksumDb));
               ^
ext\lsm1\lsm-test\lsmtest3.c:51:3: note: Null pointer dereference
  pRet->nStep = nStep;
  ^
ext\lsm1\lsm-test\lsmtest3.c:56:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pRet [nullPointerOutOfMemory]
  pRet->azCksum = (char **)malloc(nEntry * (sizeof(char *) + TEST_CKSUM_BYTES));
  ^
ext\lsm1\lsm-test\lsmtest3.c:47:16: note: Assuming allocation function fails
  pRet = malloc(sizeof(CksumDb));
               ^
ext\lsm1\lsm-test\lsmtest3.c:47:16: note: Assignment 'pRet=malloc(sizeof(struct CksumDb))', assigned value is 0
  pRet = malloc(sizeof(CksumDb));
               ^
ext\lsm1\lsm-test\lsmtest3.c:56:3: note: Null pointer dereference
  pRet->azCksum = (char **)malloc(nEntry * (sizeof(char *) + TEST_CKSUM_BYTES));
  ^
autosetup\jimsh0.c:21782:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
autosetup\jimsh0.c:21783:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:21784:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:22173:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts5\fts5_main.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:22174:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
autosetup\jimsh0.c:22175:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
autosetup\jimsh0.c:22176:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:23623:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:23984:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:23985:0: information: Include file: <signal.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <signal.h>
^
ext\lsm1\lsm-test\lsmtest8.c:13:0: information: Include file: "lsmInt.h" not found. [missingInclude]
#include "lsmInt.h"
^
autosetup\jimsh0.c:24011:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
autosetup\jimsh0.c:24012:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
autosetup\jimsh0.c:24013:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm-test\lsmtest8.c:84:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts3\fts3_write.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\jni\src\c\sqlite3-jni.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
ext\fts3\fts3.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_test_mi.c:208:21: style: Parameter 'p' can be declared as pointer to const. However it seems that 'fts5MatchinfoLocalCb' is a callback function, if 'p' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Fts5MatchinfoCtx *p,
                    ^
ext\fts5\fts5_test_mi.c:385:43: note: You might need to cast the function pointer here
    rc = fts5MatchinfoIter(pApi, pFts, p, fts5MatchinfoLocalCb);
                                          ^
ext\fts5\fts5_test_mi.c:208:21: note: Parameter 'p' can be declared as pointer to const
  Fts5MatchinfoCtx *p,
                    ^
ext\lsm1\lsm-test\lsmtest2.c:146:24: style: Parameter 'pRc' can be declared as pointer to const [constParameterPointer]
int testCaseBegin(int *pRc, const char *zPattern, const char *zFmt, ...){
                       ^
ext\lsm1\lsm-test\lsmtest_bt.c:3:0: information: Include file: "bt.h" not found. [missingInclude]
#include "bt.h"
^
ext\lsm1\lsm-test\lsmtest9.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:24370:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
autosetup\jimsh0.c:24371:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\lsm1\lsm-test\lsmtest_bt.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:24372:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm-test\lsmtest8.c:286:27: style: Variable 'pHdr2->hdr1.aCksum[0]' is reassigned a value before the old one has been used. [redundantAssignment]
    pHdr2->hdr1.aCksum[0] = 6;
                          ^
ext\lsm1\lsm-test\lsmtest8.c:285:27: note: pHdr2->hdr1.aCksum[0] is assigned
    pHdr2->hdr1.aCksum[0] = 5;
                          ^
ext\lsm1\lsm-test\lsmtest8.c:286:27: note: pHdr2->hdr1.aCksum[0] is overwritten
    pHdr2->hdr1.aCksum[0] = 6;
                          ^
ext\lsm1\lsm-test\lsmtest8.c:294:27: style: Variable 'pHdr2->hdr2.aCksum[0]' is reassigned a value before the old one has been used. [redundantAssignment]
    pHdr2->hdr2.aCksum[0] = 6;
                          ^
ext\lsm1\lsm-test\lsmtest8.c:293:27: note: pHdr2->hdr2.aCksum[0] is assigned
    pHdr2->hdr2.aCksum[0] = 5;
                          ^
ext\lsm1\lsm-test\lsmtest8.c:294:27: note: pHdr2->hdr2.aCksum[0] is overwritten
    pHdr2->hdr2.aCksum[0] = 6;
                          ^
ext\lsm1\lsm-test\lsmtest8.c:164:10: style: The scope of the variable 'zCksum2' can be reduced. [variableScope]
    char zCksum2[TEST_CKSUM_BYTES];
         ^
ext\lsm1\lsm-test\lsmtest8.c:174:15: style: The scope of the variable 'db' can be reduced. [variableScope]
      lsm_db *db;
              ^
ext\lsm1\lsm-test\lsmtest8.c:108:9: style: Parameter 'pOut' can be declared as pointer to const [constParameterPointer]
  void *pOut,
        ^
ext\lsm1\lsm-test\lsmtest6.c:43:32: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int testOomHit(OomTest *p){
                               ^
ext\lsm1\lsm-test\lsmtest8.c:133:9: style: Variable 'zShm' can be declared as pointer to const [constVariablePointer]
  char *zShm = testMallocPrintf("%s-shm", zDb);
        ^
ext\lsm1\lsm-test\lsmtest6.c:47:35: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int testOomFinish(OomTest *p){
                                  ^
ext\lsm1\lsm-test\lsmtest6.c:87:9: style: Parameter 'pVal' can be declared as pointer to const [constParameterPointer]
  void *pVal, int nVal,
        ^
ext\lsm1\lsm-test\lsmtest_bt.c:7:17: style: struct member 'Option::zName' is never used. [unusedStructMember]
    const char *zName;
                ^
ext\lsm1\lsm-test\lsmtest8.c:19:7: style: struct member 'SetupStep::bFlush' is never used. [unusedStructMember]
  int bFlush;                     /* Flush to disk and checkpoint */
      ^
ext\lsm1\lsm-test\lsmtest_main.c:3:0: information: Include file: <sqlite3.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sqlite3.h>
^
ext\lsm1\lsm-test\lsmtest_io.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_unicode2.c:51:17: style: Variable 'aChar' can be declared as const array [constVariable]
  unsigned char aChar[] = {
                ^
ext\fts5\fts5_unicode2.c:768:34: style: Parameter 'aArray' can be declared as pointer to const [constParameterPointer]
void sqlite3Fts5UnicodeAscii(u8 *aArray, u8 *aAscii){
                                 ^
ext\lsm1\lsm-test\lsmtest_mem.c:2:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm-test\lsmtest_mem.c:3:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm-test\lsmtest_mem.c:4:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm-test\lsmtest_mem.c:304:0: information: Include file: "lsm.h" not found. [missingInclude]
#include "lsm.h"
^
ext\lsm1\lsm-test\lsmtest_main.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest5.c:631:26: style: Condition 'testThreadSupport()==0' is always true [knownConditionTrueFalse]
  if( testThreadSupport()==0 ) return;
                         ^
ext\lsm1\lsm-test\lsmtest5.c:631:24: note: Calling function 'testThreadSupport' returns 0
  if( testThreadSupport()==0 ) return;
                       ^
ext\lsm1\lsm-test\lsmtest5.c:631:26: note: Condition 'testThreadSupport()==0' is always true
  if( testThreadSupport()==0 ) return;
                         ^
ext\lsm1\lsm-test\lsmtest_mem.c:305:0: information: Include file: "stdlib.h" not found. [missingInclude]
#include "stdlib.h"
^
ext\lsm1\lsm-test\lsmtest1.c:555:14: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
  Datatest3 *p,                   /* Structure containing test parameters */
             ^
ext\lsm1\lsm-test\lsmtest_tdb.c:10:0: information: Include file: "lsm.h" not found. [missingInclude]
#include "lsm.h"
^
ext\fts5\fts5_index.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest_tdb.c:14:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\lsm1\lsm-test\lsmtest_tdb.c:15:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm-test\lsmtest_tdb.c:16:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm-test\lsmtest_tdb.c:18:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
ext\lsm1\lsm-test\lsmtest_tdb.c:20:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm-test\lsmtest_io.c:225:5: error: Memory leak: aData [memleak]
    return -1;
    ^
ext\lsm1\lsm-test\lsmtest5.c:617:63: error: Null pointer dereference: zMsg [nullPointer]
        printf("  Info: thread %d (%d): %s\n", iThread, *pRc, zMsg);
                                                              ^
ext\lsm1\lsm-test\lsmtest5.c:615:28: note: Assignment 'zMsg=0', assigned value is 0
        const char *zMsg = 0;
                           ^
ext\lsm1\lsm-test\lsmtest5.c:617:63: note: Null pointer dereference
        printf("  Info: thread %d (%d): %s\n", iThread, *pRc, zMsg);
                                                              ^
ext\lsm1\lsm-test\lsmtest_io.c:181:5: error: Common realloc mistake: 'zOut' nulled but not freed upon failure [memleakOnRealloc]
    zOut = realloc(zOut, nAlloc);
    ^
ext\lsm1\lsm-test\lsmtest5.c:617:63: error: Null pointer dereference [nullPointer]
        printf("  Info: thread %d (%d): %s\n", iThread, *pRc, zMsg);
                                                              ^
ext\fts5\fts5_tcl.c:429:59: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
      rc = p->pApi->xSetAuxdata(p->pFts, (void*)((char*)0 + iVal), 0);
                                                          ^
ext\lsm1\lsm-test\lsmtest_io.c:220:10: warning: If memory allocation fails, then there is a possible null pointer dereference: aData [nullPointerOutOfMemory]
  memset(aData, 0x77, pgsz);
         ^
ext\lsm1\lsm-test\lsmtest_io.c:219:17: note: Assuming allocation function fails
  aData = malloc(pgsz);
                ^
ext\lsm1\lsm-test\lsmtest_io.c:219:17: note: Assignment 'aData=malloc(pgsz)', assigned value is 0
  aData = malloc(pgsz);
                ^
ext\lsm1\lsm-test\lsmtest_io.c:220:10: note: Null pointer dereference
  memset(aData, 0x77, pgsz);
         ^
ext\lsm1\lsm-test\lsmtest_tdb4.c:8:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
ext\lsm1\lsm-test\lsmtest_tdb4.c:9:0: information: Include file: "bt.h" not found. [missingInclude]
#include "bt.h"
^
ext\lsm1\lsm-test\lsmtest_tdb4.c:11:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
ext\lsm1\lsm-test\lsmtest5.c:189:10: style: The scope of the variable 'zCksum' can be reduced. [variableScope]
    char zCksum[DB_KEY_BYTES];
         ^
ext\lsm1\lsm-test\lsmtest5.c:190:10: style: The scope of the variable 'zKey' can be reduced. [variableScope]
    char zKey[DB_KEY_BYTES];
         ^
ext\lsm1\lsm-test\lsmtest5.c:214:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
ext\lsm1\lsm-test\lsmtest_io.c:198:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\lsm1\lsm-test\lsmtest_mem.c:219:17: style: Variable 'pHdr' can be declared as pointer to const [constVariablePointer]
    TmBlockHdr *pHdr;
                ^
ext\lsm1\lsm-test\lsmtest5.c:80:17: style: Parameter 'pParam' can be declared as pointer to const [constParameterPointer]
  DbParameters *pParam,
                ^
ext\lsm1\lsm-test\lsmtest_mem.c:220:9: style: Variable 'pUser' can be declared as pointer to const [constVariablePointer]
    u8 *pUser = (u8 *)p;
        ^
ext\lsm1\lsm-test\lsmtest5.c:108:37: style: Parameter 'pParam' can be declared as pointer to const [constParameterPointer]
static int dbMaxLevel(DbParameters *pParam){
                                    ^
ext\fts5\fts5_hash.c:501:9: style: The scope of the variable 'zKey' can be reduced. [variableScope]
  char *zKey = 0;
        ^
ext\lsm1\lsm-test\lsmtest5.c:122:7: style: Variable 'aVal' can be declared as pointer to const [constVariablePointer]
  u8 *aVal = (u8 *)pVal;
      ^
ext\lsm1\lsm-test\lsmtest5.c:483:16: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  Mt1DelayCtx *p = (Mt1DelayCtx *)pCtx;
               ^
ext\lsm1\lsm-test\lsmtest5.c:491:30: style: Parameter 'pDb' can be declared as pointer to const. However it seems that 'xMt1Work' is a callback function, if 'pDb' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void xMt1Work(lsm_db *pDb, void *pCtx){
                             ^
ext\lsm1\lsm-test\lsmtest5.c:530:35: note: You might need to cast the function pointer here
    tdb_lsm_config_work_hook(pDb, xMt1Work, 0);
                                  ^
ext\lsm1\lsm-test\lsmtest5.c:491:30: note: Parameter 'pDb' can be declared as pointer to const
static void xMt1Work(lsm_db *pDb, void *pCtx){
                             ^
ext\lsm1\lsm-test\lsmtest5.c:491:41: style: Parameter 'pCtx' can be declared as pointer to const. However it seems that 'xMt1Work' is a callback function, if 'pCtx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void xMt1Work(lsm_db *pDb, void *pCtx){
                                        ^
ext\lsm1\lsm-test\lsmtest5.c:530:35: note: You might need to cast the function pointer here
    tdb_lsm_config_work_hook(pDb, xMt1Work, 0);
                                  ^
ext\lsm1\lsm-test\lsmtest5.c:491:41: note: Parameter 'pCtx' can be declared as pointer to const
static void xMt1Work(lsm_db *pDb, void *pCtx){
                                        ^
ext\lsm1\lsm-test\lsmtest5.c:595:18: style: Variable 'pSet' can be declared as pointer to const [constVariablePointer]
      ThreadSet *pSet;
                 ^
ext\lsm1\lsm-test\lsmtest_func.c:7:17: style: struct member 'Option::zName' is never used. [unusedStructMember]
    const char *zName;
                ^
ext\lsm1\lsm-test\lsmtest_func.c:87:17: style: struct member 'Option::zName' is never used. [unusedStructMember]
    const char *zName;
                ^
ext\lsm1\lsm-test\lsmtest5.c:483:18: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
  Mt1DelayCtx *p = (Mt1DelayCtx *)pCtx;
                 ^
ext\lsm1\lsm-test\lsmtest5.c:603:12: style: Variable 'pSet' is assigned a value that is never used. [unreadVariable]
      pSet = testThreadInit(nThread);
           ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:3:0: information: Include file: "lsm.h" not found. [missingInclude]
#include "lsm.h"
^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:4:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:6:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:7:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:8:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:10:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:12:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:15:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <sys/time.h>
^
ext\fts5\fts5_vocab.c:180:15: style: The scope of the variable 'azSchema' can be reduced. [variableScope]
  const char *azSchema[] = {
              ^
ext\fts5\fts5_hash.c:90:36: style: Parameter 'pConfig' can be declared as pointer to const [constParameterPointer]
int sqlite3Fts5HashNew(Fts5Config *pConfig, Fts5Hash **ppNew, int *pnByte){
                                   ^
ext\fts5\fts5_hash.c:195:13: style: Parameter 'pHash' can be declared as pointer to const [constParameterPointer]
  Fts5Hash *pHash,
            ^
ext\fts5\fts5_hash.c:264:11: style: Variable 'zKey' can be declared as pointer to const [constVariablePointer]
    char *zKey = fts5EntryKey(p);
          ^
ext\fts5\fts5_hash.c:415:13: style: Variable 'zKey1' can be declared as pointer to const [constVariablePointer]
      char *zKey1 = fts5EntryKey(p1);
            ^
ext\fts5\fts5_hash.c:416:13: style: Variable 'zKey2' can be declared as pointer to const [constVariablePointer]
      char *zKey2 = fts5EntryKey(p2);
            ^
ext\fts5\fts5_hash.c:448:13: style: Parameter 'pHash' can be declared as pointer to const [constParameterPointer]
  Fts5Hash *pHash,
            ^
ext\fts5\fts5_hash.c:501:9: style: Variable 'zKey' can be declared as pointer to const [constVariablePointer]
  char *zKey = 0;
        ^
ext\fts5\fts5_hash.c:564:38: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
int sqlite3Fts5HashScanEof(Fts5Hash *p){
                                     ^
ext\fts5\fts5_vocab.c:283:38: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];
                                     ^
ext\fts5\fts5_vocab.c:449:18: style: Variable 'pIter' can be declared as pointer to const [constVariablePointer]
  Fts5IndexIter *pIter = pCsr->pIter;
                 ^
ext\fts5\fts5_vocab.c:480:19: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Fts5VocabTable *pTab = (Fts5VocabTable*)pCursor->pVtab;
                  ^
ext\fts5\fts5_vocab.c:623:19: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Fts5VocabTable *pTab = (Fts5VocabTable*)pCursor->pVtab;
                  ^
ext\lsm1\lsm-test\lsmtest5.c:264:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
ext\lsm1\lsm-test\lsmtest_util.c:3:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\lsm1\lsm-test\lsmtest_mem.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_vocab.c:692:20: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts5VocabCursor *pCsr = (Fts5VocabCursor*)pCursor;
                   ^
ext\lsm1\lsm-test\lsmtest5.c:265:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
ext\lsm1\lsm-test\lsmtest_tdb4.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest_util.c:4:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm-test\lsmtest_util.c:5:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm-test\lsmtest_util.c:7:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <sys/time.h>
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_vocab.c:772:20: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts5VocabCursor *pCsr = (Fts5VocabCursor*)pCursor;
                   ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:7:0: information: Include file: "kcpolydb.h" not found. [missingInclude]
#include "kcpolydb.h"
^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_tcl.c:734:9: style: Variable 'zText' can be declared as pointer to const [constVariablePointer]
  char *zText = 0;
        ^
ext\fts5\fts5_tcl.c:1095:11: style: Variable 'zArg' can be declared as pointer to const [constVariablePointer]
    char *zArg = Tcl_GetStringFromObj(objv[1], &nArg);
          ^
ext\fts5\fts5_tcl.c:1322:9: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
  char *z;
        ^
ext\fts5\fts5_hash.c:501:14: style: Variable 'zKey' is assigned a value that is never used. [unreadVariable]
  char *zKey = 0;
             ^
ext\intck\sqlite3intck.c:163:14: error: va_list 'ap' was opened but not closed by va_end(). [va_end_missing]
  return zRet;
             ^
ext\lsm1\lsm.h:17:0: information: Include file: <stddef.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stddef.h>
^
ext\lsm1\lsmInt.h:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsmInt.h:21:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\lsm1\lsmInt.h:22:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\lsm1\lsmInt.h:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsmInt.h:23:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsmInt.h:24:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\lsm1\lsmInt.h:31:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
ext\lsm1\lsm_file.c:152:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
ext\lsm1\lsm_file.c:153:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
ext\lsm1\lsm_file.c:154:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:28:10: warning: If memory allocation fails, then there is a possible null pointer dereference: pKcDb [nullPointerOutOfMemory]
  memset(pKcDb, 0, sizeof(KcDb));
         ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:25: note: Assuming allocation function fails
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
                        ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:11: note: Assignment 'pKcDb=(KcDb*)malloc(sizeof(KcDb))', assigned value is 0
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
          ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:28:10: note: Null pointer dereference
  memset(pKcDb, 0, sizeof(KcDb));
         ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:31:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pKcDb [nullPointerOutOfMemory]
  pKcDb->db = new kyotocabinet::TreeDB();
  ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:25: note: Assuming allocation function fails
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
                        ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:11: note: Assignment 'pKcDb=(KcDb*)malloc(sizeof(KcDb))', assigned value is 0
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
          ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:31:3: note: Null pointer dereference
  pKcDb->db = new kyotocabinet::TreeDB();
  ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:32:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pKcDb [nullPointerOutOfMemory]
  pKcDb->db->tune_page(TESTDB_DEFAULT_PAGE_SIZE);
  ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:25: note: Assuming allocation function fails
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
                        ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:11: note: Assignment 'pKcDb=(KcDb*)malloc(sizeof(KcDb))', assigned value is 0
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
          ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:32:3: note: Null pointer dereference
  pKcDb->db->tune_page(TESTDB_DEFAULT_PAGE_SIZE);
  ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:33:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pKcDb [nullPointerOutOfMemory]
  pKcDb->db->tune_page_cache(
  ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:25: note: Assuming allocation function fails
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
                        ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:11: note: Assignment 'pKcDb=(KcDb*)malloc(sizeof(KcDb))', assigned value is 0
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
          ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:33:3: note: Null pointer dereference
  pKcDb->db->tune_page_cache(
  ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:36:8: warning: If memory allocation fails, then there is a possible null pointer dereference: pKcDb [nullPointerOutOfMemory]
  ok = pKcDb->db->open(zFilename,
       ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:25: note: Assuming allocation function fails
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
                        ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:11: note: Assignment 'pKcDb=(KcDb*)malloc(sizeof(KcDb))', assigned value is 0
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
          ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:36:8: note: Null pointer dereference
  ok = pKcDb->db->open(zFilename,
       ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:27:11: style: C-style pointer casting [cstyleCast]
  pKcDb = (KcDb *)malloc(sizeof(KcDb));
          ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:45:12: style: C-style pointer casting [cstyleCast]
  *ppDb = (TestDb *)pKcDb;
           ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:50:17: style: C-style pointer casting [cstyleCast]
  KcDb *pKcDb = (KcDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:61:17: style: C-style pointer casting [cstyleCast]
  KcDb *pKcDb = (KcDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:64:24: style: C-style pointer casting [cstyleCast]
  ok = pKcDb->db->set((const char *)pKey, nKey, (const char *)pVal, nVal);
                       ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:69:17: style: C-style pointer casting [cstyleCast]
  KcDb *pKcDb = (KcDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:72:27: style: C-style pointer casting [cstyleCast]
  ok = pKcDb->db->remove((const char *)pKey, nKey);
                          ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:82:17: style: C-style pointer casting [cstyleCast]
  KcDb *pKcDb = (KcDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:86:23: style: C-style pointer casting [cstyleCast]
    res = pCur->jump((const char *)pKey1, nKey1);
                      ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:127:17: style: C-style pointer casting [cstyleCast]
  KcDb *pKcDb = (KcDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:135:33: style: C-style pointer casting [cstyleCast]
  pKcDb->pVal = pKcDb->db->get((const char *)pKey, nKey, &nVal);
                                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:155:17: style: C-style pointer casting [cstyleCast]
  KcDb *pKcDb = (KcDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:161:25: style: C-style pointer casting [cstyleCast]
      res = pCur->jump((const char *)pKey1, nKey1);
                        ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:167:30: style: C-style pointer casting [cstyleCast]
      res = pCur->jump_back((const char *)pKey2, nKey2);
                             ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:192:21: style: C-style pointer casting [cstyleCast]
    xCallback(pCtx, (void *)pKey, (int)nKey, (void *)pVal, (int)nVal);
                    ^
ext\fts5\fts5_aux.c:491:13: style: The scope of the variable 'jj' can be reduced. [variableScope]
        int jj;
            ^
ext\lsm1\lsm_ckpt.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_main.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_shared.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:79:9: style: Parameter 'pKey2' can be declared as pointer to const [constParameterPointer]
  void *pKey2, int nKey2
        ^
ext\lsm1\lsm-test\lsmtest5.c:631:26: style: Condition 'testThreadSupport()==0' is always false [knownConditionTrueFalse]
  if( testThreadSupport()==0 ) return;
                         ^
ext\lsm1\lsm-test\lsmtest5.c:631:24: note: Calling function 'testThreadSupport' returns 1
  if( testThreadSupport()==0 ) return;
                       ^
ext\lsm1\lsm-test\lsmtest5.c:631:26: note: Condition 'testThreadSupport()==0' is always false
  if( testThreadSupport()==0 ) return;
                         ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:86:9: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
    res = pCur->jump((const char *)pKey1, nKey1);
        ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:88:9: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
    res = pCur->jump();
        ^
ext\lsm1\lsm-test\lsmtest5.c:403:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;
          ^
ext\lsm1\lsm-test\lsmtest5.c:363:41: style: Parameter 'pThreadSet' can be declared as pointer to const [constParameterPointer]
static int testThreadGetHalt(ThreadSet *pThreadSet){
                                        ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:208:0: information: Include file: "lmdb.h" not found. [missingInclude]
#include "lmdb.h"
^
ext\lsm1\lsm_log.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_file.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:235:10: warning: If memory allocation fails, then there is a possible null pointer dereference: pMdb [nullPointerOutOfMemory]
  memset(pMdb, 0, sizeof(MdbDb));
         ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:234:25: note: Assuming allocation function fails
  pMdb = (MdbDb *)malloc(sizeof(MdbDb));
                        ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:234:10: note: Assignment 'pMdb=(MdbDb*)malloc(sizeof(MdbDb))', assigned value is 0
  pMdb = (MdbDb *)malloc(sizeof(MdbDb));
         ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:235:10: note: Null pointer dereference
  memset(pMdb, 0, sizeof(MdbDb));
         ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:234:10: style: C-style pointer casting [cstyleCast]
  pMdb = (MdbDb *)malloc(sizeof(MdbDb));
         ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:246:12: style: C-style pointer casting [cstyleCast]
  *ppDb = (TestDb *)pMdb;
           ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:251:17: style: C-style pointer casting [cstyleCast]
  MdbDb *pMdb = (MdbDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:261:17: style: C-style pointer casting [cstyleCast]
  MdbDb *pMdb = (MdbDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:286:17: style: C-style pointer casting [cstyleCast]
  MdbDb *pMdb = (MdbDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:313:17: style: C-style pointer casting [cstyleCast]
  MdbDb *pMdb = (MdbDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb2.cc:346:17: style: C-style pointer casting [cstyleCast]
  MdbDb *pMdb = (MdbDb *)pDb;
                ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:864:30: style: Condition '*z=='M'' is always false [knownConditionTrueFalse]
      }else if( *z=='M' || *z=='M' ){
                             ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:864:25: style: Same expression on both sides of '||'. [duplicateExpression]
      }else if( *z=='M' || *z=='M' ){
                        ^
ext\lsm1\lsm_tree.c:88:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:686:10: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
      rc = lsm_csr_seek(csr, pLast, nLast, LSM_SEEK_LE);
         ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:668:8: note: rc is assigned
    rc = LSM_OK;
       ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:686:10: note: rc is overwritten
      rc = lsm_csr_seek(csr, pLast, nLast, LSM_SEEK_LE);
         ^
ext\lsm1\lsm_main.c:880:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:686:10: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
      rc = lsm_csr_seek(csr, pLast, nLast, LSM_SEEK_LE);
         ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:678:10: note: rc is assigned
      rc = lsm_csr_seek(csr, pFirst, nFirst, LSM_SEEK_LE);
         ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:686:10: note: rc is overwritten
      rc = lsm_csr_seek(csr, pLast, nLast, LSM_SEEK_LE);
         ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:686:10: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
      rc = lsm_csr_seek(csr, pLast, nLast, LSM_SEEK_LE);
         ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:680:10: note: rc is assigned
      rc = lsm_csr_seek(csr, pLast, nLast, LSM_SEEK_GE);
         ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:686:10: note: rc is overwritten
      rc = lsm_csr_seek(csr, pLast, nLast, LSM_SEEK_LE);
         ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:259:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\lsm1\lsm_main.c:56:23: style: Parameter 'p1' can be declared as pointer to const. However it seems that 'xCmp' is a callback function, if 'p1' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int xCmp(void *p1, int n1, void *p2, int n2){
                      ^
ext\lsm1\lsm_main.c:90:15: note: You might need to cast the function pointer here
  pDb->xCmp = xCmp;
              ^
ext\lsm1\lsm_main.c:56:23: note: Parameter 'p1' can be declared as pointer to const
static int xCmp(void *p1, int n1, void *p2, int n2){
                      ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:518:38: style: Parameter 'pDb' can be declared as pointer to const [constParameterPointer]
static int waitOnCheckpointer(LsmDb *pDb, lsm_db *db){
                                     ^
ext\lsm1\lsm_main.c:56:41: style: Parameter 'p2' can be declared as pointer to const. However it seems that 'xCmp' is a callback function, if 'p2' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int xCmp(void *p1, int n1, void *p2, int n2){
                                        ^
ext\lsm1\lsm_main.c:90:15: note: You might need to cast the function pointer here
  pDb->xCmp = xCmp;
              ^
ext\lsm1\lsm_main.c:56:41: note: Parameter 'p2' can be declared as pointer to const
static int xCmp(void *p1, int n1, void *p2, int n2){
                                        ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:661:15: style: Variable 'csr2' can be declared as pointer to const [constVariablePointer]
  lsm_cursor *csr2 = 0;
              ^
ext\lsm1\lsm_main.c:150:45: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
static void assertRwclientLockValue(lsm_db *db){
                                            ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:771:24: style: Parameter 'pCtx' can be declared as pointer to const. However it seems that 'xLog' is a callback function, if 'pCtx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void xLog(void *pCtx, int rc, const char *z){
                       ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1107:35: note: You might need to cast the function pointer here
    lsm_config_log(db, (bEnable ? xLog : 0), (void *)"client");
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:771:24: note: Parameter 'pCtx' can be declared as pointer to const
static void xLog(void *pCtx, int rc, const char *z){
                       ^
ext\lsm1\lsm_main.c:389:21: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
      lsm_compress *p = va_arg(ap, lsm_compress *);
                    ^
ext\lsm1\lsm_main.c:410:29: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
      lsm_compress_factory *p = va_arg(ap, lsm_compress_factory *);
                            ^
ext\lsm1\lsm-test\lsmtest_tdb4.c:837:11: style: Local variable 'rc' shadows outer variable [shadowVariable]
      int rc;
          ^
ext\lsm1\lsm-test\lsmtest_tdb4.c:820:7: note: Shadowed declaration
  int rc;
      ^
ext\lsm1\lsm-test\lsmtest_tdb4.c:837:11: note: Shadow variable
      int rc;
          ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:52:39: style: struct member 'LsmWorker::bBlock' is never used. [unusedStructMember]
struct LsmWorker { int worker_rc; int bBlock; };
                                      ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:800:17: style: struct member 'CfgParam::zParam' is never used. [unusedStructMember]
    const char *zParam;
                ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:519:14: style: Variable 'nSleep' is assigned a value that is never used. [unreadVariable]
  int nSleep = 0;
             ^
ext\lsm1\lsm-test\lsmtest_tdb4.c:386:9: style: Parameter 'pKey2' can be declared as pointer to const. However it seems that 'bt_delete_range' is a callback function, if 'pKey2' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void *pKey2, int nKey2
        ^
ext\lsm1\lsm-test\lsmtest_tdb4.c:694:5: note: You might need to cast the function pointer here
    bt_delete_range,
    ^
ext\lsm1\lsm-test\lsmtest_tdb4.c:386:9: note: Parameter 'pKey2' can be declared as pointer to const
  void *pKey2, int nKey2
        ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:533:12: style: Variable 'nSleep' is assigned a value that is never used. [unreadVariable]
    nSleep += 5;
           ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:546:14: style: Variable 'nSleep' is assigned a value that is never used. [unreadVariable]
  int nSleep = 0;
             ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:558:12: style: Variable 'nSleep' is assigned a value that is never used. [unreadVariable]
    nSleep += 5;
           ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:661:20: style: Variable 'csr2' is assigned a value that is never used. [unreadVariable]
  lsm_cursor *csr2 = 0;
                   ^
ext\lsm1\lsm-test\lsmtest_tdb4.c:948:8: error: Uninitialized variable: pp [uninitvar]
      *pp = pCkpter->pNext;
       ^
ext\lsm1\lsm-test\lsmtest_tdb4.c:636:19: style: struct member 'CfgParam::zParam' is never used. [unusedStructMember]
      const char *zParam;
                  ^
ext\lsm1\lsm-test\lsmtest_tdb4.c:826:6: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  rc = testBtConfigure(pDb, (char*)pCkpter->spec.p, &mt);
     ^
ext\lsm1\lsm_sorted.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest_tdb3.c:438:0: information: Include file: <zlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <zlib.h>
^
ext\lsm1\lsm_unix.c:25:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
ext\lsm1\lsm_unix.c:26:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
ext\lsm1\lsm_unix.c:28:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
ext\lsm1\lsm-test\lsmtest_tdb.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_unix.c:29:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
ext\lsm1\lsm_unix.c:30:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm_unix.c:31:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm_unix.c:33:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\lsm1\lsm_unix.c:34:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\lsm1\lsm_unix.c:35:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm_unix.c:36:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\lsm1\lsm_unix.c:38:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
ext\lsm1\lsm_unix.c:39:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
ext\lsm1\lsm_unix.c:41:0: information: Include file: <sys/mman.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/mman.h>
^
ext\fts5\fts5_tcl.c:1283:10: style: Parameter 'clientData' can be declared as pointer to const. However it seems that 'f5tMayBeCorrupt' is a callback function, if 'clientData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void * clientData,
         ^
ext\fts5\fts5_tcl.c:1713:42: note: You might need to cast the function pointer here
    { "sqlite3_fts5_may_be_corrupt",     f5tMayBeCorrupt, 0 },
                                         ^
ext\fts5\fts5_tcl.c:1283:10: note: Parameter 'clientData' can be declared as pointer to const
  void * clientData,
         ^
ext\fts5\fts5_tcl.c:1284:15: style: Parameter 'interp' can be declared as pointer to const. However it seems that 'f5tMayBeCorrupt' is a callback function, if 'interp' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Interp *interp,
              ^
ext\fts5\fts5_tcl.c:1713:42: note: You might need to cast the function pointer here
    { "sqlite3_fts5_may_be_corrupt",     f5tMayBeCorrupt, 0 },
                                         ^
ext\fts5\fts5_tcl.c:1284:15: note: Parameter 'interp' can be declared as pointer to const
  Tcl_Interp *interp,
              ^
ext\lsm1\lsm_tree.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_tcl.c:1286:18: style: Parameter 'objv' can be declared as const array. However it seems that 'f5tMayBeCorrupt' is a callback function, if 'objv' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Obj *CONST objv[]
                 ^
ext\fts5\fts5_tcl.c:1713:42: note: You might need to cast the function pointer here
    { "sqlite3_fts5_may_be_corrupt",     f5tMayBeCorrupt, 0 },
                                         ^
ext\fts5\fts5_tcl.c:1286:18: note: Parameter 'objv' can be declared as const array
  Tcl_Obj *CONST objv[]
                 ^
ext\lsm1\lsm_unix.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_vtab.c:90:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\lsm1\lsm_vtab.c:93:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm_vtab.c:94:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm_unix.c:483:5: warning: If memory allocation fails, then there is a possible null pointer dereference: (unsigned long long*)m [nullPointerOutOfMemory]
  *((size_t*)m) = N;
    ^
ext\lsm1\lsm_unix.c:482:30: note: Assuming allocation function fails
  m = (unsigned char *)malloc(N);
                             ^
ext\lsm1\lsm_unix.c:482:7: note: Assignment 'm=(unsigned char*)malloc(N)', assigned value is 0
  m = (unsigned char *)malloc(N);
      ^
ext\lsm1\lsm_unix.c:483:5: note: Null pointer dereference
  *((size_t*)m) = N;
    ^
ext\lsm1\lsm_unix.c:484:12: error: If memory allocation fail: pointer addition with NULL pointer. [nullPointerArithmeticOutOfMemory]
  return m + BLOCK_HDR_SIZE;
           ^
ext\lsm1\lsm_unix.c:482:30: note: Assuming allocation function fails
  m = (unsigned char *)malloc(N);
                             ^
ext\lsm1\lsm_unix.c:482:7: note: Assignment 'm=(unsigned char*)malloc(N)', assigned value is 0
  m = (unsigned char *)malloc(N);
      ^
ext\lsm1\lsm_unix.c:484:12: note: Null pointer addition
  return m + BLOCK_HDR_SIZE;
           ^
ext\lsm1\lsm_unix.c:204:7: style: The scope of the variable 'prc' can be reduced. [variableScope]
  int prc;
      ^
ext\lsm1\lsm_unix.c:193:43: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'lsmPosixOsSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int lsmPosixOsSectorSize(lsm_file *pFile){
                                          ^
ext\lsm1\lsm_unix.c:721:5: note: You might need to cast the function pointer here
    lsmPosixOsSectorSize,    /* xSectorSize */
    ^
ext\lsm1\lsm_unix.c:193:43: note: Parameter 'pFile' can be declared as pointer to const
static int lsmPosixOsSectorSize(lsm_file *pFile){
                                          ^
ext\lsm1\lsm_unix.c:253:11: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
    char *z;
          ^
ext\lsm1\lsm_unix.c:465:37: style: Parameter 'pEnv' can be declared as pointer to const. However it seems that 'lsmPosixOsSleep' is a callback function, if 'pEnv' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int lsmPosixOsSleep(lsm_env *pEnv, int us){
                                    ^
ext\lsm1\lsm_unix.c:748:5: note: You might need to cast the function pointer here
    lsmPosixOsSleep,         /* xSleep */
    ^
ext\lsm1\lsm_unix.c:465:37: note: Parameter 'pEnv' can be declared as pointer to const
static int lsmPosixOsSleep(lsm_env *pEnv, int us){
                                    ^
ext\lsm1\lsm_unix.c:520:40: style: Parameter 'pEnv' can be declared as pointer to const. However it seems that 'lsmPosixOsMSize' is a callback function, if 'pEnv' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static size_t lsmPosixOsMSize(lsm_env *pEnv, void *p){
                                       ^
ext\lsm1\lsm_unix.c:736:5: note: You might need to cast the function pointer here
    lsmPosixOsMSize,         /* xSize */
    ^
ext\lsm1\lsm_unix.c:520:40: note: Parameter 'pEnv' can be declared as pointer to const
static size_t lsmPosixOsMSize(lsm_env *pEnv, void *p){
                                       ^
ext\lsm1\lsm_unix.c:521:19: style: Variable 'm' can be declared as pointer to const [constVariablePointer]
  unsigned char * m = (unsigned char *)p;
                  ^
ext\lsm1\lsm_unix.c:696:14: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  NoopMutex *p = (NoopMutex *)pMutex;
             ^
ext\lsm1\lsm_win32.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\lsm1\lsm_win32.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm_win32.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm_win32.c:21:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\lsm1\lsm_win32.c:22:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\lsm1\lsm_win32.c:23:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm_win32.c:24:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\lsm1\lsm_win32.c:26:0: information: Include file: "windows.h" not found. [missingInclude]
#include "windows.h"
^
ext\lsm1\lsm_win32.c:836:0: information: Include file: "windows.h" not found. [missingInclude]
#include "windows.h"
^
ext\fts5\fts5_tcl.c:1737:30: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
int Fts5tcl_Init(Tcl_Interp *interp){
                             ^
ext\lsm1\lsm_vtab.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\anycollseq.c:21:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\anycollseq.c:23:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\amatch.c:159:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\amatch.c:161:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\amatch.c:162:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\amatch.c:163:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\amatch.c:164:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\amatch.c:165:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\anycollseq.c:26:9: style: Parameter 'NotUsed' can be declared as pointer to const. However it seems that 'anyCollFunc' is a callback function, if 'NotUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void *NotUsed,
        ^
ext\misc\anycollseq.c:43:56: note: You might need to cast the function pointer here
  sqlite3_create_collation(db, zCollName, eTextRep, 0, anyCollFunc);
                                                       ^
ext\misc\anycollseq.c:26:9: note: Parameter 'NotUsed' can be declared as pointer to const
  void *NotUsed,
        ^
ext\misc\appendvfs.c:49:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\appendvfs.c:51:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\appendvfs.c:52:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm_varint.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\appendvfs.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\base64.c:54:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\base64.c:56:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\amatch.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_win32.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_storage.c:368:11: style: The scope of the variable 'nDefn' can be reduced. [variableScope]
      int nDefn = 32 + pConfig->nCol*10;
          ^
ext\fts5\fts5_storage.c:515:7: style: The scope of the variable 'rc2' can be reduced. [variableScope]
  int rc2;                        /* sqlite3_reset() return code */
      ^
ext\fts5\fts5_storage.c:732:15: style: Variable 'pConfig' can be declared as pointer to const [constVariablePointer]
  Fts5Config *pConfig = p->pConfig;
              ^
ext\misc\appendvfs.c:467:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
ext\misc\appendvfs.c:468:8: style: The scope of the variable 'zHdr' can be reduced. [variableScope]
  char zHdr[16];
       ^
ext\misc\appendvfs.c:241:13: style: Variable 'paf' can be declared as pointer to const [constVariablePointer]
  ApndFile *paf = (ApndFile *)pFile;
            ^
ext\misc\appendvfs.c:320:13: style: Variable 'paf' can be declared as pointer to const [constVariablePointer]
  ApndFile *paf = (ApndFile *)pFile;
            ^
ext\misc\appendvfs.c:417:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  ApndFile *p = (ApndFile *)pFile;
            ^
ext\misc\appendvfs.c:427:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  ApndFile *p = (ApndFile *)pFile;
            ^
ext\lsm1\lsm_ckpt.c:566:9: style: The scope of the variable 'iRight' can be reduced. [variableScope]
    int iRight;
        ^
ext\lsm1\lsm_ckpt.c:974:9: style: The scope of the variable 'nFree' can be reduced. [variableScope]
    int nFree;
        ^
ext\lsm1\lsm_ckpt.c:224:31: style: Parameter 'aCkpt' can be declared as pointer to const [constParameterPointer]
static void ckptChecksum(u32 *aCkpt, u32 nCkpt, u32 *piCksum1, u32 *piCksum2){
                              ^
ext\lsm1\lsm_ckpt.c:292:28: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
static i64 ckptRead64(u32 *a){
                           ^
ext\lsm1\lsm_ckpt.c:308:12: style: Parameter 'pSeg' can be declared as pointer to const [constParameterPointer]
  Segment *pSeg,
           ^
ext\lsm1\lsm_ckpt.c:326:10: style: Variable 'pMerge' can be declared as pointer to const [constVariablePointer]
  Merge *pMerge;
         ^
ext\lsm1\lsm_ckpt.c:392:12: style: Variable 'aiAppend' can be declared as pointer to const [constVariablePointer]
  LsmPgno *aiAppend = db->pWorker->aiAppend;
           ^
ext\lsm1\lsm_ckpt.c:451:22: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
      FreelistEntry *p = &pSnap->freelist.aEntry[i];
                     ^
ext\misc\base85.c:78:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\lsm1\lsm_ckpt.c:613:48: style: Parameter 'pVal' can be declared as pointer to const [constParameterPointer]
int lsmCheckpointLoadLevels(lsm_db *pDb, void *pVal, int nVal){
                                               ^
ext\lsm1\lsm_ckpt.c:1170:30: style: Parameter 'aCkpt' can be declared as pointer to const [constParameterPointer]
u32 lsmCheckpointNBlock(u32 *aCkpt){
                             ^
ext\lsm1\lsm_ckpt.c:1182:33: style: Parameter 'aCkpt' can be declared as pointer to const [constParameterPointer]
i64 lsmCheckpointLogOffset(u32 *aCkpt){
                                ^
ext\misc\base85.c:79:0: information: Include file: <memory.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <memory.h>
^
ext\lsm1\lsm_ckpt.c:1186:28: style: Parameter 'aCkpt' can be declared as pointer to const [constParameterPointer]
int lsmCheckpointPgsz(u32 *aCkpt){ return (int)aCkpt[CKPT_HDR_PGSZ]; }
                           ^
ext\misc\base85.c:80:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm_ckpt.c:1188:29: style: Parameter 'aCkpt' can be declared as pointer to const [constParameterPointer]
int lsmCheckpointBlksz(u32 *aCkpt){ return (int)aCkpt[CKPT_HDR_BLKSZ]; }
                            ^
ext\misc\base85.c:81:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\base85.c:83:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <ctype.h>
^
ext\misc\base85.c:88:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
# include "sqlite3ext.h"
^
ext\misc\base64.c:161:24: style: Variable 'nboi' can be declared as const array [constVariable]
    static signed char nboi[] = { 0, 0, 1, 2, 3 };
                       ^
ext\misc\basexx.c:39:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
# include "sqlite3ext.h"
^
ext\lsm1\lsm_unix.c:533:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
ext\misc\base85.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_varint.c:157:24: style: Parameter 'z' can be declared as pointer to const [constParameterPointer]
int lsmVarintGet32(u8 *z, int *piVal){
                       ^
ext\misc\basexx.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\base85.c:160:36: style: Parameter 's' can be declared as pointer to const [constParameterPointer]
static char *putcs(char *pc, char *s){
                                   ^
ext\misc\base85.c:214:24: style: Variable 'nboi' can be declared as const array [constVariable]
    static signed char nboi[] = { 0, 0, 1, 2, 3, 4 };
                       ^
ext\misc\base85.c:254:29: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int allBase85( char *p, int len ){
                            ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:440:31: style: Parameter 'pCtx' can be declared as pointer to const. However it seems that 'testZipBound' is a callback function, if 'pCtx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int testZipBound(void *pCtx, int nSrc){
                              ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:474:5: note: You might need to cast the function pointer here
    testZipBound,                 /* xBound method */
    ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:440:31: note: Parameter 'pCtx' can be declared as pointer to const
static int testZipBound(void *pCtx, int nSrc){
                              ^
ext\lsm1\lsm_win32.c:640:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
ext\lsm1\lsm_win32.c:379:43: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'lsmWin32OsSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int lsmWin32OsSectorSize(lsm_file *pFile){
                                          ^
ext\lsm1\lsm_win32.c:1031:5: note: You might need to cast the function pointer here
    lsmWin32OsSectorSize,    /* xSectorSize */
    ^
ext\lsm1\lsm_win32.c:379:43: note: Parameter 'pFile' can be declared as pointer to const
static int lsmWin32OsSectorSize(lsm_file *pFile){
                                          ^
ext\lsm1\lsm_win32.c:937:15: style: Variable 'pMutex' can be declared as pointer to const [constVariablePointer]
  Win32Mutex *pMutex = (Win32Mutex *)p;
              ^
ext\lsm1\lsm_win32.c:941:15: style: Variable 'pMutex' can be declared as pointer to const [constVariablePointer]
  Win32Mutex *pMutex = (Win32Mutex *)p;
              ^
ext\lsm1\lsm_win32.c:645:16: style: int result is assigned to long long variable. If the variable is long long to avoid loss of information, then you have loss of information. [truncLongCastAssignment]
  lsm_i64 nReq = nNew * sz;
               ^
autosetup\jimsh0.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest_tdb3.c:26:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
ext\misc\blobio.c:27:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\blobio.c:29:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\blobio.c:30:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\blobio.c:55:13: style: Condition 'zTable==0' is always false [knownConditionTrueFalse]
  if( zTable==0 ){
            ^
ext\misc\blobio.c:108:13: style: Condition 'zTable==0' is always false [knownConditionTrueFalse]
  if( zTable==0 ){
            ^
ext\misc\btreeinfo.c:65:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\btreeinfo.c:68:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\btreeinfo.c:69:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\carray.c:55:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\carray.c:57:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\carray.c:58:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\carray.c:65:0: information: Include file: <sys/uio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <sys/uio.h>
^
ext\misc\btreeinfo.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\cksumvfs.c:166:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
# include "sqlite3ext.h"
^
ext\misc\cksumvfs.c:169:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\cksumvfs.c:170:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm-test\lsmtest_main.c:1331:40: style: Condition 'bLog' is always false [knownConditionTrueFalse]
    fprintf(pHook->pOut, "sync %s\n", (bLog ? "log" : "db"));
                                       ^
ext\lsm1\lsm-test\lsmtest_main.c:1327:7: note: Assuming that condition 'bLog' is not redundant
  if( bLog ) return;
      ^
ext\lsm1\lsm-test\lsmtest_main.c:1331:40: note: Condition 'bLog' is always false
    fprintf(pHook->pOut, "sync %s\n", (bLog ? "log" : "db"));
                                       ^
ext\lsm1\lsm-test\lsmtest_main.c:1434:11: style: Condition 'rc==0' is always true [knownConditionTrueFalse]
    if( rc==0 ){
          ^
ext\lsm1\lsm-test\lsmtest_main.c:1423:9: note: Assuming that condition 'rc!=0' is not redundant
  if( rc!=0 ){
        ^
ext\lsm1\lsm-test\lsmtest_main.c:1434:11: note: Condition 'rc==0' is always true
    if( rc==0 ){
          ^
ext\lsm1\lsm-test\lsmtest_main.c:395:3: error: Memory leak: p [memleak]
  return (void*)&p[8];
  ^
ext\lsm1\lsm-test\lsmtest_main.c:408:5: error: Common realloc mistake: 'p' nulled but not freed upon failure [memleakOnRealloc]
    p = (u8*)realloc(p, n+8);
    ^
ext\lsm1\lsm-test\lsmtest_main.c:393:10: warning: If memory allocation fails, then there is a possible null pointer dereference: p [nullPointerOutOfMemory]
  memset(p, 0, n+8);
         ^
ext\lsm1\lsm-test\lsmtest_main.c:392:22: note: Assuming allocation function fails
  u8 *p = (u8*)malloc(n + 8);
                     ^
ext\lsm1\lsm-test\lsmtest_main.c:392:11: note: Assignment 'p=(unsigned char*)malloc(n+8)', assigned value is 0
  u8 *p = (u8*)malloc(n + 8);
          ^
ext\lsm1\lsm-test\lsmtest_main.c:393:10: note: Null pointer dereference
  memset(p, 0, n+8);
         ^
ext\lsm1\lsm-test\lsmtest_main.c:394:4: warning: If memory allocation fails, then there is a possible null pointer dereference: (int*)p [nullPointerOutOfMemory]
  *(int*)p = n;
   ^
ext\lsm1\lsm-test\lsmtest_main.c:392:22: note: Assuming allocation function fails
  u8 *p = (u8*)malloc(n + 8);
                     ^
ext\lsm1\lsm-test\lsmtest_main.c:392:11: note: Assignment 'p=(unsigned char*)malloc(n+8)', assigned value is 0
  u8 *p = (u8*)malloc(n + 8);
          ^
ext\lsm1\lsm-test\lsmtest_main.c:394:4: note: Null pointer dereference
  *(int*)p = n;
   ^
ext\lsm1\lsm-test\lsmtest_main.c:1202:27: warning: If memory allocation fails, then there is a possible null pointer dereference: aOrder [nullPointerOutOfMemory]
  for(i=0; i<nBlock; i++) aOrder[i] = i;
                          ^
ext\lsm1\lsm-test\lsmtest_main.c:1201:25: note: Assuming allocation function fails
  aOrder = (int *)malloc(nBlock * sizeof(int));
                        ^
ext\lsm1\lsm-test\lsmtest_main.c:1201:12: note: Assignment 'aOrder=(int*)malloc(nBlock*sizeof(int))', assigned value is 0
  aOrder = (int *)malloc(nBlock * sizeof(int));
           ^
ext\lsm1\lsm-test\lsmtest_main.c:1202:27: note: Null pointer dereference
  for(i=0; i<nBlock; i++) aOrder[i] = i;
                          ^
ext\lsm1\lsm-test\lsmtest_main.c:1209:11: warning: If memory allocation fails, then there is a possible null pointer dereference: aOrder [nullPointerOutOfMemory]
    tmp = aOrder[a];
          ^
ext\lsm1\lsm-test\lsmtest_main.c:1201:25: note: Assuming allocation function fails
  aOrder = (int *)malloc(nBlock * sizeof(int));
                        ^
ext\lsm1\lsm-test\lsmtest_main.c:1201:12: note: Assignment 'aOrder=(int*)malloc(nBlock*sizeof(int))', assigned value is 0
  aOrder = (int *)malloc(nBlock * sizeof(int));
           ^
ext\lsm1\lsm-test\lsmtest_main.c:1209:11: note: Null pointer dereference
    tmp = aOrder[a];
          ^
ext\lsm1\lsm-test\lsmtest_main.c:1210:5: warning: If memory allocation fails, then there is a possible null pointer dereference: aOrder [nullPointerOutOfMemory]
    aOrder[a] = aOrder[b];
    ^
ext\lsm1\lsm-test\lsmtest_main.c:1201:25: note: Assuming allocation function fails
  aOrder = (int *)malloc(nBlock * sizeof(int));
                        ^
ext\lsm1\lsm-test\lsmtest_main.c:1201:12: note: Assignment 'aOrder=(int*)malloc(nBlock*sizeof(int))', assigned value is 0
  aOrder = (int *)malloc(nBlock * sizeof(int));
           ^
ext\lsm1\lsm-test\lsmtest_main.c:1210:5: note: Null pointer dereference
    aOrder[a] = aOrder[b];
    ^
ext\lsm1\lsm-test\lsmtest_main.c:1211:5: warning: If memory allocation fails, then there is a possible null pointer dereference: aOrder [nullPointerOutOfMemory]
    aOrder[b] = tmp;
    ^
ext\lsm1\lsm-test\lsmtest_main.c:1201:25: note: Assuming allocation function fails
  aOrder = (int *)malloc(nBlock * sizeof(int));
                        ^
ext\lsm1\lsm-test\lsmtest_main.c:1201:12: note: Assignment 'aOrder=(int*)malloc(nBlock*sizeof(int))', assigned value is 0
  aOrder = (int *)malloc(nBlock * sizeof(int));
           ^
ext\lsm1\lsm-test\lsmtest_main.c:1211:5: note: Null pointer dereference
    aOrder[b] = tmp;
    ^
ext\misc\btreeinfo.c:278:7: style: The scope of the variable 'pgsz' can be reduced. [variableScope]
  int pgsz = 0;
      ^
ext\misc\btreeinfo.c:279:7: style: The scope of the variable 'nCell' can be reduced. [variableScope]
  int nCell;
      ^
ext\misc\btreeinfo.c:164:38: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[i];
                                     ^
ext\misc\btreeinfo.c:222:16: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  BinfoCursor *pCsr = (BinfoCursor *)pCursor;
               ^
ext\misc\btreeinfo.c:262:47: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
static unsigned int get_uint16(unsigned char *a){
                                              ^
ext\misc\btreeinfo.c:265:47: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
static unsigned int get_uint32(unsigned char *a){
                                              ^
ext\misc\btreeinfo.c:278:12: style: Variable 'pgsz' is assigned a value that is never used. [unreadVariable]
  int pgsz = 0;
           ^
ext\lsm1\lsm-test\lsmtest_main.c:1407:15: style: The scope of the variable 'pData' can be reduced. [variableScope]
  Datasource *pData = 0;
              ^
ext\lsm1\lsm-test\lsmtest_main.c:19:27: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
static int lsm_memcmp(u8 *a, u8 *b, int c){
                          ^
ext\lsm1\lsm-test\lsmtest_main.c:19:34: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
static int lsm_memcmp(u8 *a, u8 *b, int c){
                                 ^
ext\lsm1\lsm-test\lsmtest_main.c:181:29: style: Parameter 'pKey1' can be declared as pointer to const [constParameterPointer]
static int keyCompare(void *pKey1, int nKey1, void *pKey2, int nKey2){
                            ^
ext\lsm1\lsm-test\lsmtest_main.c:181:53: style: Parameter 'pKey2' can be declared as pointer to const [constParameterPointer]
static int keyCompare(void *pKey1, int nKey1, void *pKey2, int nKey2){
                                                    ^
ext\lsm1\lsm-test\lsmtest_main.c:198:7: style: Variable 'aKey' can be declared as pointer to const [constVariablePointer]
  u8 *aKey = (u8 *)pKey;
      ^
ext\lsm1\lsm-test\lsmtest_main.c:199:7: style: Variable 'aVal' can be declared as pointer to const [constVariablePointer]
  u8 *aVal = (u8 *)pVal;
      ^
ext\lsm1\lsm-test\lsmtest_main.c:398:28: style: Parameter 'pCopy' can be declared as pointer to const [constParameterPointer]
void *testMallocCopy(void *pCopy, int nByte){
                           ^
ext\lsm1\lsm-test\lsmtest_main.c:624:9: style: Variable 'zSystem' can be declared as pointer to const [constVariablePointer]
  char *zSystem = "";
        ^
ext\lsm1\lsm-test\lsmtest_main.c:1135:31: style: Parameter 'z' can be declared as pointer to const [constParameterPointer]
static i64 testReadSize(char *z){
                              ^
ext\lsm1\lsm-test\lsmtest_main.c:844:23: style: struct member 'Mode::zMode' is never used. [unusedStructMember]
          const char *zMode;
                      ^
ext\misc\carray.c:140:17: style: The scope of the variable 'pNew' can be reduced. [variableScope]
  sqlite3_vtab *pNew;
                ^
ext\misc\carray.c:443:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\misc\carray.c:255:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  carray_cursor *pCur = (carray_cursor*)cur;
                 ^
ext\misc\carray.c:265:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  carray_cursor *pCur = (carray_cursor*)cur;
                 ^
ext\lsm1\lsm-test\lsmtest_main.c:1478:17: style: struct member 'TestFunc::zName' is never used. [unusedStructMember]
    const char *zName;
                ^
ext\lsm1\lsm-test\lsmtest_main.c:1407:21: style: Variable 'pData' is assigned a value that is never used. [unreadVariable]
  Datasource *pData = 0;
                    ^
ext\lsm1\lsm-test\lsmtest_main.c:358:13: error: va_list 'copy' used before va_start() was called. [va_list_usedBeforeStarted]
  __va_copy(copy, ap);
            ^
ext\lsm1\lsm-test\lsmtest_main.c:359:36: error: va_list 'copy' used before va_start() was called. [va_list_usedBeforeStarted]
  nByte = vsnprintf(0, 0, zFormat, copy);
                                   ^
ext\lsm1\lsm-test\lsmtest_main.c:360:3: error: va_list 'copy' used before va_start() was called. [va_list_usedBeforeStarted]
  va_end(copy);
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:664:10: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
  memset(pDb, 0, sizeof(SqlDb));
         ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:664:10: note: Null pointer dereference
  memset(pDb, 0, sizeof(SqlDb));
         ^
ext\lsm1\lsm-test\lsmtest_tdb.c:665:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
  pDb->base.pMethods = &SqlMethods;
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:665:3: note: Null pointer dereference
  pDb->base.pMethods = &SqlMethods;
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:668:29: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
   || 0!=(rc = sqlite3_exec(pDb->db, zCreate, 0, 0, 0))
                            ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:668:29: note: Null pointer dereference
   || 0!=(rc = sqlite3_exec(pDb->db, zCreate, 0, 0, 0))
                            ^
ext\lsm1\lsm-test\lsmtest_tdb.c:669:35: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zInsert, -1, &pDb->pInsert, 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:669:35: note: Null pointer dereference
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zInsert, -1, &pDb->pInsert, 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:670:35: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zDelete, -1, &pDb->pDelete, 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:670:35: note: Null pointer dereference
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zDelete, -1, &pDb->pDelete, 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:671:35: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zRange, -1, &pDb->pDeleteRange, 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:671:35: note: Null pointer dereference
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zRange, -1, &pDb->pDeleteRange, 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:672:35: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zFetch, -1, &pDb->pFetch, 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:672:35: note: Null pointer dereference
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zFetch, -1, &pDb->pFetch, 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:673:35: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zScan0, -1, &pDb->apScan[0], 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:673:35: note: Null pointer dereference
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zScan0, -1, &pDb->apScan[0], 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:674:35: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zScan1, -1, &pDb->apScan[1], 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:674:35: note: Null pointer dereference
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zScan1, -1, &pDb->apScan[1], 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:675:35: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zScan2, -1, &pDb->apScan[2], 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:675:35: note: Null pointer dereference
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zScan2, -1, &pDb->apScan[2], 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:676:35: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zScan3, -1, &pDb->apScan[3], 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:676:35: note: Null pointer dereference
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zScan3, -1, &pDb->apScan[3], 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:677:35: warning: If memory allocation fails, then there is a possible null pointer dereference: pDb [nullPointerOutOfMemory]
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zScan4, -1, &pDb->apScan[4], 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:24: note: Assuming allocation function fails
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
                       ^
ext\lsm1\lsm-test\lsmtest_tdb.c:663:9: note: Assignment 'pDb=(struct SqlDb*)malloc(sizeof(struct SqlDb))', assigned value is 0
  pDb = (SqlDb *)malloc(sizeof(SqlDb));
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:677:35: note: Null pointer dereference
   || 0!=(rc = sqlite3_prepare_v2(pDb->db, zScan4, -1, &pDb->apScan[4], 0))
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:496:9: style: Variable 'aVal' can be declared as pointer to const [constVariablePointer]
    u8 *aVal = (void *)sqlite3_column_blob(pDb->pFetch, 0);
        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:840:38: style: Parameter 'pDb' can be declared as pointer to const [constParameterPointer]
const char *tdb_library_name(TestDb *pDb){
                                     ^
ext\misc\cksumvfs.c:315:9: style: Condition '1==*(unsigned char*)&x' is always true [knownConditionTrueFalse]
  if( 1 == *(u8*)&x ){
        ^
ext\misc\cksumvfs.c:309:11: note: Assignment 'x=1', assigned value is 1
  u32 x = 1;
          ^
ext\misc\cksumvfs.c:315:9: note: Condition '1==*(unsigned char*)&x' is always true
  if( 1 == *(u8*)&x ){
        ^
ext\misc\cksumvfs.c:308:8: style: Variable 'aEnd' can be declared as pointer to const [constVariablePointer]
  u32 *aEnd = (u32*)&a[nByte];
       ^
ext\misc\cksumvfs.c:439:11: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
      u8 *d = (u8*)zBuf;
          ^
ext\misc\cksumvfs.c:480:9: style: Variable 'd' can be declared as pointer to const [constVariablePointer]
    u8 *d = (u8*)zBuf;
        ^
ext\misc\cksumvfs.c:655:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  CksmFile *p = (CksmFile *)pFile;
            ^
ext\misc\cksumvfs.c:164:0: information: Include file: "sqlite3.h" not found. [missingInclude]
# include "sqlite3.h"
^
ext\misc\closure.c:143:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\closure.c:145:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\closure.c:146:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\closure.c:147:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\closure.c:148:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\closure.c:149:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\base85.c:392:10: style: The scope of the variable 'nio' can be reduced. [variableScope]
  size_t nio;
         ^
ext\misc\base85.c:387:24: style: Parameter 'av' can be declared as const array [constParameter]
int main(int na, char *av[]){
                       ^
ext\misc\base85.c:388:7: style: Unused variable: cin [unusedVariable]
  int cin;
      ^
ext\lsm1\lsm_win32.c:1006:14: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  NoopMutex *p = (NoopMutex *)pMutex;
             ^
ext\misc\base85.c:95:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <io.h>
^
ext\misc\base85.c:96:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <fcntl.h>
^
ext\misc\closure.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_vtab.c:603:6: style: The scope of the variable 'eType' can be reduced. [variableScope]
  u8 eType;
     ^
ext\lsm1\lsm_vtab.c:769:10: style: The scope of the variable 'aKey' can be reduced. [variableScope]
      u8 aKey[12];
         ^
ext\lsm1\lsm_vtab.c:402:16: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  lsm1_cursor *pCur = (lsm1_cursor*)cur;
               ^
ext\lsm1\lsm_vtab.c:600:14: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  lsm1_vtab *pTab = (lsm1_vtab*)(pCur->base.pVtab);
             ^
ext\lsm1\lsm_vtab.c:640:14: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  lsm1_vtab *pTab = (lsm1_vtab*)(cur->pVtab);
             ^
ext\lsm1\lsm_vtab.c:746:14: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  lsm1_vtab *pTab = (lsm1_vtab*)(pCur->base.pVtab);
             ^
ext\lsm1\lsm_vtab.c:1019:35: style: Parameter 'pVtab' can be declared as pointer to const. However it seems that 'lsm1Sync' is a callback function, if 'pVtab' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int lsm1Sync(sqlite3_vtab *pVtab){
                                  ^
ext\lsm1\lsm_vtab.c:1059:3: note: You might need to cast the function pointer here
  lsm1Sync,                /* xSync */
  ^
ext\lsm1\lsm_vtab.c:1019:35: note: Parameter 'pVtab' can be declared as pointer to const
static int lsm1Sync(sqlite3_vtab *pVtab){
                                  ^
ext\misc\cksumvfs.c:315:9: style: Condition '1==*(u8*)&x' is always true [knownConditionTrueFalse]
  if( 1 == *(u8*)&x ){
        ^
ext\misc\cksumvfs.c:309:11: note: Assignment 'x=1', assigned value is 1
  u32 x = 1;
          ^
ext\misc\cksumvfs.c:315:9: note: Condition '1==*(u8*)&x' is always true
  if( 1 == *(u8*)&x ){
        ^
ext\misc\completion.c:36:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\completion.c:38:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\completion.c:39:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\completion.c:40:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\completion.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\completion.c:338:22: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  completion_cursor *pCur = (completion_cursor*)cur;
                     ^
ext\misc\completion.c:348:22: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  completion_cursor *pCur = (completion_cursor*)cur;
                     ^
ext\misc\closure.c:248:17: style: The scope of the variable 'pp' can be reduced. [variableScope]
  closure_avl **pp;
                ^
ext\misc\closure.c:288:16: style: Variable 'pPrev' can be declared as pointer to const [constVariablePointer]
  closure_avl *pPrev = 0;
               ^
ext\misc\closure.c:798:19: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  closure_cursor *pCur = (closure_cursor*)cur;
                  ^
ext\fts5\fts5_config.c:867:15: style: The scope of the variable 'pRank' can be reduced. [variableScope]
  const char *pRank;
              ^
ext\misc\compress.c:16:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\compress.c:18:0: information: Include file: <zlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <zlib.h>
^
ext\misc\csv.c:42:0: information: Include file: <sqlite3ext.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sqlite3ext.h>
^
ext\misc\csv.c:44:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\csv.c:45:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\csv.c:46:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\csv.c:47:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\misc\csv.c:48:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\csv.c:49:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\csv.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\dbdump.c:47:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\misc\dbdump.c:48:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\misc\dbdump.c:49:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\dbdump.c:50:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\amatch.c:706:17: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
      for(i=0; a[i] && i<sizeof(a)/sizeof(a[0])-1; i++){
                ^
ext\misc\dbdump.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\amatch.c:898:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLITE_ERROR;
       ^
ext\misc\amatch.c:895:6: note: rc is assigned
  rc = SQLITE_OK;
     ^
ext\misc\amatch.c:898:8: note: rc is overwritten
    rc = SQLITE_ERROR;
       ^
ext\misc\amatch.c:265:16: style: The scope of the variable 'pp' can be reduced. [variableScope]
  amatch_avl **pp;
               ^
ext\misc\amatch.c:357:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
ext\misc\amatch.c:1317:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  amatch_cursor *pCur = (amatch_cursor*)cur;
                 ^
ext\misc\amatch.c:1326:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  amatch_cursor *pCur = (amatch_cursor*)cur;
                 ^
ext\misc\eval.c:16:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\eval.c:18:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\decimal.c:17:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\decimal.c:19:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\decimal.c:20:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\decimal.c:21:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\decimal.c:22:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\fts5\fts5_main.c:862:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
ext\fts5\fts5_main.c:863:9: style: The scope of the variable 'iOff' can be reduced. [variableScope]
    int iOff = 0;
        ^
ext\fts5\fts5_main.c:2340:7: style: The scope of the variable 'nCol' can be reduced. [variableScope]
  int nCol = ((Fts5Table*)pCsr->base.pVtab)->pConfig->nCol;
      ^
ext\misc\amatch.c:1272:8: style: Variable 'idx' is assigned a value that is never used. [unreadVariable]
    idx++;
       ^
ext\misc\decimal.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_main.c:503:51: style: Parameter 'pIdxInfo' can be declared as pointer to const [constParameterPointer]
static void fts5SetUniqueFlag(sqlite3_index_info *pIdxInfo){
                                                  ^
ext\fts5\fts5_main.c:515:15: style: Parameter 'pConfig' can be declared as pointer to const [constParameterPointer]
  Fts5Config *pConfig,
              ^
ext\fts5\fts5_main.c:516:36: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
  struct sqlite3_index_constraint *p
                                   ^
ext\fts5\fts5_main.c:674:40: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
      struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];
                                       ^
ext\fts5\fts5_main.c:745:15: style: Variable 'pConfig' can be declared as pointer to const [constVariablePointer]
  Fts5Config *pConfig = pTab->p.pConfig;
              ^
ext\fts5\fts5_main.c:836:20: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
    Fts5FullTable *pTab = (Fts5FullTable*)(pCursor->pVtab);
                   ^
ext\fts5\fts5_main.c:1145:56: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
static Fts5Auxiliary *fts5FindAuxiliary(Fts5FullTable *pTab, const char *zName){
                                                       ^
ext\fts5\fts5_main.c:1293:42: style: Parameter 'pConfig' can be declared as pointer to const [constParameterPointer]
int sqlite3Fts5IsLocaleValue(Fts5Config *pConfig, sqlite3_value *pVal){
                                         ^
ext\fts5\fts5_main.c:1612:15: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;
              ^
ext\fts5\fts5_main.c:1727:15: style: Variable 'pConfig' can be declared as pointer to const [constVariablePointer]
  Fts5Config *pConfig = pTab->p.pConfig;
              ^
ext\fts5\fts5_main.c:2625:15: style: Variable 'pConfig' can be declared as pointer to const [constVariablePointer]
  Fts5Config *pConfig = ((Fts5Table*)(pCsr->base.pVtab))->pConfig;
              ^
ext\fts5\fts5_main.c:2657:15: style: Variable 'pConfig' can be declared as pointer to const [constVariablePointer]
  Fts5Config *pConfig = ((Fts5Table*)(pCsr->base.pVtab))->pConfig;
              ^
ext\fts5\fts5_main.c:3350:22: style: Parameter 'pTokenizer' can be declared as pointer to const. However it seems that 'fts5CreateTokenizer_v2' is a callback function, if 'pTokenizer' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  fts5_tokenizer_v2 *pTokenizer,  /* Tokenizer implementation */
                     ^
ext\fts5\fts5_main.c:3755:40: note: You might need to cast the function pointer here
    pGlobal->api.xCreateTokenizer_v2 = fts5CreateTokenizer_v2;
                                       ^
ext\fts5\fts5_main.c:3350:22: note: Parameter 'pTokenizer' can be declared as pointer to const
  fts5_tokenizer_v2 *pTokenizer,  /* Tokenizer implementation */
                     ^
ext\fts5\fts5_main.c:3380:19: style: Parameter 'pTokenizer' can be declared as pointer to const. However it seems that 'fts5CreateTokenizer' is a callback function, if 'pTokenizer' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  fts5_tokenizer *pTokenizer,     /* Tokenizer implementation */
                  ^
ext\fts5\fts5_main.c:3753:37: note: You might need to cast the function pointer here
    pGlobal->api.xCreateTokenizer = fts5CreateTokenizer;
                                    ^
ext\fts5\fts5_main.c:3380:19: note: Parameter 'pTokenizer' can be declared as pointer to const
  fts5_tokenizer *pTokenizer,     /* Tokenizer implementation */
                  ^
ext\fts5\fts5_main.c:3620:17: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    Fts5Global *p = (Fts5Global*)sqlite3_user_data(pCtx);
                ^
ext\lsm1\lsm_log.c:1134:9: style: The if condition is the same as the previous if condition [duplicateCondition]
  if( rc==LSM_OK ){
        ^
ext\lsm1\lsm_log.c:1128:9: note: First condition
  if( rc==LSM_OK ){
        ^
ext\lsm1\lsm_log.c:1134:9: note: Second condition
  if( rc==LSM_OK ){
        ^
ext\misc\explain.c:27:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\explain.c:30:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\explain.c:31:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\fileio.c:81:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\fileio.c:83:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\fileio.c:84:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\fileio.c:85:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\fileio.c:87:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
ext\misc\fileio.c:88:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
ext\misc\fileio.c:89:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
ext\misc\fileio.c:91:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <unistd.h>
^
ext\misc\fileio.c:92:0: information: Include file: <dirent.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <dirent.h>
^
ext\misc\fileio.c:93:0: information: Include file: <utime.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <utime.h>
^
ext\misc\fileio.c:94:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <sys/time.h>
^
ext\misc\fileio.c:110:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
ext\misc\fileio.c:111:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
ext\misc\explain.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_log.c:641:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = lsmStringExtend(&pLog->buf, 9);
     ^
ext\lsm1\lsm_log.c:608:6: note: rc is assigned
  rc = jumpIfRequired(pDb, pLog, nReq, 0);
     ^
ext\lsm1\lsm_log.c:641:6: note: rc is overwritten
  rc = lsmStringExtend(&pLog->buf, 9);
     ^
ext\lsm1\lsm_log.c:925:9: style: The scope of the variable 'cksum0' can be reduced. [variableScope]
    u32 cksum0, cksum1;
        ^
ext\lsm1\lsm_log.c:925:17: style: The scope of the variable 'cksum1' can be reduced. [variableScope]
    u32 cksum0, cksum1;
                ^
ext\lsm1\lsm_log.c:980:7: style: The scope of the variable 'iPass' can be reduced. [variableScope]
  int iPass;
      ^
ext\lsm1\lsm_log.c:981:7: style: The scope of the variable 'nJump' can be reduced. [variableScope]
  int nJump = 0;                  /* Number of LSM_LOG_JUMP records in pass 0 */
      ^
ext\misc\explain.c:180:19: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  explain_cursor *pCur = (explain_cursor*)cur;
                  ^
ext\misc\explain.c:245:38: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[i];
                                     ^
ext\lsm1\lsm_log.c:238:25: style: Parameter 'aIn' can be declared as pointer to const [constParameterPointer]
static u32 getU32le(u8 *aIn){
                        ^
ext\lsm1\lsm_log.c:298:41: style: Parameter 'pLog' can be declared as pointer to const [constParameterPointer]
static i64 firstByteOnSector(LogWriter *pLog, i64 iOff){
                                        ^
ext\lsm1\lsm_log.c:488:14: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  LogWriter *p;
             ^
ext\lsm1\lsm_log.c:662:9: style: Parameter 'pKey' can be declared as pointer to const [constParameterPointer]
  void *pKey, int nKey,           /* Database key to write to log */
        ^
ext\lsm1\lsm_log.c:663:9: style: Parameter 'pVal' can be declared as pointer to const [constParameterPointer]
  void *pVal, int nVal            /* Database value (or nVal<0) to write */
        ^
ext\lsm1\lsm_log.c:766:12: style: Parameter 'pMark' can be declared as pointer to const [constParameterPointer]
  LogMark *pMark                  /* Object containing log offset to seek to */
           ^
ext\lsm1\lsm_log.c:967:39: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int logRequireCksum(LogReader *p, int nByte){
                                      ^
ext\misc\fileio.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_main.c:70:7: style: struct member 'Fts5TransactionState::iSavepoint' is never used. [unusedStructMember]
  int iSavepoint;                 /* Number of open savepoints (0 -> none) */
      ^
ext\fts5\fts5_main.c:155:15: style: struct member 'Fts5MatchPhrase::pPoslist' is never used. [unusedStructMember]
  Fts5Buffer *pPoslist;           /* Pointer to current poslist */
              ^
ext\fts5\fts5_main.c:156:7: style: struct member 'Fts5MatchPhrase::nTerm' is never used. [unusedStructMember]
  int nTerm;                      /* Size of phrase in terms */
      ^
ext\fts5\fts5_tokenize.c:126:7: style: The scope of the variable 'ie' can be reduced. [variableScope]
  int ie;
      ^
ext\fts5\fts5_tokenize.c:273:13: style: The scope of the variable 'bToken' can be reduced. [variableScope]
        int bToken;
            ^
ext\fts5\fts5_tokenize.c:363:23: style: The scope of the variable 'p' can be reduced. [variableScope]
  Unicode61Tokenizer *p = 0;      /* New tokenizer object */
                      ^
ext\fts5\fts5_tokenize.c:1299:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
ext\fts5\fts5_tokenize.c:132:18: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  unsigned char *a = p->aTokenChar;
                 ^
ext\fts5\fts5_tokenize.c:307:10: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
    int *a = p->aiException;
         ^
ext\fts5\fts5_tokenize.c:451:18: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  unsigned char *a = p->aTokenChar;
                 ^
ext\fts5\fts5_tokenize.c:453:18: style: Variable 'zTerm' can be declared as pointer to const [constVariablePointer]
  unsigned char *zTerm = (unsigned char*)&pText[nText];
                 ^
ext\fts5\fts5_tokenize.c:454:18: style: Variable 'zCsr' can be declared as pointer to const [constVariablePointer]
  unsigned char *zCsr = (unsigned char *)pText;
                 ^
ext\fts5\fts5_tokenize.c:663:37: style: Parameter 'zStem' can be declared as pointer to const [constParameterPointer]
static int fts5PorterGobbleVC(char *zStem, int nStem, int bPrevCons){
                                    ^
ext\fts5\fts5_tokenize.c:705:35: style: Parameter 'zStem' can be declared as pointer to const [constParameterPointer]
static int fts5Porter_Ostar(char *zStem, int nStem){
                                  ^
ext\fts5\fts5_tokenize.c:729:35: style: Parameter 'zStem' can be declared as pointer to const [constParameterPointer]
static int fts5Porter_Vowel(char *zStem, int nStem){
                                  ^
ext\fts5\fts5_tokenize.c:1163:36: style: Parameter 'aBuf' can be declared as pointer to const [constParameterPointer]
static void fts5PorterStep1A(char *aBuf, int *pnBuf){
                                   ^
ext\fts5\fts5_tokenize.c:1350:21: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  TrigramTokenizer *p = (TrigramTokenizer*)pTok;
                    ^
ext\misc\fossildelta.c:33:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\fossildelta.c:34:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\fossildelta.c:35:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\fossildelta.c:36:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\dbdump.c:382:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
ext\misc\dbdump.c:555:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
ext\misc\dbdump.c:510:30: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
              unsigned char *a = (unsigned char*)sqlite3_column_blob(pStmt,i);
                             ^
ext\fts5\fts5_tokenize.c:624:15: style: struct member 'PorterRule::zSuffix' is never used. [unusedStructMember]
  const char *zSuffix;
              ^
ext\fts5\fts5_tokenize.c:625:7: style: struct member 'PorterRule::nSuffix' is never used. [unusedStructMember]
  int nSuffix;
      ^
ext\misc\dbdump.c:690:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts5\fts5_tokenize.c:626:9: style: struct member 'PorterRule::xCond' is never used. [unusedStructMember]
  int (*xCond)(char *zStem, int nStem);
        ^
ext\fts5\fts5_tokenize.c:627:15: style: struct member 'PorterRule::zOutput' is never used. [unusedStructMember]
  const char *zOutput;
              ^
ext\fts5\fts5_tokenize.c:628:7: style: struct member 'PorterRule::nOutput' is never used. [unusedStructMember]
  int nOutput;
      ^
ext\fts5\fts5_tokenize.c:363:25: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
  Unicode61Tokenizer *p = 0;      /* New tokenizer object */
                        ^
ext\misc\fossildelta.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\fuzzer.c:144:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\fuzzer.c:152:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\fuzzer.c:153:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\fuzzer.c:154:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\fuzzer.c:155:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\csv.c:669:13: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  CsvTable *pTab = (CsvTable*)pCur->base.pVtab;
            ^
ext\misc\csv.c:733:9: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
  char *z;
        ^
ext\misc\csv.c:778:13: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  CsvTable *pTab = (CsvTable*)cur->pVtab;
            ^
ext\misc\csv.c:789:14: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  CsvCursor *pCur = (CsvCursor*)cur;
             ^
ext\misc\csv.c:799:14: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  CsvCursor *pCur = (CsvCursor*)cur;
             ^
ext\misc\csv.c:813:13: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  CsvTable *pTab = (CsvTable*)pVtabCursor->pVtab;
            ^
ext\misc\csv.c:957:12: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
  sqlite3 *db,
           ^
ext\misc\fuzzer.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1329:9: style: The comparison 'rc == 0' is always true. [knownConditionTrueFalse]
  if( rc==0 ) rc = lsm_new(&pDb->env, &p->pWorker);
        ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1315:12: note: 'rc' is assigned value '0' here.
  int rc = 0;                     /* Return code */
           ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1329:9: note: The comparison 'rc == 0' is always true.
  if( rc==0 ) rc = lsm_new(&pDb->env, &p->pWorker);
        ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:771:24: style: Parameter 'pCtx' can be declared as pointer to const. However it seems that 'xLog' is a callback function, if 'pCtx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void xLog(void *pCtx, int rc, const char *z){
                       ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1334:30: note: You might need to cast the function pointer here
  lsm_config_log(p->pWorker, xLog, (void *)"worker");
                             ^
ext\lsm1\lsm-test\lsmtest_tdb3.c:771:24: note: Parameter 'pCtx' can be declared as pointer to const
static void xLog(void *pCtx, int rc, const char *z){
                       ^
ext\misc\fileio.c:347:18: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
      for(; zCopy[i]!='/' && i<nCopy; i++);
                 ^
ext\fts5\fts5_expr.c:763:5: style: Variable '*pRc' is assigned an expression that holds the same value. [redundantAssignment]
    *pRc = rc;
    ^
ext\fts5\fts5_expr.c:749:10: note: rc is assigned '*pRc' here.
  int rc = *pRc;
         ^
ext\fts5\fts5_expr.c:763:5: note: Variable '*pRc' is assigned an expression that holds the same value.
    *pRc = rc;
    ^
ext\misc\fileio.c:833:17: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  fsdir_cursor *pCur = (fsdir_cursor*)cur;
                ^
ext\misc\fileio.c:843:17: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  fsdir_cursor *pCur = (fsdir_cursor*)cur;
                ^
ext\fts5\fts5_expr.c:2008:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
ext\fts5\fts5_expr.c:2107:7: style: The scope of the variable 'iCol' can be reduced. [variableScope]
  int iCol;
      ^
ext\fts5\fts5_expr.c:2305:7: style: The scope of the variable 'ii' can be reduced. [variableScope]
  int ii;
      ^
ext\fts5\fts5_expr.c:2457:17: style: The scope of the variable 'pPrev' can be reduced. [variableScope]
  Fts5ExprNode *pPrev;
                ^
ext\lsm1\lsm_win32.c:122:7: error: syntax error [syntaxError]
  if( win32IoerrCanRetry1(lastErrno) ){
      ^
ext\fts5\fts5_expr.c:537:20: style: Variable 'pIter' can be declared as pointer to const [constVariablePointer]
    Fts5IndexIter *pIter = p->pIter;
                   ^
ext\fts5\fts5_expr.c:900:13: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
  Fts5Expr *pExpr,                /* Expression that pNear is a part of */
            ^
ext\fts5\fts5_expr.c:911:22: style: Variable 'pIter' can be declared as pointer to const [constVariablePointer]
      Fts5IndexIter *pIter = pTerm->pIter;
                     ^
ext\fts5\fts5_expr.c:934:24: style: Variable 'pIter' can be declared as pointer to const [constVariablePointer]
        Fts5IndexIter *pIter = pPhrase->aTerm[0].pIter;
                       ^
ext\fts5\fts5_expr.c:1020:13: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
  Fts5Expr *pExpr,
            ^
ext\fts5\fts5_expr.c:1230:13: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
  Fts5Expr *pExpr,                /* Expression that pNear is a part of */
            ^
ext\fts5\fts5_expr.c:1507:21: style: Variable 'pChild' can be declared as pointer to const [constVariablePointer]
      Fts5ExprNode *pChild = pNode->apChild[i];
                    ^
ext\fts5\fts5_expr.c:1605:48: style: Parameter 'pToken' can be declared as pointer to const [constParameterPointer]
static int fts5ParseStringFromToken(Fts5Token *pToken, char **pz){
                                               ^
ext\fts5\fts5_expr.c:1921:17: style: Variable 'pColsetOrig' can be declared as pointer to const [constVariablePointer]
    Fts5Colset *pColsetOrig = pOrig->pNode->pNear->pColset;
                ^
ext\fts5\fts5_expr.c:2104:14: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
  Fts5Token *p
             ^
ext\fts5\fts5_expr.c:2141:58: style: Parameter 'pOrig' can be declared as pointer to const [constParameterPointer]
static Fts5Colset *fts5CloneColset(int *pRc, Fts5Colset *pOrig){
                                                         ^
ext\fts5\fts5_expr.c:2241:24: style: Variable 'pNear' can be declared as pointer to const [constVariablePointer]
      Fts5ExprNearset *pNear = pNode->pNear;
                       ^
ext\fts5\fts5_expr.c:2328:25: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
          Fts5ExprTerm *p = &pNear->apPhrase[0]->aTerm[ii];
                        ^
ext\fts5\fts5_expr.c:2409:29: style: Variable 'pPhrase' can be declared as pointer to const [constVariablePointer]
            Fts5ExprPhrase *pPhrase = pNear->apPhrase[0];
                            ^
ext\fts5\fts5_expr.c:2952:17: style: Variable 'pNode' can be declared as pointer to const [constVariablePointer]
  Fts5ExprNode *pNode = pPhrase->pNode;
                ^
ext\fts5\fts5_expr.c:2986:21: style: Variable 'pNode' can be declared as pointer to const [constVariablePointer]
      Fts5ExprNode *pNode = pExpr->apExprPhrase[i]->pNode;
                    ^
ext\fts5\fts5_expr.c:3010:43: style: Parameter 'pColset' can be declared as pointer to const [constParameterPointer]
static int fts5ExprColsetTest(Fts5Colset *pColset, int iCol){
                                          ^
ext\misc\decimal.c:447:10: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int i, rc;
         ^
ext\lsm1\lsm_win32.c:128:12: error: syntax error [syntaxError]
  else if( win32IoerrCanRetry2(lastErrno) ){
           ^
ext\misc\decimal.c:301:16: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  signed char *a;       /* Array of digits */
               ^
ext\misc\decimal.c:485:20: style: Variable 'aA' can be declared as pointer to const [constVariablePointer]
      signed char *aA, *aB;
                   ^
ext\misc\decimal.c:485:25: style: Variable 'aB' can be declared as pointer to const [constVariablePointer]
      signed char *aA, *aB;
                        ^
ext\misc\ieee754.c:88:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\ieee754.c:90:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\ieee754.c:91:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts5\fts5_expr.c:1338:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;
         ^
ext\misc\ieee754.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\memstat.c:25:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\memstat.c:28:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\memstat.c:29:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\memstat.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\memstat.c:234:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\misc\memstat.c:322:19: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  memstat_cursor *pCur = (memstat_cursor*)cur;
                  ^
ext\misc\memstat.c:332:19: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  memstat_cursor *pCur = (memstat_cursor*)cur;
                  ^
ext\misc\memtrace.c:24:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\memtrace.c:25:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\memtrace.c:26:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\memvfs.c:41:0: information: Include file: <sqlite3ext.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sqlite3ext.h>
^
ext\misc\memvfs.c:43:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\memvfs.c:44:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\memvfs.c:173:12: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  MemFile *p = (MemFile *)pFile;
           ^
ext\misc\memvfs.c:213:34: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'memSync' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int memSync(sqlite3_file *pFile, int flags){
                                 ^
ext\misc\memvfs.c:134:3: note: You might need to cast the function pointer here
  memSync,                       /* xSync */
  ^
ext\misc\memvfs.c:213:34: note: Parameter 'pFile' can be declared as pointer to const
static int memSync(sqlite3_file *pFile, int flags){
                                 ^
ext\misc\memvfs.c:221:12: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  MemFile *p = (MemFile *)pFile;
           ^
ext\misc\memvfs.c:229:34: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'memLock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int memLock(sqlite3_file *pFile, int eLock){
                                 ^
ext\misc\memvfs.c:136:3: note: You might need to cast the function pointer here
  memLock,                       /* xLock */
  ^
ext\misc\memvfs.c:229:34: note: Parameter 'pFile' can be declared as pointer to const
static int memLock(sqlite3_file *pFile, int eLock){
                                 ^
ext\misc\memvfs.c:236:36: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'memUnlock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int memUnlock(sqlite3_file *pFile, int eLock){
                                   ^
ext\misc\memvfs.c:137:3: note: You might need to cast the function pointer here
  memUnlock,                     /* xUnlock */
  ^
ext\misc\memvfs.c:236:36: note: Parameter 'pFile' can be declared as pointer to const
static int memUnlock(sqlite3_file *pFile, int eLock){
                                   ^
ext\misc\memvfs.c:264:40: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'memSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int memSectorSize(sqlite3_file *pFile){
                                       ^
ext\misc\memvfs.c:140:3: note: You might need to cast the function pointer here
  memSectorSize,                 /* xSectorSize */
  ^
ext\misc\memvfs.c:264:40: note: Parameter 'pFile' can be declared as pointer to const
static int memSectorSize(sqlite3_file *pFile){
                                       ^
ext\misc\memvfs.c:271:51: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'memDeviceCharacteristics' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int memDeviceCharacteristics(sqlite3_file *pFile){
                                                  ^
ext\misc\memvfs.c:141:3: note: You might need to cast the function pointer here
  memDeviceCharacteristics,      /* xDeviceCharacteristics */
  ^
ext\misc\memvfs.c:271:51: note: Parameter 'pFile' can be declared as pointer to const
static int memDeviceCharacteristics(sqlite3_file *pFile){
                                                  ^
ext\misc\memvfs.c:280:17: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'memShmMap' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  sqlite3_file *pFile,
                ^
ext\misc\memvfs.c:142:3: note: You might need to cast the function pointer here
  memShmMap,                     /* xShmMap */
  ^
ext\misc\memvfs.c:280:17: note: Parameter 'pFile' can be declared as pointer to const
  sqlite3_file *pFile,
                ^
ext\misc\memvfs.c:290:37: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'memShmLock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int memShmLock(sqlite3_file *pFile, int offset, int n, int flags){
                                    ^
ext\misc\memvfs.c:143:3: note: You might need to cast the function pointer here
  memShmLock,                    /* xShmLock */
  ^
ext\misc\memvfs.c:290:37: note: Parameter 'pFile' can be declared as pointer to const
static int memShmLock(sqlite3_file *pFile, int offset, int n, int flags){
                                    ^
ext\misc\memvfs.c:295:41: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'memShmBarrier' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void memShmBarrier(sqlite3_file *pFile){
                                        ^
ext\misc\memvfs.c:144:3: note: You might need to cast the function pointer here
  memShmBarrier,                 /* xShmBarrier */
  ^
ext\misc\memvfs.c:295:41: note: Parameter 'pFile' can be declared as pointer to const
static void memShmBarrier(sqlite3_file *pFile){
                                        ^
ext\misc\memvfs.c:300:38: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'memShmUnmap' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int memShmUnmap(sqlite3_file *pFile, int deleteFlag){
                                     ^
ext\misc\memvfs.c:145:3: note: You might need to cast the function pointer here
  memShmUnmap,                   /* xShmUnmap */
  ^
ext\misc\memvfs.c:300:38: note: Parameter 'pFile' can be declared as pointer to const
static int memShmUnmap(sqlite3_file *pFile, int deleteFlag){
                                     ^
ext\misc\memvfs.c:311:12: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  MemFile *p = (MemFile *)pFile;
           ^
ext\misc\memvfs.c:317:37: style: Parameter 'pFile' can be declared as pointer to const [constParameterPointer]
static int memUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){
                                    ^
ext\misc\memvfs.c:317:71: style: Parameter 'pPage' can be declared as pointer to const [constParameterPointer]
static int memUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){
                                                                      ^
ext\misc\memvfs.c:350:35: style: Parameter 'pVfs' can be declared as pointer to const. However it seems that 'memDelete' is a callback function, if 'pVfs' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int memDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){
                                  ^
ext\misc\memvfs.c:114:3: note: You might need to cast the function pointer here
  memDelete,                   /* xDelete */
  ^
ext\misc\memvfs.c:350:35: note: Parameter 'pVfs' can be declared as pointer to const
static int memDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){
                                  ^
ext\misc\memvfs.c:458:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\mmapwarm.c:15:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\misc\mmapwarm.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\memvfs.c:520:23: error: Resource leak: out [resourceLeak]
  if( rc || pVfs==0 ) return;
                      ^
ext\misc\memvfs.c:521:41: error: Resource leak: out [resourceLeak]
  if( strcmp(pVfs->zName,"memvfs")!=0 ) return;
                                        ^
ext\misc\memvfs.c:523:12: error: Resource leak: out [resourceLeak]
  if( rc ) return;
           ^
ext\misc\nextchar.c:55:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\nextchar.c:57:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\fileio.c:96:0: information: Include file: "windows.h" not found. [missingInclude]
#  include "windows.h"
^
ext\misc\fileio.c:97:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <io.h>
^
ext\misc\fileio.c:98:0: information: Include file: <direct.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <direct.h>
^
ext\misc\fileio.c:99:0: information: Include file: "test_windirent.h" not found. [missingInclude]
#  include "test_windirent.h"
^
ext\misc\fileio.c:1045:0: information: Include file: "test_windirent.c" not found. [missingInclude]
#  include "test_windirent.c"
^
ext\misc\csv.c:913:39: style: Parameter 'p' can be declared as pointer to const. However it seems that 'csvtabUpdate' is a callback function, if 'p' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int csvtabUpdate(sqlite3_vtab *p,int n,sqlite3_value**v,sqlite3_int64*x){
                                      ^
ext\misc\csv.c:930:3: note: You might need to cast the function pointer here
  csvtabUpdate,            /* xUpdate */
  ^
ext\misc\csv.c:913:39: note: Parameter 'p' can be declared as pointer to const
static int csvtabUpdate(sqlite3_vtab *p,int n,sqlite3_value**v,sqlite3_int64*x){
                                      ^
ext\misc\csv.c:913:78: style: Parameter 'x' can be declared as pointer to const. However it seems that 'csvtabUpdate' is a callback function, if 'x' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int csvtabUpdate(sqlite3_vtab *p,int n,sqlite3_value**v,sqlite3_int64*x){
                                                                             ^
ext\misc\csv.c:930:3: note: You might need to cast the function pointer here
  csvtabUpdate,            /* xUpdate */
  ^
ext\misc\csv.c:913:78: note: Parameter 'x' can be declared as pointer to const
static int csvtabUpdate(sqlite3_vtab *p,int n,sqlite3_value**v,sqlite3_int64*x){
                                                                             ^
ext\misc\noop.c:22:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\noop.c:24:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\noop.c:25:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\fts5\fts5_hash.c:538:36: style: Parameter 'pHash' can be declared as pointer to const [constParameterPointer]
static int fts5HashCount(Fts5Hash *pHash){
                                   ^
ext\misc\nextchar.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest_tdb.c:37:0: information: Include file: <leveldb/c.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <leveldb/c.h>
^
ext\misc\normalize.c:52:0: information: Include file: <sqlite3.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sqlite3.h>
^
ext\misc\normalize.c:53:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\pcachetrace.c:24:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\pcachetrace.c:25:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\pcachetrace.c:26:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\normalize.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\fossildelta.c:372:15: style: The scope of the variable 'iBlock' can be reduced. [variableScope]
    int iSrc, iBlock;
              ^
ext\misc\fossildelta.c:635:26: style: The scope of the variable 'nOut' can be reduced. [variableScope]
  char *aOut;        int nOut;   /* output delta */
                         ^
ext\misc\fossildelta.c:670:34: style: The scope of the variable 'nOut2' can be reduced. [variableScope]
  char *aOut;          int nOut, nOut2;  /* The output */
                                 ^
ext\misc\fossildelta.c:809:24: style: The scope of the variable 'pNew' can be reduced. [variableScope]
  deltaparsevtab_vtab *pNew;
                       ^
ext\misc\fuzzer.c:415:17: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
      for(i=0; a[i] && i<sizeof(a)/sizeof(a[0])-1; i++){
                ^
ext\misc\fossildelta.c:109:29: style: Parameter 'pHash' can be declared as pointer to const [constParameterPointer]
static u32 hash_32bit(hash *pHash){
                            ^
ext\misc\fossildelta.c:172:18: style: Variable 'zStart' can be declared as pointer to const [constVariablePointer]
  unsigned char *zStart = z;
                 ^
ext\misc\fossildelta.c:947:26: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;
                         ^
ext\misc\fossildelta.c:957:26: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;
                         ^
ext\misc\fossildelta.c:460:17: style: Variable 'bestCnt' is assigned a value that is never used. [unreadVariable]
        bestCnt = 0;
                ^
ext\misc\percentile.c:121:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#  include "sqlite3ext.h"
^
ext\misc\percentile.c:124:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\percentile.c:125:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\percentile.c:126:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\fuzzer.c:796:7: style: The scope of the variable 'iBest' can be reduced. [variableScope]
  int iBest;
      ^
ext\misc\fuzzer.c:797:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\misc\fuzzer.c:615:16: style: Parameter 'pStem' can be declared as pointer to const [constParameterPointer]
  fuzzer_stem *pStem,   /* The stem to be rendered */
               ^
ext\misc\fuzzer.c:719:16: style: Parameter 'pStem' can be declared as pointer to const [constParameterPointer]
  fuzzer_stem *pStem,             /* Stem rule may be applied to */
               ^
ext\misc\fuzzer.c:1042:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  fuzzer_cursor *pCur = (fuzzer_cursor*)cur;
                 ^
ext\misc\fuzzer.c:1052:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  fuzzer_cursor *pCur = (fuzzer_cursor*)cur;
                 ^
ext\misc\fuzzer.c:992:8: style: Variable 'idx' is assigned a value that is never used. [unreadVariable]
    idx++;
       ^
ext\misc\percentile.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\prefixes.c:24:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\prefixes.c:27:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\prefixes.c:28:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\prefixes.c:155:20: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  prefixes_cursor *pCur = (prefixes_cursor*)cur;
                   ^
ext\misc\prefixes.c:165:20: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  prefixes_cursor *pCur = (prefixes_cursor*)cur;
                   ^
ext\misc\nextchar.c:167:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n, rc;
      ^
ext\misc\nextchar.c:167:10: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int n, rc;
         ^
ext\misc\qpvtab.c:71:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\qpvtab.c:74:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\qpvtab.c:75:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\qpvtab.c:76:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\qpvtab.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\percentile.c:439:12: style: The scope of the variable 'i1' can be reduced. [variableScope]
  unsigned i1, i2;
           ^
ext\misc\percentile.c:439:16: style: The scope of the variable 'i2' can be reduced. [variableScope]
  unsigned i1, i2;
               ^
ext\misc\percentile.c:440:10: style: The scope of the variable 'v1' can be reduced. [variableScope]
  double v1, v2;
         ^
ext\misc\percentile.c:440:14: style: The scope of the variable 'v2' can be reduced. [variableScope]
  double v1, v2;
             ^
ext\misc\percentile.c:441:10: style: The scope of the variable 'ix' can be reduced. [variableScope]
  double ix, vx;
         ^
ext\misc\percentile.c:441:14: style: The scope of the variable 'vx' can be reduced. [variableScope]
  double ix, vx;
             ^
ext\misc\percentile.c:438:19: style: Variable 'pFunc' can be declared as pointer to const [constVariablePointer]
  PercentileFunc *pFunc = (PercentileFunc*)sqlite3_user_data(pCtx);
                  ^
ext\lsm1\lsm-test\lsmtest_main.c:1531:10: warning: If resource allocation fails, then there is a possible null pointer dereference: pReport [nullPointerOutOfResources]
  fclose(pReport);
         ^
ext\lsm1\lsm-test\lsmtest_main.c:1529:18: note: Assuming allocation function fails
  pReport = fopen("malloc.txt", "w");
                 ^
ext\lsm1\lsm-test\lsmtest_main.c:1529:18: note: Assignment 'pReport=fopen("malloc.txt","w")', assigned value is 0
  pReport = fopen("malloc.txt", "w");
                 ^
ext\lsm1\lsm-test\lsmtest_main.c:1531:10: note: Null pointer dereference
  fclose(pReport);
         ^
ext\misc\normalize.c:611:11: style: Variable 'zIn' can be declared as pointer to const [constVariablePointer]
    char *zIn = strstr(z+i, "in(");
          ^
ext\misc\normalize.c:648:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\normalize.c:649:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\randomjson.c:34:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#  include "sqlite3ext.h"
^
ext\misc\randomjson.c:37:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\randomjson.c:38:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\randomjson.c:39:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\fileio.c:231:26: style: Variable 'epochIntervals.LowPart' is assigned a value that is never used. [unreadVariable]
  epochIntervals.LowPart = epochFileTime.dwLowDateTime;
                         ^
ext\misc\fileio.c:232:27: style: Variable 'epochIntervals.HighPart' is assigned a value that is never used. [unreadVariable]
  epochIntervals.HighPart = epochFileTime.dwHighDateTime;
                          ^
ext\misc\fileio.c:234:25: style: Variable 'fileIntervals.LowPart' is assigned a value that is never used. [unreadVariable]
  fileIntervals.LowPart = pFileTime->dwLowDateTime;
                        ^
ext\misc\fileio.c:235:26: style: Variable 'fileIntervals.HighPart' is assigned a value that is never used. [unreadVariable]
  fileIntervals.HighPart = pFileTime->dwHighDateTime;
                         ^
ext\misc\qpvtab.c:254:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  qpvtab_cursor *pCur = (qpvtab_cursor*)cur;
                 ^
ext\misc\qpvtab.c:264:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  qpvtab_cursor *pCur = (qpvtab_cursor*)cur;
                 ^
ext\misc\randomjson.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\regexp.c:59:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\regexp.c:60:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\regexp.c:61:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\remember.c:35:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\remember.c:37:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm_file.c:3158:9: style: Condition 'pSeg' is always true [knownConditionTrueFalse]
    if( pSeg && pSeg->nSize>0 ){
        ^
ext\misc\rot13.c:16:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\rot13.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\rot13.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\rot13.c:88:10: style: The scope of the variable 'x' can be reduced. [variableScope]
  int i, x;
         ^
ext\misc\rot13.c:82:9: style: Parameter 'notUsed' can be declared as pointer to const. However it seems that 'rot13CollFunc' is a callback function, if 'notUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void *notUsed,
        ^
ext\misc\rot13.c:112:64: note: You might need to cast the function pointer here
    rc = sqlite3_create_collation(db, "rot13", SQLITE_UTF8, 0, rot13CollFunc);
                                                               ^
ext\misc\rot13.c:82:9: note: Parameter 'notUsed' can be declared as pointer to const
  void *notUsed,
        ^
ext\lsm1\lsm_file.c:1762:9: style: The comparison 'rc == 0' is always true. [knownConditionTrueFalse]
  if( rc==LSM_OK ){
        ^
ext\lsm1\lsm_file.c:1734:12: note: 'rc' is assigned value '0' here.
  int rc = LSM_OK;                /* Return code */
           ^
ext\lsm1\lsm_file.c:1762:9: note: The comparison 'rc == 0' is always true.
  if( rc==LSM_OK ){
        ^
ext\lsm1\lsm_file.c:1794:10: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
      rc = fsFreeBlock(pFS, pSnapshot, pDel, iBlk);
         ^
ext\lsm1\lsm_file.c:1790:12: note: rc is assigned
        rc = fsBlockNext(pFS, pDel, iBlk, &iNext);
           ^
ext\lsm1\lsm_file.c:1794:10: note: rc is overwritten
      rc = fsFreeBlock(pFS, pSnapshot, pDel, iBlk);
         ^
ext\misc\scrub.c:51:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\misc\scrub.c:52:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\scrub.c:53:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\scrub.c:54:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\scrub.c:55:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\misc\scrub.c:56:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm_file.c:2510:10: style: The scope of the variable 'aPtr' can be reduced. [variableScope]
      u8 aPtr[4];                 /* Space to serialize a u32 */
         ^
ext\lsm1\lsm_file.c:2814:8: style: The scope of the variable 'aSz' can be reduced. [variableScope]
    u8 aSz[3];
       ^
ext\misc\series.c:113:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\series.c:115:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\series.c:116:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\series.c:117:0: information: Include file: <limits.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <limits.h>
^
ext\misc\series.c:118:0: information: Include file: <math.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <math.h>
^
ext\misc\normalize.c:686:9: style: The scope of the variable 'in' can be reduced. [variableScope]
  FILE *in;
        ^
ext\lsm1\lsm_file.c:337:45: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
static void assert_lists_are_ok(FileSystem *pFS){
                                            ^
ext\lsm1\lsm_file.c:467:57: style: Parameter 'pStr' can be declared as pointer to const [constParameterPointer]
int lsmFsWriteLog(FileSystem *pFS, i64 iOff, LsmString *pStr){
                                                        ^
ext\lsm1\lsm_file.c:535:35: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
static int fsMmapPage(FileSystem *pFS, LsmPgno iReal){
                                  ^
ext\lsm1\lsm_file.c:848:31: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
int lsmFsPageSize(FileSystem *pFS){
                              ^
ext\lsm1\lsm_file.c:855:32: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
int lsmFsBlockSize(FileSystem *pFS){
                               ^
ext\lsm1\lsm_file.c:883:47: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
static LsmPgno fsFirstPageOnBlock(FileSystem *pFS, int iBlock){
                                              ^
ext\lsm1\lsm_file.c:910:46: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
static LsmPgno fsLastPageOnBlock(FileSystem *pFS, int iBlock){
                                             ^
ext\lsm1\lsm_file.c:923:38: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
static int fsPageToBlock(FileSystem *pFS, LsmPgno iPg){
                                     ^
ext\lsm1\lsm_file.c:936:33: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
static int fsIsLast(FileSystem *pFS, LsmPgno iPg){
                                ^
ext\lsm1\lsm_file.c:960:25: style: Parameter 'pPage' can be declared as pointer to const [constParameterPointer]
u8 *lsmFsPageData(Page *pPage, int *pnData){
                        ^
ext\misc\series.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_file.c:1014:46: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
static void fsPageRemoveFromHash(FileSystem *pFS, Page *pPg){
                                             ^
ext\lsm1\lsm_file.c:1061:43: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
static Page *fsPageFindInHash(FileSystem *pFS, LsmPgno iPg, int *piHash){
                                          ^
ext\misc\scrub.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_file.c:1138:9: style: Variable 'aOld' can be declared as pointer to const [constVariablePointer]
    u8 *aOld = pFS->pMap;
        ^
ext\lsm1\lsm_file.c:1354:30: style: Parameter 'aBuf' can be declared as pointer to const [constParameterPointer]
static int getRecordSize(u8 *aBuf, int *pbFree){
                             ^
ext\lsm1\lsm_file.c:1689:12: style: Parameter 'pRun' can be declared as pointer to const [constParameterPointer]
  Segment *pRun,
           ^
ext\lsm1\lsm_file.c:1690:12: style: Parameter 'pIgnore' can be declared as pointer to const [constParameterPointer]
  Segment *pIgnore,
           ^
ext\lsm1\lsm_file.c:1816:12: style: Parameter 'aPgno' can be declared as pointer to const [constParameterPointer]
  LsmPgno *aPgno,
           ^
ext\lsm1\lsm_file.c:2069:56: style: Parameter 'pLvl' can be declared as pointer to const [constParameterPointer]
static LsmPgno findAppendPoint(FileSystem *pFS, Level *pLvl){
                                                       ^
ext\lsm1\lsm_file.c:2359:29: style: Parameter 'pPg' can be declared as pointer to const [constParameterPointer]
int lsmFsPageWritable(Page *pPg){
                            ^
ext\lsm1\lsm_file.c:2766:15: style: Variable 'aData' can be declared as pointer to const [constVariablePointer]
          u8 *aData = pPg->aData - (pPg->flags & PAGE_HASPREV);
              ^
ext\lsm1\lsm_file.c:2902:28: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
int lsmFsNRead(FileSystem *pFS){ return pFS->nRead; }
                           ^
ext\lsm1\lsm_file.c:2907:29: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
int lsmFsNWrite(FileSystem *pFS){ return pFS->nWrite; }
                            ^
ext\lsm1\lsm_file.c:2912:31: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
lsm_env *lsmFsEnv(FileSystem *pFS){
                              ^
ext\lsm1\lsm_file.c:2928:29: style: Parameter 'pPg' can be declared as pointer to const [constParameterPointer]
FileSystem *lsmPageFS(Page *pPg){
                            ^
ext\lsm1\lsm_file.c:2935:33: style: Parameter 'pFS' can be declared as pointer to const [constParameterPointer]
int lsmFsSectorSize(FileSystem *pFS){
                                ^
ext\lsm1\lsm_file.c:2284:14: style: int result is assigned to long long variable. If the variable is long long to avoid loss of information, then you have loss of information. [truncLongCastAssignment]
    i64 iOff = (iPg-1) * pFS->nMetasize;
             ^
ext\misc\regexp.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_file.c:2105:16: style: Variable 'iApp' is assigned a value that is never used. [unreadVariable]
  LsmPgno iApp = 0;
               ^
ext\lsm1\lsm_file.c:2411:15: style: Variable 'aData' is assigned a value that is never used. [unreadVariable]
    u8 *aData = 0;
              ^
ext\misc\fossildelta.c:547:9: style: Variable 'zOrigOut' can be declared as pointer to const [constVariablePointer]
  char *zOrigOut = zOut;
        ^
ext\misc\scrub.c:490:7: style: The scope of the variable 'a' can be reduced. [variableScope]
  u8 *a, *pBuf;
      ^
ext\misc\scrub.c:490:7: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  u8 *a, *pBuf;
      ^
ext\misc\randomjson.c:32:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#  include "sqlite3.h"
^
ext\misc\percentile.c:119:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#  include "sqlite3.h"
^
ext\misc\sha1.c:25:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\sha1.c:27:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\sha1.c:28:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\sha1.c:29:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\misc\shathree.c:102:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\shathree.c:104:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\shathree.c:105:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\shathree.c:106:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\misc\showauth.c:20:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\showauth.c:22:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\spellfix.c:17:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\spellfix.c:27:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <string.h>
^
ext\misc\spellfix.c:28:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdio.h>
^
ext\misc\spellfix.c:29:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdlib.h>
^
ext\misc\spellfix.c:30:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <assert.h>
^
ext\misc\spellfix.c:36:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\sqlar.c:17:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\sqlar.c:19:0: information: Include file: <zlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <zlib.h>
^
ext\misc\sqlar.c:20:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\stmt.c:25:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\stmt.c:28:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\stmt.c:29:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\sqlite3_stdio.h:33:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\sqlite3_stdio.h:34:0: information: Include file: <windows.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <windows.h>
^
ext\misc\sqlite3_stdio.c:22:0: information: Include file: <windows.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <windows.h>
^
ext\misc\sqlite3_stdio.c:23:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\sqlite3_stdio.c:24:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\sqlite3_stdio.c:25:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\sqlite3_stdio.c:26:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\sqlite3_stdio.c:27:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\misc\sqlite3_stdio.c:28:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\sqlite3_stdio.c:29:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\misc\sqlite3_stdio.c:30:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <io.h>
^
ext\misc\sqlite3_stdio.c:31:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
ext\misc\stmt.c:83:14: style: The scope of the variable 'pNew' can be reduced. [variableScope]
  stmt_vtab *pNew;
             ^
ext\misc\stmt.c:178:16: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  stmt_cursor *pCur = (stmt_cursor*)cur;
               ^
ext\misc\stmt.c:203:16: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  stmt_cursor *pCur = (stmt_cursor*)cur;
               ^
ext\misc\sqlite3_stdio.c:85:33: style: Parameter 'fd' can be declared as pointer to const [constParameterPointer]
static int UseBinaryWText(FILE *fd){
                                ^
ext\misc\spellfix.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\shathree.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\series.c:210:24: style: Condition 'pss->iTerm==pss->iBase' is always true [knownConditionTrueFalse]
  }else if( pss->iTerm == pss->iBase ){
                       ^
ext\misc\series.c:195:24: note: Assuming that condition 'pss->iTerm>pss->iBase' is not redundant
  }else if( pss->iTerm > pss->iBase ){
                       ^
ext\misc\series.c:176:18: note: Assuming that condition 'pss->iTerm<pss->iBase' is not redundant
  if( pss->iTerm < pss->iBase ){
                 ^
ext\misc\series.c:210:24: note: Condition 'pss->iTerm==pss->iBase' is always true
  }else if( pss->iTerm == pss->iBase ){
                       ^
ext\misc\series.c:275:17: style: The scope of the variable 'pNew' can be reduced. [variableScope]
  sqlite3_vtab *pNew;
                ^
ext\misc\stmtrand.c:27:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\stmtrand.c:29:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\stmtrand.c:30:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\templatevtab.c:47:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\templatevtab.c:50:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\templatevtab.c:51:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm_shared.c:694:13: style: Condition 'ctx[0].pFreelist' is always true [knownConditionTrueFalse]
  if( ctx[0].pFreelist && bReverse ){
            ^
ext\lsm1\lsm_shared.c:1561:34: style: Condition 'p->iLsmId!=0' is always true [knownConditionTrueFalse]
      if( (iLsmId!=0 && p->iLsmId!=0 && iLsmId>=p->iLsmId)
                                 ^
ext\lsm1\lsm_shared.c:1600:16: style: Condition 'iThis!=0' is always true [knownConditionTrueFalse]
      if( iThis!=0 && iInUse>iThis ){
               ^
ext\lsm1\lsm_shared.c:1956:31: style: Condition 'bOne' is always false [knownConditionTrueFalse]
      printf("%s(%s on %s)", (bOne?" ":""), azLock[eHave], azName[iLock]);
                              ^
ext\lsm1\lsm_shared.c:1948:16: note: Assignment 'bOne=0', assigned value is 0
    int bOne = 0;
               ^
ext\lsm1\lsm_shared.c:1956:31: note: Condition 'bOne' is always false
      printf("%s(%s on %s)", (bOne?" ":""), azLock[eHave], azName[iLock]);
                              ^
ext\misc\templatevtab.c:161:24: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  templatevtab_cursor *pCur = (templatevtab_cursor*)cur;
                       ^
ext\misc\templatevtab.c:179:24: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  templatevtab_cursor *pCur = (templatevtab_cursor*)cur;
                       ^
ext\misc\templatevtab.c:189:24: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  templatevtab_cursor *pCur = (templatevtab_cursor*)cur;
                       ^
ext\misc\totype.c:35:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\totype.c:37:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\totype.c:38:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\lsm1\lsm_shared.c:1435:9: style: The comparison 'rc == 0' is always true. [knownConditionTrueFalse]
  if( rc==LSM_OK && bCommit && lsmTreeSize(pDb)>pDb->nTreeLimit ){
        ^
ext\lsm1\lsm_shared.c:1431:12: note: 'rc' is assigned value '0' here.
  int rc = LSM_OK;
           ^
ext\lsm1\lsm_shared.c:1435:9: note: The comparison 'rc == 0' is always true.
  if( rc==LSM_OK && bCommit && lsmTreeSize(pDb)>pDb->nTreeLimit ){
        ^
ext\lsm1\lsm_shared.c:1441:9: style: The comparison 'rc == 0' is always true. [knownConditionTrueFalse]
  if( rc==LSM_OK ){
        ^
ext\lsm1\lsm_shared.c:1431:12: note: 'rc' is assigned value '0' here.
  int rc = LSM_OK;
           ^
ext\lsm1\lsm_shared.c:1441:9: note: The comparison 'rc == 0' is always true.
  if( rc==LSM_OK ){
        ^
ext\lsm1\lsm_shared.c:246:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
ext\misc\shathree.c:718:7: style: The scope of the variable 'nCol' can be reduced. [variableScope]
  int nCol;                   /* Number of columns in the result set */
      ^
ext\misc\shathree.c:720:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
ext\misc\shathree.c:722:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
ext\lsm1\lsm_shared.c:687:7: style: The scope of the variable 'iCtx' can be reduced. [variableScope]
  int iCtx;
      ^
ext\misc\uint.c:30:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\lsm1\lsm_shared.c:936:11: style: The scope of the variable 'aData' can be reduced. [variableScope]
      u8 *aData;                  /* Meta-page data buffer */
          ^
ext\lsm1\lsm_shared.c:1948:9: style: The scope of the variable 'bOne' can be reduced. [variableScope]
    int bOne = 0;
        ^
ext\misc\uint.c:32:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm_shared.c:1950:17: style: The scope of the variable 'azName' can be reduced. [variableScope]
    const char *azName[] = {
                ^
ext\misc\uint.c:33:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\uint.c:34:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\lsm1\lsm_shared.c:1882:26: error: Shifting by a negative value is undefined behaviour [shiftNegative]
  const u64 me = ((u64)1 << (iLock-1));
                         ^
ext\misc\uint.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_shared.c:178:31: style: Parameter 'pDb' can be declared as pointer to const [constParameterPointer]
static int dbTruncate(lsm_db *pDb, i64 iInUse){
                              ^
ext\lsm1\lsm_shared.c:606:37: style: Parameter 'pSnapshot' can be declared as pointer to const [constParameterPointer]
Level *lsmDbSnapshotLevel(Snapshot *pSnapshot){
                                    ^
ext\lsm1\lsm_shared.c:875:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  Snapshot *p = pDb->pWorker;
            ^
ext\lsm1\lsm_shared.c:1023:16: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    ShmReader *p = &pShm->aReader[i];
               ^
ext\lsm1\lsm_shared.c:1467:36: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int slotIsUsable(ShmReader *p, i64 iLsm, u32 iShmMin, u32 iShmMax){
                                   ^
ext\lsm1\lsm_shared.c:1496:16: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    ShmReader *p = &pShm->aReader[i];
               ^
ext\lsm1\lsm_shared.c:1881:25: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
int shmLockType(lsm_db *db, int iLock){
                        ^
ext\lsm1\lsm_shared.c:1962:33: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
void print_all_db_locks(lsm_db *db){
                                ^
ext\lsm1\lsm-test\lsmtest_tdb.c:209:10: warning: If memory allocation fails, then there is a possible null pointer dereference: pLevelDb [nullPointerOutOfMemory]
  memset(pLevelDb, 0, sizeof(LevelDb));
         ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:31: note: Assuming allocation function fails
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
                              ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:14: note: Assignment 'pLevelDb=(struct LevelDb*)malloc(sizeof(struct LevelDb))', assigned value is 0
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
             ^
ext\lsm1\lsm-test\lsmtest_tdb.c:209:10: note: Null pointer dereference
  memset(pLevelDb, 0, sizeof(LevelDb));
         ^
ext\lsm1\lsm-test\lsmtest_tdb.c:211:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pLevelDb [nullPointerOutOfMemory]
  pLevelDb->pOpt = leveldb_options_create();
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:31: note: Assuming allocation function fails
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
                              ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:14: note: Assignment 'pLevelDb=(struct LevelDb*)malloc(sizeof(struct LevelDb))', assigned value is 0
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
             ^
ext\lsm1\lsm-test\lsmtest_tdb.c:211:3: note: Null pointer dereference
  pLevelDb->pOpt = leveldb_options_create();
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:212:41: warning: If memory allocation fails, then there is a possible null pointer dereference: pLevelDb [nullPointerOutOfMemory]
  leveldb_options_set_create_if_missing(pLevelDb->pOpt, 1);
                                        ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:31: note: Assuming allocation function fails
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
                              ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:14: note: Assignment 'pLevelDb=(struct LevelDb*)malloc(sizeof(struct LevelDb))', assigned value is 0
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
             ^
ext\lsm1\lsm-test\lsmtest_tdb.c:212:41: note: Null pointer dereference
  leveldb_options_set_create_if_missing(pLevelDb->pOpt, 1);
                                        ^
ext\misc\totype.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_shared.c:1882:35: warning: Expression 'iLock-1' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation. [signConversion]
  const u64 me = ((u64)1 << (iLock-1));
                                  ^
ext\lsm1\lsm_shared.c:1947:13: note: Assignment 'iLock=0', assigned value is 0
  for(iLock=0; iLock<16; iLock++){
            ^
ext\lsm1\lsm_shared.c:1954:33: note: Calling function 'shmLockType', 2nd argument 'iLock' value is 0
    int eHave = shmLockType(db, iLock);
                                ^
ext\lsm1\lsm_shared.c:1882:35: note: Negative value is converted to an unsigned value
  const u64 me = ((u64)1 << (iLock-1));
                                  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:213:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pLevelDb [nullPointerOutOfMemory]
  pLevelDb->pWriteOpt = leveldb_writeoptions_create();
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:31: note: Assuming allocation function fails
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
                              ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:14: note: Assignment 'pLevelDb=(struct LevelDb*)malloc(sizeof(struct LevelDb))', assigned value is 0
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
             ^
ext\lsm1\lsm-test\lsmtest_tdb.c:213:3: note: Null pointer dereference
  pLevelDb->pWriteOpt = leveldb_writeoptions_create();
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:214:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pLevelDb [nullPointerOutOfMemory]
  pLevelDb->pReadOpt = leveldb_readoptions_create();
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:31: note: Assuming allocation function fails
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
                              ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:14: note: Assignment 'pLevelDb=(struct LevelDb*)malloc(sizeof(struct LevelDb))', assigned value is 0
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
             ^
ext\lsm1\lsm-test\lsmtest_tdb.c:214:3: note: Null pointer dereference
  pLevelDb->pReadOpt = leveldb_readoptions_create();
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:216:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pLevelDb [nullPointerOutOfMemory]
  pLevelDb->db = leveldb_open(pLevelDb->pOpt, zFilename, &zErr);
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:31: note: Assuming allocation function fails
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
                              ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:14: note: Assignment 'pLevelDb=(struct LevelDb*)malloc(sizeof(struct LevelDb))', assigned value is 0
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
             ^
ext\lsm1\lsm-test\lsmtest_tdb.c:216:3: note: Null pointer dereference
  pLevelDb->db = leveldb_open(pLevelDb->pOpt, zFilename, &zErr);
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:225:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pLevelDb [nullPointerOutOfMemory]
  pLevelDb->base.pMethods = &LeveldbMethods;
  ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:31: note: Assuming allocation function fails
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
                              ^
ext\lsm1\lsm-test\lsmtest_tdb.c:208:14: note: Assignment 'pLevelDb=(struct LevelDb*)malloc(sizeof(struct LevelDb))', assigned value is 0
  pLevelDb = (LevelDb *)malloc(sizeof(LevelDb));
             ^
ext\lsm1\lsm-test\lsmtest_tdb.c:218:7: note: Assuming condition is false
  if( zErr ){
      ^
ext\lsm1\lsm-test\lsmtest_tdb.c:225:3: note: Null pointer dereference
  pLevelDb->base.pMethods = &LeveldbMethods;
  ^
ext\lsm1\lsm_shared.c:1957:12: style: Variable 'bOne' is assigned a value that is never used. [unreadVariable]
      bOne = 1;
           ^
ext\misc\sha1.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\unionvtab.c:138:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\unionvtab.c:140:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\unionvtab.c:141:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\unionvtab.c:142:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\urifuncs.c:29:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\urifuncs.c:31:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\urifuncs.c:32:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\uint.c:47:17: style: The scope of the variable 'x' can be reduced. [variableScope]
  int i=0, j=0, x;
                ^
ext\misc\unionvtab.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\uuid.c:61:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\uuid.c:63:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\uuid.c:64:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\uuid.c:65:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\uuid.c:98:17: style: The scope of the variable 'x' can be reduced. [variableScope]
  unsigned char x;
                ^
ext\misc\vfslog.c:52:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\misc\vfslog.c:53:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\vfslog.c:54:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\vfslog.c:55:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\vfsstat.c:17:0: information: Include file: <sqlite3ext.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sqlite3ext.h>
^
ext\misc\vfsstat.c:55:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\vfsstat.c:56:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\vfsstat.c:57:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\vfslog.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\vfsstat.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\vfstrace.c:130:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\vfstrace.c:131:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\vfstrace.c:132:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\misc\vfsstat.c:606:17: style: The scope of the variable 'pNew' can be reduced. [variableScope]
  sqlite3_vtab *pNew;
                ^
ext\misc\vfsstat.c:694:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  VfsStatCursor *pCur = (VfsStatCursor*)cur;
                 ^
ext\misc\vfsstat.c:704:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  VfsStatCursor *pCur = (VfsStatCursor*)cur;
                 ^
ext\misc\vfsstat.c:726:17: style: Parameter 'tab' can be declared as pointer to const. However it seems that 'vstattabBestIndex' is a callback function, if 'tab' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  sqlite3_vtab *tab,
                ^
ext\misc\vfsstat.c:761:3: note: You might need to cast the function pointer here
  vstattabBestIndex,         /* xBestIndex */
  ^
ext\misc\vfsstat.c:726:17: note: Parameter 'tab' can be declared as pointer to const
  sqlite3_vtab *tab,
                ^
ext\misc\vfsstat.c:727:23: style: Parameter 'pIdxInfo' can be declared as pointer to const. However it seems that 'vstattabBestIndex' is a callback function, if 'pIdxInfo' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  sqlite3_index_info *pIdxInfo
                      ^
ext\misc\vfsstat.c:761:3: note: You might need to cast the function pointer here
  vstattabBestIndex,         /* xBestIndex */
  ^
ext\misc\vfsstat.c:727:23: note: Parameter 'pIdxInfo' can be declared as pointer to const
  sqlite3_index_info *pIdxInfo
                      ^
ext\misc\vtablog.c:26:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\vtablog.c:28:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\vtablog.c:29:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\vtablog.c:30:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\vtablog.c:31:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\vtablog.c:32:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\vtablog.c:380:28: style: Local variable 'z' shadows outer variable [shadowVariable]
      const unsigned char *z = (const unsigned char*)sqlite3_value_blob(p);
                           ^
ext\misc\vtablog.c:362:8: note: Shadowed declaration
  char z[50];
       ^
ext\misc\vtablog.c:380:28: note: Shadow variable
      const unsigned char *z = (const unsigned char*)sqlite3_value_blob(p);
                           ^
ext\misc\vtablog.c:388:19: style: Local variable 'z' shadows outer variable [shadowVariable]
      const char *z = (const char*)sqlite3_value_text(p);
                  ^
ext\misc\vtablog.c:362:8: note: Shadowed declaration
  char z[50];
       ^
ext\misc\vtablog.c:388:19: note: Shadow variable
      const char *z = (const char*)sqlite3_value_text(p);
                  ^
ext\misc\vtablog.c:286:19: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  vtablog_cursor *pCur = (vtablog_cursor*)cur;
                  ^
ext\misc\vtablog.c:337:19: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  vtablog_cursor *pCur = (vtablog_cursor*)cur;
                  ^
ext\misc\vtablog.c:350:19: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  vtablog_cursor *pCur = (vtablog_cursor*)cur;
                  ^
ext\misc\vtshim.c:16:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\vtshim.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\vtshim.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\vfstrace.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\wholenumber.c:25:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\wholenumber.c:27:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\wholenumber.c:28:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\wholenumber.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\zipfile.c:27:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\zipfile.c:29:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\misc\zipfile.c:30:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\zipfile.c:31:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\zipfile.c:33:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <stdint.h>
^
ext\misc\zipfile.c:36:0: information: Include file: <zlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <zlib.h>
^
ext\misc\regexp.c:492:15: style: The scope of the variable 'iEnd' can be reduced. [variableScope]
  int iStart, iEnd, iGoto;
              ^
ext\misc\regexp.c:492:21: style: The scope of the variable 'iGoto' can be reduced. [variableScope]
  int iStart, iEnd, iGoto;
                    ^
ext\misc\regexp.c:514:7: style: The scope of the variable 'iStart' can be reduced. [variableScope]
  int iStart;
      ^
ext\misc\regexp.c:677:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, j;
      ^
ext\misc\regexp.c:677:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;
         ^
ext\misc\regexp.c:758:15: style: The scope of the variable 'zErr' can be reduced. [variableScope]
  const char *zErr;         /* Compile error message */
              ^
ext\misc\regexp.c:232:13: style: Variable 'cPrev' is assigned a value that is never used. [unreadVariable]
  int cPrev = 0;
            ^
ext\misc\totype.c:350:50: style: The comparison 'nonNum == 0' is always true. [knownConditionTrueFalse]
  return z>=zEnd && nDigits>0 && eValid && nonNum==0;
                                                 ^
ext\misc\totype.c:215:16: note: 'nonNum' is assigned value '0' here.
  int nonNum = 0;
               ^
ext\misc\totype.c:350:50: note: The comparison 'nonNum == 0' is always true.
  return z>=zEnd && nDigits>0 && eValid && nonNum==0;
                                                 ^
ext\misc\totype.c:404:27: warning: Uninitialized variable: zBlobRev [uninitvar]
            memcpy(&iVal, zBlobRev, sizeof(sqlite3_int64));
                          ^
ext\misc\totype.c:401:23: note: Assuming condition is false
            for(i=0; i<sizeof(sqlite3_int64); i++){
                      ^
ext\misc\totype.c:404:27: note: Uninitialized variable: zBlobRev
            memcpy(&iVal, zBlobRev, sizeof(sqlite3_int64));
                          ^
ext\misc\zorder.c:20:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\misc\zorder.c:22:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\misc\zorder.c:23:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\misc\zorder.c:39:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;
         ^
ext\rbu\sqlite3rbu.h:270:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"              /* Required for error code definitions */
^
ext\rbu\rbu.c:18:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\rbu\rbu.c:19:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\rbu\rbu.c:20:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\rbu\rbu.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\zipfile.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\vfslog.c:355:16: style: The scope of the variable 's0' can be reduced. [variableScope]
  unsigned int s0 = 0, s1 = 0;
               ^
ext\misc\vfslog.c:355:24: style: The scope of the variable 's1' can be reduced. [variableScope]
  unsigned int s0 = 0, s1 = 0;
                       ^
ext\misc\vfslog.c:356:17: style: The scope of the variable 'pI' can be reduced. [variableScope]
  unsigned int *pI;
                ^
ext\rbu\sqlite3rbu.c:83:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\rbu\sqlite3rbu.c:84:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\rbu\sqlite3rbu.c:85:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\rbu\sqlite3rbu.c:87:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\misc\vfslog.c:408:20: style: Variable 'x' can be declared as pointer to const [constVariablePointer]
    unsigned char *x = ((unsigned char*)zBuf)+(24-iOfst);
                   ^
ext\misc\vfslog.c:448:20: style: Variable 'x' can be declared as pointer to const [constVariablePointer]
    unsigned char *x = ((unsigned char*)z)+(24-iOfst);
                   ^
ext\misc\vfslog.c:268:22: style: Variable 'tNow' is assigned a value that is never used. [unreadVariable]
  sqlite3_int64 tNow = 0;
                     ^
ext\fts3\fts3_write.c:805:45: warning: Either the condition 'pTokenizer' is redundant or there is possible null pointer dereference: pTokenizer. [nullPointerRedundantCheck]
  sqlite3_tokenizer_module const *pModule = pTokenizer->pModule;
                                            ^
ext\fts3\fts3_write.c:810:11: note: Assuming that condition 'pTokenizer' is not redundant
  assert( pTokenizer && pModule );
          ^
ext\fts3\fts3_write.c:805:45: note: Null pointer dereference
  sqlite3_tokenizer_module const *pModule = pTokenizer->pModule;
                                            ^
ext\fts3\fts3_write.c:4965:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = sqlite3_reset(pFindLevel);
       ^
ext\fts3\fts3_write.c:4956:8: note: rc is assigned
    rc = fts3SqlStmt(p, SQL_FIND_MERGE_LEVEL, &pFindLevel, 0);
       ^
ext\fts3\fts3_write.c:4965:8: note: rc is overwritten
    rc = sqlite3_reset(pFindLevel);
       ^
ext\fts3\fts3_write.c:1481:8: style: The scope of the variable 'c' can be reduced. [variableScope]
  char c = 0;
       ^
ext\fts3\fts3_write.c:2986:13: style: The scope of the variable 'nByte' can be reduced. [variableScope]
        int nByte;
            ^
ext\fts3\fts3_write.c:3158:11: style: The scope of the variable 'iIdx' can be reduced. [variableScope]
      int iIdx = 0;
          ^
ext\fts3\fts3_write.c:4551:7: style: The scope of the variable 'nAlloc' can be reduced. [variableScope]
  int nAlloc = 0;                 /* Allocated size of aIdx[] */
      ^
ext\fts3\fts3_write.c:566:14: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
  Fts3Table *p,                   /* FTS3 table handle */
             ^
ext\fts3\fts3_write.c:1053:40: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){
                                       ^
ext\fts3\fts3_write.c:1282:63: style: Parameter 'pFrom' can be declared as pointer to const [constParameterPointer]
static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){
                                                              ^
ext\fts3\fts3_write.c:1336:22: style: Variable 'pList' can be declared as pointer to const [constVariablePointer]
        PendingList *pList = (PendingList *)fts3HashData(pElem);
                     ^
ext\fts3\fts3_write.c:1441:47: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){
                                              ^
ext\fts3\fts3_write.c:1474:14: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
  Fts3Table *pTab,
             ^
ext\fts3\fts3_write.c:1504:11: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
    char *pEnd = &pReader->aDoclist[pReader->nDoclist];
          ^
ext\fts3\fts3_write.c:1577:20: style: Variable 'pReader' can be declared as pointer to const [constVariablePointer]
    Fts3SegReader *pReader = pMsr->apSegment[ii];
                   ^
ext\fts3\fts3_write.c:1671:9: style: Variable 'z1' can be declared as pointer to const [constVariablePointer]
  char *z1 = fts3HashKey(*(Fts3HashElem **)lhs);
        ^
ext\fts3\fts3_write.c:1672:9: style: Variable 'z2' can be declared as pointer to const [constVariablePointer]
  char *z2 = fts3HashKey(*(Fts3HashElem **)rhs);
        ^
ext\fts3\fts3_write.c:1723:13: style: Variable 'zKey' can be declared as pointer to const [constVariablePointer]
      char *zKey = (char *)fts3HashKey(pE);
            ^
ext\fts3\fts3_write.c:1800:44: style: Parameter 'pLhs' can be declared as pointer to const. However it seems that 'fts3SegReaderCmp' is a callback function, if 'pLhs' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){
                                           ^
ext\fts3\fts3_write.c:2920:60: note: You might need to cast the function pointer here
    fts3SegReaderSort(apSegment, nSegment, pCsr->nAdvance, fts3SegReaderCmp);
                                                           ^
ext\fts3\fts3_write.c:1800:44: note: Parameter 'pLhs' can be declared as pointer to const
static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){
                                           ^
ext\fts3\fts3_write.c:1800:65: style: Parameter 'pRhs' can be declared as pointer to const. However it seems that 'fts3SegReaderCmp' is a callback function, if 'pRhs' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){
                                                                ^
ext\fts3\fts3_write.c:2920:60: note: You might need to cast the function pointer here
    fts3SegReaderSort(apSegment, nSegment, pCsr->nAdvance, fts3SegReaderCmp);
                                                           ^
ext\fts3\fts3_write.c:1800:65: note: Parameter 'pRhs' can be declared as pointer to const
static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){
                                                                ^
ext\fts3\fts3_write.c:1867:18: style: Parameter 'pSeg' can be declared as pointer to const [constParameterPointer]
  Fts3SegReader *pSeg,            /* Segment reader object */
                 ^
ext\fts3\fts3_write.c:2628:9: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
  char *pEnd = &pList[nList];
        ^
ext\fts3\fts3_write.c:2667:9: style: Parameter 'pList' can be declared as pointer to const [constParameterPointer]
  char *pList,
        ^
ext\fts3\fts3_write.c:2704:20: style: Variable 'pSeg' can be declared as pointer to const [constVariablePointer]
    Fts3SegReader *pSeg;
                   ^
ext\fts3\fts3_write.c:2897:18: style: Variable 'pFilter' can be declared as pointer to const [constVariablePointer]
  Fts3SegFilter *pFilter = pCsr->pFilter;
                 ^
ext\fts3\fts3_write.c:3445:8: style: Parameter 'aSzIns' can be declared as pointer to const [constParameterPointer]
  u32 *aSzIns,                    /* Size increases */
       ^
ext\fts3\fts3_write.c:3446:8: style: Parameter 'aSzDel' can be declared as pointer to const [constParameterPointer]
  u32 *aSzDel,                    /* Size decreases */
       ^
ext\fts3\fts3_write.c:4020:23: style: Parameter 'pCsr' can be declared as pointer to const [constParameterPointer]
  Fts3MultiSegReader *pCsr        /* Cursor containing term and doclist */
                      ^
ext\fts3\fts3_write.c:5247:13: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
      char *pEnd = &pCsr[csr.nDoclist];
            ^
ext\fts3\fts3_write.c:5541:30: style: Variable 'pPT' can be declared as pointer to const [constVariablePointer]
            Fts3PhraseToken *pPT = pDef->pToken;
                             ^
ext\rbu\sqlite3rbu.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3_write.c:4931:12: style: Variable 'nSeg' is assigned a value that is never used. [unreadVariable]
  int nSeg = 0;                   /* Number of input segments */
           ^
ext\misc\sha1.c:288:7: style: The scope of the variable 'nCol' can be reduced. [variableScope]
  int nCol;                   /* Number of columns in the result set */
      ^
ext\misc\sha1.c:290:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
ext\misc\sha1.c:291:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
ext\misc\sha1.c:292:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
ext\misc\vfslog.c:57:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
ext\misc\vfslog.c:174:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/time.h>
^
ext\rbu\test_rbu.c:14:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\rbu\test_rbu.c:20:0: information: Include file: "tclsqlite.h" not found. [missingInclude]
#include "tclsqlite.h"
^
ext\rbu\test_rbu.c:21:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\rbu\test_rbu.c:22:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\rbu\test_rbu.c:393:12: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
  sqlite3 *db;
           ^
ext\rbu\rbu.c:58:16: style: Variable 'pVfs' can be declared as pointer to const [constVariablePointer]
  sqlite3_vfs *pVfs = sqlite3_vfs_find(0);
               ^
ext\recover\dbdata.c:76:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\recover\dbdata.c:82:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\recover\dbdata.c:83:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\recover\sqlite3recover.h:53:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\recover\sqlite3recover.c:17:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\recover\sqlite3recover.c:18:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\recover\test_recover.c:16:0: information: Include file: "sqliteInt.h" not found. [missingInclude]
#include "sqliteInt.h"
^
ext\recover\test_recover.c:17:0: information: Include file: "tclsqlite.h" not found. [missingInclude]
#include "tclsqlite.h"
^
ext\recover\test_recover.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\recover\dbdata.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\recover\test_recover.c:215:9: style: Parameter 'clientData' can be declared as pointer to const. However it seems that 'test_sqlite3_recover_init' is a callback function, if 'clientData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void *clientData,
        ^
ext\recover\test_recover.c:298:35: note: You might need to cast the function pointer here
    { "sqlite3_recover_init_sql", test_sqlite3_recover_init, (void*)1 },
                                  ^
ext\recover\test_recover.c:215:9: note: Parameter 'clientData' can be declared as pointer to const
  void *clientData,
        ^
ext\recover\test_recover.c:225:20: style: Variable 'zUri' is assigned a value that is never used. [unreadVariable]
  const char *zUri = 0;
                   ^
ext\repair\checkfreelist.c:39:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\repair\checkfreelist.c:43:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <string.h>
^
ext\repair\checkfreelist.c:44:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdio.h>
^
ext\repair\checkfreelist.c:45:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdlib.h>
^
ext\repair\checkfreelist.c:46:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <assert.h>
^
ext\recover\sqlite3recover.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\repair\checkfreelist.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\vfslog.c:181:0: information: Include file: <windows.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <windows.h>
^
ext\misc\vfslog.c:182:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
ext\repair\checkindex.c:14:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
#include "sqlite3ext.h"
^
ext\repair\checkindex.c:22:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <string.h>
^
ext\repair\checkindex.c:23:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdio.h>
^
ext\repair\checkindex.c:24:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdlib.h>
^
ext\repair\checkindex.c:25:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <assert.h>
^
ext\misc\unionvtab.c:937:17: style: The scope of the variable 'pSrc' can be reduced. [variableScope]
      UnionSrc *pSrc;
                ^
ext\repair\checkindex.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\unionvtab.c:885:9: style: Parameter 'pAux' can be declared as pointer to const. However it seems that 'unionConnect' is a callback function, if 'pAux' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void *pAux,
        ^
ext\misc\unionvtab.c:1333:5: note: You might need to cast the function pointer here
    unionConnect,
    ^
ext\misc\unionvtab.c:885:9: note: Parameter 'pAux' can be declared as pointer to const
  void *pAux,
        ^
ext\misc\unionvtab.c:1270:13: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  UnionTab *pTab = (UnionTab*)tab;
            ^
ext\misc\unionvtab.c:1277:38: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[i];
                                     ^
ext\rtree\geopoly.c:19:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\rtree\geopoly.c:38:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>  /* amalgamator: keep */
^
ext\misc\unionvtab.c:310:16: style: Variable 'iIn' is assigned a value that is never used. [unreadVariable]
            iIn++;
               ^
ext\misc\unionvtab.c:1314:56: style: Variable 'iCons' is assigned a value that is never used. [unreadVariable]
      pIdxInfo->aConstraintUsage[iGt].argvIndex = iCons++;
                                                       ^
ext\rtree\geopoly.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\rtree\rtree.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\rtree\rtree.c:60:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
  #include "sqlite3ext.h"
^
ext\rtree\sqlite3rtree.h:17:0: information: Include file: <sqlite3.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sqlite3.h>
^
ext\rtree\rtree.c:112:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\rtree\rtree.c:113:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\rtree\rtree.c:114:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\rtree\rtree.c:115:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\rtree\rtree.c:4472:3: error: There is an unknown macro here somewhere. Configuration is required. If SQLITE_EXTENSION_INIT2 is a macro then please configure it. [unknownMacro]
  SQLITE_EXTENSION_INIT2(pApi)
  ^
ext\rtree\test_rtreedoc.c:16:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\rtree\test_rtreedoc.c:17:0: information: Include file: "tclsqlite.h" not found. [missingInclude]
#include "tclsqlite.h"
^
ext\rtree\test_rtreedoc.c:20:0: information: Include file: "sqliteInt.h" not found. [missingInclude]
#include "sqliteInt.h"
^
ext\rtree\test_rtreedoc.c:338:41: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
int Sqlitetestrtreedoc_Init(Tcl_Interp *interp){
                                        ^
ext\misc\spellfix.c:880:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\rtree\test_rtreedoc.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\misc\spellfix.c:1177:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
ext\misc\spellfix.c:1772:10: style: The scope of the variable 'c' can be reduced. [variableScope]
  int i, c, sz, nOut;
         ^
ext\misc\spellfix.c:1782:23: style: The scope of the variable 'x' can be reduced. [variableScope]
      int xTop, xBtm, x;
                      ^
ext\misc\spellfix.c:1855:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c, sz;
      ^
ext\misc\spellfix.c:2057:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\misc\spellfix.c:665:48: style: Parameter 'pA' can be declared as pointer to const [constParameterPointer]
static int editDist3CostCompare(EditDist3Cost *pA, EditDist3Cost *pB){
                                               ^
ext\misc\spellfix.c:665:67: style: Parameter 'pB' can be declared as pointer to const [constParameterPointer]
static int editDist3CostCompare(EditDist3Cost *pA, EditDist3Cost *pB){
                                                                  ^
ext\misc\spellfix.c:837:35: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int matchTo(EditDist3Cost *p, const char *z, int n){
                                  ^
ext\misc\spellfix.c:849:37: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int matchFrom(EditDist3Cost *p, const char *z, int n){
                                    ^
ext\misc\spellfix.c:991:24: style: Parameter 'pFrom' can be declared as pointer to const [constParameterPointer]
  EditDist3FromString *pFrom,  /* The FROM string */
                       ^
ext\misc\spellfix.c:2720:21: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  spellfix1_cursor *pCur = (spellfix1_cursor *)cur;
                    ^
ext\repair\checkindex.c:472:17: style: The scope of the variable 'pInfo' can be reduced. [variableScope]
  sqlite3_stmt *pInfo = 0;
                ^
ext\misc\vfstrace.c:255:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;
          ^
ext\misc\vfstrace.c:256:9: style: The scope of the variable 'zMsg' can be reduced. [variableScope]
  char *zMsg;
        ^
ext\repair\checkindex.c:151:38: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];
                                     ^
ext\repair\checkindex.c:229:15: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  CidxCursor *pCsr = (CidxCursor*)pCursor;
              ^
ext\repair\checkindex.c:876:15: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  CidxCursor *pCsr = (CidxCursor*)pCursor;
              ^
ext\repair\checkindex.c:472:23: style: Variable 'pInfo' is assigned a value that is never used. [unreadVariable]
  sqlite3_stmt *pInfo = 0;
                      ^
ext\misc\spellfix.c:631:9: style: struct member 'EditDist3ToString::z' is never used. [unusedStructMember]
  char *z;                 /* The complete text of the TO string */
        ^
ext\session\changeset.c:16:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\session\changeset.c:17:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\session\changeset.c:18:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\session\changeset.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\session\changeset.c:20:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\session\changeset.c:21:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\spellfix.c:632:7: style: struct member 'EditDist3ToString::n' is never used. [unusedStructMember]
  int n;                   /* Number of characters in the TO string */
      ^
ext\misc\spellfix.c:633:16: style: struct member 'EditDist3ToString::a' is never used. [unusedStructMember]
  EditDist3To *a;          /* Extra info about each char of the TO string */
               ^
ext\session\changesetfuzz.c:99:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\session\changesetfuzz.c:100:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\session\changesetfuzz.c:101:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\session\changesetfuzz.c:102:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\session\changesetfuzz.c:103:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\session\changesetfuzz.c:104:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\misc\zipfile.c:558:7: style: Redundant initialization for 'n'. The initialized value is overwritten before it is read. [redundantInitialization]
    n = fwrite(aWrite, 1, nWrite, pTab->pWriteFd);
      ^
ext\misc\zipfile.c:556:14: note: n is initialized
    size_t n = nWrite;
             ^
ext\misc\zipfile.c:558:7: note: n is overwritten
    n = fwrite(aWrite, 1, nWrite, pTab->pWriteFd);
      ^
ext\misc\spellfix.c:2369:8: style: struct member 'MatchQuery::zHash' is never used. [unusedStructMember]
  char zHash[SPELLFIX_MX_HASH];    /* The current phonehash for zPattern */
       ^
ext\rtree\test_rtreedoc.c:58:14: style: The scope of the variable 'pRes' can be reduced. [variableScope]
    Tcl_Obj *pRes;
             ^
ext\misc\zipfile.c:698:7: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
  u8 *pEnd = &aExtra[nExtra];
      ^
ext\misc\zipfile.c:738:37: style: Parameter 'pCDS' can be declared as pointer to const [constParameterPointer]
static u32 zipfileMtime(ZipfileCDS *pCDS){
                                    ^
ext\misc\zipfile.c:1137:15: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  ZipfileCsr *pCsr = (ZipfileCsr*)cur;
              ^
ext\misc\zipfile.c:1764:46: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int zipfileSerializeEOCD(ZipfileEOCD *p, u8 *aBuf){
                                             ^
ext\fts3\fts3.c:685:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                          /* Iterator variable */
      ^
ext\fts3\fts3.c:884:9: style: The scope of the variable 'zFree' can be reduced. [variableScope]
  char *zFree = 0;
        ^
ext\fts3\fts3.c:1268:11: style: The scope of the variable 'iOpt' can be reduced. [variableScope]
      int iOpt;
          ^
ext\session\session_speed_test.c:20:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\misc\spellfix.c:445:8: style: Variable 'dc' is assigned a value that is never used. [unreadVariable]
    dc = cx[0];
       ^
ext\session\session_speed_test.c:21:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\fts3\fts3.c:1811:11: style: The scope of the variable 'zSql' can be reduced. [variableScope]
    char *zSql;
          ^
ext\session\session_speed_test.c:22:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\misc\spellfix.c:447:12: style: Variable 'cBprev' is assigned a value that is never used. [unreadVariable]
    cBprev = 0;
           ^
ext\session\session_speed_test.c:23:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\session\session_speed_test.c:24:0: information: Include file: <stddef.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stddef.h>
^
ext\session\session_speed_test.c:25:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
ext\misc\spellfix.c:483:10: style: Variable 'dc' is assigned a value that is never used. [unreadVariable]
      dc = cx[xB];
         ^
ext\misc\spellfix.c:486:14: style: Variable 'cBprev' is assigned a value that is never used. [unreadVariable]
      cBprev = cB;
             ^
ext\misc\spellfix.c:2312:60: style: Variable 'idx' is assigned a value that is never used. [unreadVariable]
      pIdxInfo->aConstraintUsage[iDistTerm].argvIndex = idx++;
                                                           ^
ext\fts3\fts3.c:3109:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
ext\fts3\fts3.c:3306:9: style: The scope of the variable 'zSql' can be reduced. [variableScope]
  char *zSql;                     /* SQL statement used to access %_content */
        ^
ext\fts3\fts3.c:5009:17: style: The scope of the variable 'pEnd' can be reduced. [variableScope]
    const char *pEnd;
                ^
ext\fts3\fts3.c:5207:11: style: The scope of the variable 'ii' can be reduced. [variableScope]
      int ii;
          ^
ext\fts3\fts3.c:5274:7: style: The scope of the variable 'nNew' can be reduced. [variableScope]
  int nNew;
      ^
ext\misc\zipfile.c:886:27: error: Uninitialized struct member: lfh.nFile [uninitStructMember]
        pNew->iDataOff += lfh.nFile + lfh.nExtra;
                          ^
ext\misc\zipfile.c:886:39: error: Uninitialized struct member: lfh.nExtra [uninitStructMember]
        pNew->iDataOff += lfh.nFile + lfh.nExtra;
                                      ^
ext\session\session_speed_test.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\session\changesetfuzz.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3.c:504:9: style: Parameter 'pStart' can be declared as pointer to const [constParameterPointer]
  char *pStart,
        ^
ext\fts3\fts3.c:939:43: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){
                                          ^
ext\fts3\fts3.c:1455:11: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
    char *z;
          ^
ext\fts3\fts3.c:1577:54: style: Parameter 'pIdxInfo' can be declared as pointer to const [constParameterPointer]
static void fts3SetEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){
                                                     ^
ext\fts3\fts3.c:1590:51: style: Parameter 'pIdxInfo' can be declared as pointer to const [constParameterPointer]
static void fts3SetUniqueFlag(sqlite3_index_info *pIdxInfo){
                                                  ^
ext\fts3\fts3.c:1607:14: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  Fts3Table *p = (Fts3Table *)pVTab;
             ^
ext\fts3\fts3.c:1628:38: style: Variable 'pCons' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_constraint *pCons = &pInfo->aConstraint[i];
                                     ^
ext\fts3\fts3.c:1717:35: style: Variable 'pOrder' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_orderby *pOrder = &pInfo->aOrderBy[0];
                                  ^
ext\fts3\fts3.c:2508:9: style: Parameter 'pEnd' can be declared as pointer to const [constParameterPointer]
  char *pEnd,                     /* End of buffer */
        ^
ext\fts3\fts3.c:2814:49: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){
                                                ^
ext\fts3\fts3.c:2869:14: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
  Fts3Table *p,                   /* FTS table handle */
             ^
ext\fts3\fts3.c:3223:11: style: Variable 'aEnd' can be declared as pointer to const [constVariablePointer]
    char *aEnd = &aList[nList];   /* Pointer to one byte after EOF */
          ^
ext\fts3\fts3.c:3435:15: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts3Cursor *pCsr = (Fts3Cursor *) pCursor;
              ^
ext\fts3\fts3.c:3458:14: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  Fts3Table *p = (Fts3Table *)pCursor->pVtab;
             ^
ext\fts3\fts3.c:3641:38: style: Parameter 'pStart' can be declared as pointer to const [constParameterPointer]
static void fts3ReversePoslist(char *pStart, char **ppPoslist){
                                     ^
ext\fts3\fts3.c:4262:14: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
  Fts3Table *pTab,                /* FTS Table pointer */
             ^
ext\fts3\fts3.c:4362:47: style: Parameter 'pCsr' can be declared as pointer to const [constParameterPointer]
static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){
                                              ^
ext\fts3\fts3.c:4497:22: style: Variable 'pToken' can be declared as pointer to const [constVariablePointer]
    Fts3PhraseToken *pToken = &p->aToken[i];
                     ^
ext\session\sqlite3session.h:12:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\session\sqlite3session.c:4:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\session\sqlite3session.c:5:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\session\sqlite3session.c:8:0: information: Include file: "sqliteInt.h" not found. [missingInclude]
# include "sqliteInt.h"
^
ext\session\sqlite3session.c:9:0: information: Include file: "vdbeInt.h" not found. [missingInclude]
# include "vdbeInt.h"
^
ext\fts3\fts3.c:4555:11: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
    char *pEnd = &aDoclist[nDoclist];
          ^
ext\fts3\fts3.c:4629:14: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
  Fts3Table *pTab,
             ^
ext\fts3\fts3.c:4634:9: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
  char *pEnd;                             /* 1 byte past end of aAll */
        ^
ext\fts3\fts3.c:5054:13: style: Parameter 'pRoot' can be declared as pointer to const [constParameterPointer]
  Fts3Expr *pRoot,                /* Consider tokens with this root node */
            ^
ext\fts3\fts3.c:5186:14: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Fts3Table *pTab = (Fts3Table *)pCsr->base.pVtab;
             ^
ext\fts3\fts3.c:5847:14: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Fts3Table *pTab = (Fts3Table*)pCtx;
             ^
ext\fts3\fts3.c:5980:14: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Fts3Table *pTab = (Fts3Table *)pCsr->base.pVtab;
             ^
ext\fts3\fts3.c:6030:14: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Fts3Table *pTab = (Fts3Table *)pCsr->base.pVtab;
             ^
ext\session\sqlite3session.c:1793:28: error: syntax error [syntaxError]
          TESTONLY(int trc = ) pSession->hook.xNew(pSession->hook.pCtx,iIdx,&p);
                           ^
ext\session\changeset.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts3\fts3.c:1710:55: style: Variable 'iIdx' is assigned a value that is never used. [unreadVariable]
    pInfo->aConstraintUsage[iDocidLe].argvIndex = iIdx++;
                                                      ^
ext\session\test_session.c:6:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\session\test_session.c:7:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\session\test_session.c:8:0: information: Include file: "tclsqlite.h" not found. [missingInclude]
#include "tclsqlite.h"
^
ext\session\session_speed_test.c:197:3: error: fprintf format string requires 1 parameter but only 0 are given. [wrongPrintfScanfArgNum]
  fprintf(stderr, "Error: %d\n");
  ^
ext\session\session_speed_test.c:48:59: style: Parameter 'pOpt' can be declared as pointer to const [constParameterPointer]
static void option_requires_argument_error(CmdLineOption *pOpt){
                                                          ^
ext\session\session_speed_test.c:173:22: style: Variable 'pOpt' can be declared as pointer to const [constVariablePointer]
      CmdLineOption *pOpt = &aOpt[iOpt];
                     ^
ext\session\session_speed_test.c:206:28: style: Parameter 'pCtx' can be declared as pointer to const. However it seems that 'xConflict' is a callback function, if 'pCtx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int xConflict(void *pCtx, int eConflict, sqlite3_changeset_iter *p){
                           ^
ext\session\session_speed_test.c:253:63: note: You might need to cast the function pointer here
  rc = sqlite3changeset_apply(db2, nChangeset, pChangeset, 0, xConflict, 0);
                                                              ^
ext\session\session_speed_test.c:206:28: note: Parameter 'pCtx' can be declared as pointer to const
static int xConflict(void *pCtx, int eConflict, sqlite3_changeset_iter *p){
                           ^
ext\session\session_speed_test.c:206:73: style: Parameter 'p' can be declared as pointer to const. However it seems that 'xConflict' is a callback function, if 'p' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int xConflict(void *pCtx, int eConflict, sqlite3_changeset_iter *p){
                                                                        ^
ext\session\session_speed_test.c:253:63: note: You might need to cast the function pointer here
  rc = sqlite3changeset_apply(db2, nChangeset, pChangeset, 0, xConflict, 0);
                                                              ^
ext\session\session_speed_test.c:206:73: note: Parameter 'p' can be declared as pointer to const
static int xConflict(void *pCtx, int eConflict, sqlite3_changeset_iter *p){
                                                                        ^
ext\wasm\SQLTester\touint8array.c:16:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\session\test_session.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\wasm\api\sqlite3-wasm.c:197:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\wasm\api\sqlite3-wasm.c:242:0: information: Include file: "sqlite3.c" not found. [missingInclude]
#include INC__STRINGIFY(SQLITE_C)
^
ext\wasm\c-pp.c:65:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
ext\wasm\c-pp.c:66:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\wasm\c-pp.c:67:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
ext\wasm\c-pp.c:68:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\wasm\c-pp.c:69:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
ext\wasm\c-pp.c:70:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\wasm\c-pp.c:71:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
ext\wasm\c-pp.c:73:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\wasm\c-pp.c:82:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <unistd.h>
^
ext\wasm\example_extra_init.c:17:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
ext\wasm\example_extra_init.c:18:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\wasm\mkwasmbuilds.c:30:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\wasm\mkwasmbuilds.c:31:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
ext\wasm\mkwasmbuilds.c:32:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\wasm\c-pp.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\wasm\mkwasmbuilds.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm-test\lsmtest_main.c:1458:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/time.h>
^
ext\lsm1\lsm-test\lsmtest_main.c:1459:0: information: Include file: <sys/resource.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/resource.h>
^
mptest\mptest.c:36:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
mptest\mptest.c:37:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
mptest\mptest.c:42:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
mptest\mptest.c:44:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
mptest\mptest.c:45:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
mptest\mptest.c:46:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
mptest\mptest.c:47:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
mptest\mptest.c:48:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
mptest\mptest.c:1347:29: error: There is an unknown macro here somewhere. Configuration is required. If SQLITE_VERSION is a macro then please configure it. [unknownMacro]
      printf("With SQLite " SQLITE_VERSION " " SQLITE_SOURCE_ID "\n" );
                            ^
mptest\mptest.c:40:0: information: Include file: <windows.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <windows.h>
^
ext\wasm\api\sqlite3-wasm.c:428:43: information: Limiting ValueFlow analysis in function 'sqlite3__wasm_enum_json' since it is too complex. Please specify --check-level=exhaustive to perform full analysis. [checkLevelNormal]
const char * sqlite3__wasm_enum_json(void){
                                          ^
ext\wasm\api\sqlite3-wasm.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\alter.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\sqliteInt.h:202:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\sqliteInt.h:635:0: information: Include file: "parse.h" not found. [missingInclude]
#include "parse.h"
^
src\sqliteInt.h:636:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
src\sqliteInt.h:637:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\sqliteInt.h:638:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\sqliteInt.h:639:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\sqliteInt.h:640:0: information: Include file: <stddef.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stddef.h>
^
src\sqliteInt.h:641:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
src\vdbe.h:20:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
src\vdbe.h:183:0: information: Include file: "opcodes.h" not found. [missingInclude]
#include "opcodes.h"
^
ext\recover\sqlite3recover.c:917:7: style: The scope of the variable 'ii' can be reduced. [variableScope]
  int ii;
      ^
ext\recover\sqlite3recover.c:2371:11: style: The scope of the variable 'ii' can be reduced. [variableScope]
      int ii;
          ^
ext\recover\sqlite3recover.c:2591:11: style: The scope of the variable 'bUseWrapper' can be reduced. [variableScope]
      int bUseWrapper = 1;
          ^
src\analyze.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\session\test_session.c:279:13: style: Variable 'zArg' can be declared as pointer to const [constVariablePointer]
      char *zArg = Tcl_GetString(objv[2]);
            ^
ext\session\test_session.c:515:9: style: Variable 'zObj' can be declared as pointer to const [constVariablePointer]
  char *zObj;
        ^
ext\session\test_session.c:1237:22: style: Variable 'pRebase' can be declared as pointer to const [constVariablePointer]
      unsigned char *pRebase = Tcl_GetByteArrayFromObj(objv[2], &nRebase);
                     ^
ext\recover\sqlite3recover.c:1134:33: style: Variable 'iBind' is assigned a value that is never used. [unreadVariable]
        pNew->iRowidBind = iBind++;
                                ^
ext\recover\sqlite3recover.c:2270:12: style: Variable 'iBlk' is assigned a value that is never used. [unreadVariable]
  int iBlk = 0;
           ^
ext\session\test_session.c:242:17: style: struct member 'SessionSubcmd::zSub' is never used. [unusedStructMember]
    const char *zSub;
                ^
ext\session\test_session.c:245:9: style: struct member 'SessionSubcmd::iSub' is never used. [unusedStructMember]
    int iSub;
        ^
ext\session\test_session.c:379:21: style: struct member 'ObjConfOpt::zName' is never used. [unusedStructMember]
        const char *zName;
                    ^
ext\session\test_session.c:1204:17: style: struct member 'RebaseSubcmd::zSub' is never used. [unusedStructMember]
    const char *zSub;
                ^
ext\session\test_session.c:1207:9: style: struct member 'RebaseSubcmd::iSub' is never used. [unusedStructMember]
    int iSub;
        ^
ext\session\test_session.c:1425:17: style: struct member 'ConfigOpt::zSub' is never used. [unusedStructMember]
    const char *zSub;
                ^
ext\lsm1\lsm_tree.c:2168:13: warning: Identical condition 'rc!=0', second condition is always false [identicalConditionAfterEarlyExit]
      if( rc!=LSM_OK ) break;
            ^
ext\lsm1\lsm_tree.c:2151:9: note: If condition 'rc!=0' is true, the function will return/exit
  if( rc!=LSM_OK ) return rc;
        ^
ext\lsm1\lsm_tree.c:2168:13: note: Testing identical condition 'rc!=0'
      if( rc!=LSM_OK ) break;
            ^
ext\session\test_session.c:1488:17: style: struct member 'ChangegroupCmd::zSub' is never used. [unusedStructMember]
    const char *zSub;
                ^
ext\session\test_session.c:1491:9: style: struct member 'ChangegroupCmd::iSub' is never used. [unusedStructMember]
    int iSub;
        ^
ext\lsm1\lsm_tree.c:1307:11: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( rc==LSM_OK ){
          ^
ext\lsm1\lsm_tree.c:1289:11: note: First condition
    if( rc==LSM_OK ){
          ^
ext\lsm1\lsm_tree.c:1307:11: note: Second condition
    if( rc==LSM_OK ){
          ^
src\attach.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\lsm1\lsm_tree.c:2218:9: style: Condition 'rc' is always false [knownConditionTrueFalse]
    if( rc ) break;
        ^
ext\lsm1\lsm_tree.c:2204:12: note: Assignment 'rc=0', assigned value is 0
  int rc = LSM_OK;
           ^
ext\lsm1\lsm_tree.c:2218:9: note: Condition 'rc' is always false
    if( rc ) break;
        ^
ext\lsm1\lsm_tree.c:516:5: portability: %d in format string (no. 1) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
    printf("% 6d %.*sleaf%.*s: %s\n",
    ^
ext\lsm1\lsm_tree.c:534:9: portability: %d in format string (no. 1) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
        printf("% 6d %.*s%.*s: %s\n",
        ^
ext\lsm1\lsm_tree.c:1409:17: style: The comparison 'rc == 0' is always true. [knownConditionTrueFalse]
      assert( rc==LSM_OK );
                ^
ext\lsm1\lsm_tree.c:1407:16: note: 'rc' is assigned value '0' here.
      int rc = LSM_OK;
               ^
ext\lsm1\lsm_tree.c:1409:17: note: The comparison 'rc == 0' is always true.
      assert( rc==LSM_OK );
                ^
ext\lsm1\lsm_tree.c:1431:17: style: The comparison 'rc == 0' is always true. [knownConditionTrueFalse]
      assert( rc==LSM_OK );
                ^
ext\lsm1\lsm_tree.c:1429:16: note: 'rc' is assigned value '0' here.
      int rc = LSM_OK;
               ^
ext\lsm1\lsm_tree.c:1431:17: note: The comparison 'rc == 0' is always true.
      assert( rc==LSM_OK );
                ^
ext\lsm1\lsm_tree.c:2246:15: style: The comparison 'rc == 0' is always true. [knownConditionTrueFalse]
    assert( rc==LSM_OK );
              ^
ext\lsm1\lsm_tree.c:2242:14: note: 'rc' is assigned value '0' here.
    int rc = LSM_OK;
             ^
ext\lsm1\lsm_tree.c:2246:15: note: The comparison 'rc == 0' is always true.
    assert( rc==LSM_OK );
              ^
ext\lsm1\lsm_tree.c:1856:13: style: The scope of the variable 'iNode' can be reduced. [variableScope]
        int iNode = csr.iNode;
            ^
ext\lsm1\lsm_tree.c:247:35: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int intArraySize(IntArray *p){
                                  ^
ext\lsm1\lsm_tree.c:268:29: style: Parameter 'p1' can be declared as pointer to const [constParameterPointer]
static int treeKeycmp(void *p1, int n1, void *p2, int n2){
                            ^
ext\lsm1\lsm_tree.c:268:47: style: Parameter 'p2' can be declared as pointer to const [constParameterPointer]
static int treeKeycmp(void *p1, int n1, void *p2, int n2){
                                              ^
ext\lsm1\lsm_tree.c:326:13: style: Parameter 'pNode' can be declared as pointer to const [constParameterPointer]
  TreeNode *pNode,
            ^
ext\lsm1\lsm_tree.c:330:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  TreeNode *p;
            ^
ext\lsm1\lsm_tree.c:370:17: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
          void *p = treeShmptr(pDb, iPtr);
                ^
ext\lsm1\lsm_tree.c:546:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  TreeRoot *p = &pDb->treehdr.root;
            ^
ext\lsm1\lsm_tree.c:651:17: style: Variable 'pFirst' can be declared as pointer to const [constVariablePointer]
      ShmChunk *pFirst;         /* Header of chunk treehdr.iFirst */
                ^
ext\lsm1\lsm_tree.c:740:7: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  u8 *a;
      ^
ext\lsm1\lsm_tree.c:789:13: style: Parameter 'pOld' can be declared as pointer to const [constParameterPointer]
  TreeNode *pOld,
            ^
ext\lsm1\lsm_tree.c:806:13: style: Parameter 'pOld' can be declared as pointer to const [constParameterPointer]
  TreeLeaf *pOld,
            ^
ext\lsm1\lsm_tree.c:1141:8: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  u32 *a = (u32 *)pHdr;
       ^
ext\lsm1\lsm_tree.c:1191:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  ShmChunk *p;
            ^
ext\lsm1\lsm_tree.c:1258:13: style: Variable 'pMin' can be declared as pointer to const [constVariablePointer]
  ShmChunk *pMin = 0;
            ^
ext\lsm1\lsm_tree.c:1372:15: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    TreeRoot *p = &db->treehdr.root;
              ^
ext\lsm1\lsm_tree.c:1405:15: style: Variable 'pNode' can be declared as pointer to const [constVariablePointer]
    TreeNode *pNode = pCsr->apTreeNode[iNode];
              ^
ext\lsm1\lsm_tree.c:1408:16: style: Variable 'pKey' can be declared as pointer to const [constVariablePointer]
      TreeKey *pKey = treeShmptr(db, pNode->aiKeyPtr[iCell]);
               ^
ext\lsm1\lsm_tree.c:1426:15: style: Variable 'pNode' can be declared as pointer to const [constVariablePointer]
    TreeNode *pNode = pCsr->apTreeNode[iNode];
              ^
ext\lsm1\lsm_tree.c:1430:16: style: Variable 'pKey' can be declared as pointer to const [constVariablePointer]
      TreeKey *pKey = treeShmptr(db, pNode->aiKeyPtr[iCell]);
               ^
ext\lsm1\lsm_tree.c:1592:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  TreeRoot *p = &db->treehdr.root;
            ^
ext\lsm1\lsm_tree.c:1803:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  TreeRoot *p = &db->treehdr.root;
            ^
ext\lsm1\lsm_tree.c:1979:13: style: Variable 'pRoot' can be declared as pointer to const [constVariablePointer]
  TreeRoot *pRoot = pCsr->pRoot;
            ^
ext\lsm1\lsm_tree.c:2069:13: style: Variable 'pRoot' can be declared as pointer to const [constVariablePointer]
  TreeRoot *pRoot = pCsr->pRoot;
            ^
ext\lsm1\lsm_tree.c:2135:13: style: Variable 'pRoot' can be declared as pointer to const [constVariablePointer]
  TreeRoot *pRoot = pCsr->pRoot;
            ^
ext\lsm1\lsm_tree.c:2203:13: style: Variable 'pRoot' can be declared as pointer to const [constVariablePointer]
  TreeRoot *pRoot = pCsr->pRoot;
            ^
ext\lsm1\lsm_tree.c:2243:14: style: Variable 'pKey' can be declared as pointer to const [constVariablePointer]
    TreeKey *pKey = (TreeKey *)treeShmptrUnsafe(pCsr->pDb,
             ^
ext\lsm1\lsm_tree.c:2298:36: style: Parameter 'pCsr' can be declared as pointer to const [constParameterPointer]
int lsmTreeCursorValid(TreeCursor *pCsr){
                                   ^
ext\lsm1\lsm_tree.c:2320:45: style: Parameter 'pMark' can be declared as pointer to const [constParameterPointer]
void lsmTreeRollback(lsm_db *pDb, TreeMark *pMark){
                                            ^
ext\lsm1\lsm_tree.c:2383:16: style: Variable 'pShm' can be declared as pointer to const [constVariablePointer]
    ShmHeader *pShm = pDb->pShmhdr;
               ^
ext\lsm1\lsm_tree.c:2402:15: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  TreeHeader *p = (iRead==1) ? &pDb->pShmhdr->hdr1 : &pDb->pShmhdr->hdr2;
              ^
ext\lsm1\lsm_tree.c:2436:14: style: Variable 'pKey' can be declared as pointer to const [constVariablePointer]
    TreeKey *pKey = csrGetKey(&csr, &blob, &rc);
             ^
src\analyze.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_tree.c:98:7: style: struct member 'TreeOld::iShmid' is never used. [unusedStructMember]
  u32 iShmid;                     /* Last shared-memory chunk in use by old */
      ^
ext\lsm1\lsm_tree.c:99:7: style: struct member 'TreeOld::iRoot' is never used. [unusedStructMember]
  u32 iRoot;                      /* Offset of root node in shm file */
      ^
ext\lsm1\lsm_tree.c:100:7: style: struct member 'TreeOld::nHeight' is never used. [unusedStructMember]
  u32 nHeight;                    /* Height of tree structure */
      ^
src\attach.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\alter.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\wasm\c-pp.c:288:3: style: Statements following noreturn function 'fatalv()' will never be executed. [unreachableCode]
  va_end(va);
  ^
ext\wasm\c-pp.c:1159:3: style: Statements following noreturn function 'fatalv()' will never be executed. [unreachableCode]
  va_end(va);
  ^
ext\wasm\c-pp.c:1051:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, argc = 0, prevChar = 0;
        ^
ext\wasm\c-pp.c:1051:22: style: The scope of the variable 'prevChar' can be reduced. [variableScope]
    int i, argc = 0, prevChar = 0;
                     ^
ext\wasm\c-pp.c:1163:67: style: Parameter 't' can be declared as pointer to const [constParameterPointer]
static void cmpp_kwd_noop(CmppKeyword const * pKw, CmppTokenizer *t){
                                                                  ^
ext\wasm\api\sqlite3-wasm.c:338:28: warning: Invalid test for overflow 'PStack.pBegin+n<=PStack.pBegin'; pointer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'n<=0'. [invalidTestForOverflow]
      || PStack.pBegin + n <= PStack.pBegin /*overflow*/ ) return 0;
                           ^
ext\wasm\c-pp.c:482:18: style: struct member 'CmppTokenizer::pstate' is never used. [unusedStructMember]
  CmppParseState pstate;
                 ^
ext\wasm\c-pp.c:1224:29: style: Variable 'tmpState' is assigned a value that is never used. [unreadVariable]
    CT_pstate(t) = tmpState = TS_IfPassed;
                            ^
ext\wasm\c-pp.c:76:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <io.h>
^
ext\wasm\c-pp.c:77:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <fcntl.h>
^
ext\rtree\geopoly.c:465:12: style: The scope of the variable 'x1' can be reduced. [variableScope]
  GeoCoord x1, y1, x0, y0;
           ^
ext\rtree\geopoly.c:465:16: style: The scope of the variable 'y1' can be reduced. [variableScope]
  GeoCoord x1, y1, x0, y0;
               ^
ext\rtree\geopoly.c:465:20: style: The scope of the variable 'x0' can be reduced. [variableScope]
  GeoCoord x1, y1, x0, y0;
                   ^
ext\rtree\geopoly.c:465:24: style: The scope of the variable 'y0' can be reduced. [variableScope]
  GeoCoord x1, y1, x0, y0;
                       ^
ext\rtree\geopoly.c:466:7: style: The scope of the variable 'ii' can be reduced. [variableScope]
  int ii;
      ^
ext\rtree\geopoly.c:1384:23: style: The scope of the variable 'p' can be reduced. [variableScope]
    RtreeSearchPoint *p;     /* Search point for the leaf */
                      ^
ext\rtree\geopoly.c:958:13: style: Variable 'x' can be declared as pointer to const [constVariablePointer]
  GeoCoord *x;
            ^
ext\rtree\geopoly.c:1095:19: style: Variable 'pPrev' can be declared as pointer to const [constVariablePointer]
      GeoSegment *pPrev = 0;
                  ^
ext\rtree\geopoly.c:1503:38: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[ii];
                                     ^
ext\rtree\geopoly.c:643:11: warning: Uninitialized variable: aCoord [uninitvar]
    mnX = aCoord[0].f;
          ^
ext\rtree\geopoly.c:1410:31: note: Calling function 'geopolyBBox', 3rd argument 'bbox' value is <Uninit>
      geopolyBBox(0, argv[0], bbox, &rc);
                              ^
ext\rtree\geopoly.c:643:11: note: Uninitialized variable: aCoord
    mnX = aCoord[0].f;
          ^
src\attach.c:52:31: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
int sqlite3DbIsNamed(sqlite3 *db, int iDb, const char *zName){
                              ^
src\attach.c:377:11: style: Variable 'zAuthArg' can be declared as pointer to const [constVariablePointer]
    char *zAuthArg;
          ^
src\auth.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\recover\dbdata.c:370:7: style: The scope of the variable 'rc2' can be reduced. [variableScope]
  int rc2;
      ^
ext\recover\dbdata.c:372:17: style: The scope of the variable 'pStmt' can be reduced. [variableScope]
  sqlite3_stmt *pStmt = pCsr->pStmt;
                ^
ext\recover\dbdata.c:563:9: style: The scope of the variable 'bNextPage' can be reduced. [variableScope]
    int bNextPage = 0;
        ^
ext\recover\dbdata.c:606:13: style: The scope of the variable 'iHdr' can be reduced. [variableScope]
        int iHdr;
            ^
ext\recover\dbdata.c:607:13: style: The scope of the variable 'U' can be reduced. [variableScope]
        int U, X;
            ^
ext\recover\dbdata.c:607:16: style: The scope of the variable 'X' can be reduced. [variableScope]
        int U, X;
               ^
ext\recover\dbdata.c:608:13: style: The scope of the variable 'nLocal' can be reduced. [variableScope]
        int nLocal;
            ^
ext\recover\dbdata.c:192:9: style: Parameter 'pAux' can be declared as pointer to const. However it seems that 'dbdataConnect' is a callback function, if 'pAux' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void *pAux,
        ^
ext\recover\dbdata.c:979:5: note: You might need to cast the function pointer here
    dbdataConnect,                /* xConnect */
    ^
ext\recover\dbdata.c:192:9: note: Parameter 'pAux' can be declared as pointer to const
  void *pAux,
        ^
ext\recover\dbdata.c:252:38: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_constraint *p = &pIdx->aConstraint[i];
                                     ^
ext\recover\dbdata.c:344:38: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
static u32 get_uint16(unsigned char *a){
                                     ^
ext\recover\dbdata.c:347:38: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
static u32 get_uint32(unsigned char *a){
                                     ^
ext\recover\dbdata.c:771:17: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  DbdataCursor *pCsr = (DbdataCursor*)pCursor;
                ^
ext\recover\dbdata.c:912:16: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;
               ^
ext\recover\dbdata.c:966:17: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  DbdataCursor *pCsr = (DbdataCursor*)pCursor;
                ^
ext\recover\dbdata.c:495:51: style: Variable 'pData' is assigned a value that is never used. [unreadVariable]
            case 2:  v = (v<<8) + pData[0];  pData++;
                                                  ^
ext\recover\dbdata.c:864:15: style: Variable 'nFunc' is assigned a value that is never used. [unreadVariable]
    int nFunc = 0;
              ^
src\backup.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\sqliteInt.h:253:0: information: Include file: <inttypes.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <inttypes.h>
^
src\auth.c:144:7: style: The scope of the variable 'iSrc' can be reduced. [variableScope]
  int iSrc;             /* Index in pTabList->a[] of table being read */
      ^
src\sqliteInt.h:250:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
src\bitvec.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\session\changesetfuzz.c:645:10: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
      rc = fuzzParseChanges(&p, pEnd, pParse);
         ^
ext\session\changesetfuzz.c:639:12: note: rc is assigned
        rc = SQLITE_NOMEM;
           ^
ext\session\changesetfuzz.c:645:10: note: rc is overwritten
      rc = fuzzParseChanges(&p, pEnd, pParse);
         ^
ext\session\changesetfuzz.c:776:7: style: The scope of the variable 'iSub' can be reduced. [variableScope]
  int iSub;
      ^
ext\session\changesetfuzz.c:1194:7: style: The scope of the variable 'nRepeat' can be reduced. [variableScope]
  int nRepeat = 0;                /* Number of output files */
      ^
ext\session\changesetfuzz.c:1195:7: style: The scope of the variable 'iSeed' can be reduced. [variableScope]
  int iSeed = 0;                  /* Value of PRNG seed */
      ^
ext\session\changesetfuzz.c:1199:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                          /* Current output file */
      ^
ext\session\changesetfuzz.c:1202:7: style: The scope of the variable 'pBuf' can be reduced. [variableScope]
  u8 *pBuf = 0;
      ^
ext\session\changesetfuzz.c:176:56: style: Parameter 'pBuf' can be declared as pointer to const [constParameterPointer]
static void fuzzWriteFile(const char *zFilename, void *pBuf, int nBuf){
                                                       ^
ext\session\changesetfuzz.c:366:30: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int fuzzGetVarint(u8 *p, int *pnVal){
                             ^
ext\session\changesetfuzz.c:442:7: style: Parameter 'pEnd' can be declared as pointer to const [constParameterPointer]
  u8 *pEnd,                       /* 1 byte past EOF */
      ^
ext\session\changesetfuzz.c:531:7: style: Parameter 'pEnd' can be declared as pointer to const [constParameterPointer]
  u8 *pEnd,                       /* One byte after end of input data */
      ^
ext\session\changesetfuzz.c:536:23: style: Variable 'pGrp' can be declared as pointer to const [constVariablePointer]
  FuzzChangesetGroup *pGrp = pParse->apGroup[pParse->nGroup-1];
                      ^
ext\session\changesetfuzz.c:664:48: style: Parameter 'pGrp' can be declared as pointer to const [constParameterPointer]
static int fuzzPrintRecord(FuzzChangesetGroup *pGrp, u8 **ppRec, int bPKOnly){
                                               ^
ext\session\changesetfuzz.c:705:20: style: Variable 'aHex' can be declared as const array [constVariable]
              char aHex[16] = {'0', '1', '2', '3', '4', '5', '6', '7',
                   ^
ext\session\changesetfuzz.c:734:43: style: Parameter 'pParse' can be declared as pointer to const [constParameterPointer]
static void fuzzPrintGroup(FuzzChangeset *pParse, FuzzChangesetGroup *pGrp){
                                          ^
ext\session\changesetfuzz.c:806:25: style: Variable 'pGrp' can be declared as pointer to const [constVariablePointer]
    FuzzChangesetGroup *pGrp = pParse->apGroup[pChange->iGroup];
                        ^
ext\session\changesetfuzz.c:1137:13: style: Variable 'pSaved' can be declared as pointer to const [constVariablePointer]
        u8 *pSaved;
            ^
ext\session\changesetfuzz.c:581:18: style: Variable 'bIndirect' is assigned a value that is never used. [unreadVariable]
    u8 bIndirect = p[1];
                 ^
src\analyze.c:1460:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\session\changesetfuzz.c:1194:15: style: Variable 'nRepeat' is assigned a value that is never used. [unreadVariable]
  int nRepeat = 0;                /* Number of output files */
              ^
ext\session\changesetfuzz.c:1195:13: style: Variable 'iSeed' is assigned a value that is never used. [unreadVariable]
  int iSeed = 0;                  /* Value of PRNG seed */
            ^
ext\session\changesetfuzz.c:1202:12: style: Variable 'pBuf' is assigned a value that is never used. [unreadVariable]
  u8 *pBuf = 0;
           ^
src\analyze.c:207:12: style: Variable 'pStat' can be declared as pointer to const [constVariablePointer]
    Table *pStat;
           ^
src\analyze.c:980:10: style: Parameter 'pOnlyIdx' can be declared as pointer to const [constParameterPointer]
  Index *pOnlyIdx, /* If not NULL, only analyze this one index */
         ^
src\analyze.c:1190:15: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
        char *pColl = (char*)sqlite3LocateCollSeq(pParse, pIdx->azColl[i]);
              ^
src\analyze.c:1396:11: style: Variable 'pSchema' can be declared as pointer to const [constVariablePointer]
  Schema *pSchema = db->aDb[iDb].pSchema;    /* Schema of database iDb */
          ^
src\analyze.c:1461:13: style: Variable 'zDb' can be declared as pointer to const [constVariablePointer]
  char *z, *zDb;
            ^
src\analyze.c:1957:11: style: Variable 'pSchema' can be declared as pointer to const [constVariablePointer]
  Schema *pSchema = db->aDb[iDb].pSchema;
          ^
src\btmutex.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 146 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\sqliteInt.h:195:0: information: Include file: "1" not found. [missingInclude]
# include INC_STRINGIFY(SQLITE_CUSTOM_INCLUDE)
^
src\bitvec.c:211:18: style: The scope of the variable 'j' can be reduced. [variableScope]
    unsigned int j;
                 ^
src\bitvec.c:212:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
    int rc;
        ^
src\bitvec.c:292:31: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
u32 sqlite3BitvecSize(Bitvec *p){
                              ^
src\btree.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 155 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\build.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\callback.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\build.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\callback.c:53:12: style: The scope of the variable 'pColl2' can be reduced. [variableScope]
  CollSeq *pColl2;
           ^
src\callback.c:413:7: style: The scope of the variable 'h' can be reduced. [variableScope]
  int h;              /* Hash value */
      ^
src\callback.c:53:12: style: Variable 'pColl2' can be declared as pointer to const [constVariablePointer]
  CollSeq *pColl2;
           ^
src\callback.c:54:9: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
  char *z = pColl->zName;
        ^
src\callback.c:82:14: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
    sqlite3 *db = pParse->db;
             ^
src\callback.c:83:14: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    CollSeq *p = sqlite3GetCollSeq(pParse, ENC(db), pColl, zName);
             ^
src\callback.c:300:12: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
  FuncDef *p,     /* The function we are evaluating for match quality */
           ^
src\complete.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\rtree\geopoly.c:1117:9: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
        GEODEBUG(("Segment %d.%d %g->%g\n", pSeg->side, pSeg->idx, pSeg->y, y));
        ^
ext\rtree\geopoly.c:1122:13: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
            GEODEBUG(("Crossing: %d.%d and %d.%d\n",
            ^
ext\rtree\geopoly.c:1122:13: warning: %d in format string (no. 4) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
            GEODEBUG(("Crossing: %d.%d and %d.%d\n",
            ^
ext\rtree\geopoly.c:1135:5: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    GEODEBUG(("%s %d.%d C=%g B=%g\n",
    ^
src\date.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 151 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\date.c:47:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\date.c:48:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\date.c:49:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
src\sqliteInt.h:170:0: information: Include file: "mingw.h" not found. [missingInclude]
# include "mingw.h"
^
src\sqliteInt.h:172:0: information: Include file: "_mingw.h" not found. [missingInclude]
# include "_mingw.h"
^
ext\rbu\sqlite3rbu.c:709:7: style: The scope of the variable 'nOut2' can be reduced. [variableScope]
  int nOut2;
      ^
ext\rbu\sqlite3rbu.c:1931:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
ext\rbu\sqlite3rbu.c:3491:22: style: The scope of the variable 'pVal' can be reduced. [variableScope]
      sqlite3_value *pVal;
                     ^
ext\rbu\sqlite3rbu.c:523:18: style: Variable 'zStart' can be declared as pointer to const [constVariablePointer]
  unsigned char *zStart = z;
                 ^
ext\rbu\sqlite3rbu.c:973:15: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  sqlite3rbu *p = sqlite3_user_data(pCtx);
              ^
ext\rbu\sqlite3rbu.c:3156:57: style: Parameter 'pFrame' can be declared as pointer to const [constParameterPointer]
static void rbuCheckpointFrame(sqlite3rbu *p, RbuFrame *pFrame){
                                                        ^
ext\rbu\sqlite3rbu.c:3839:50: style: Parameter 'pState' can be declared as pointer to const [constParameterPointer]
static void rbuSetupOal(sqlite3rbu *p, RbuState *pState){
                                                 ^
ext\rbu\sqlite3rbu.c:4094:17: style: Variable 'pFd' can be declared as pointer to const [constVariablePointer]
      rbu_file *pFd = (rbuIsVacuum(p) ? p->pRbuFd : p->pTargetFd);
                ^
ext\rbu\sqlite3rbu.c:4316:47: style: Parameter 'pRbu' can be declared as pointer to const [constParameterPointer]
sqlite3_int64 sqlite3rbu_progress(sqlite3rbu *pRbu){
                                              ^
ext\rbu\sqlite3rbu.c:4359:34: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
int sqlite3rbu_state(sqlite3rbu *p){
                                 ^
ext\rbu\sqlite3rbu.c:4657:26: style: Parameter 'aBuf' can be declared as pointer to const [constParameterPointer]
static u32 rbuGetU32(u8 *aBuf){
                         ^
ext\rbu\sqlite3rbu.c:4841:15: style: Variable 'pRbu' can be declared as pointer to const [constVariablePointer]
  sqlite3rbu *pRbu = p->pRbu;
              ^
ext\rbu\sqlite3rbu.c:5440:48: style: Parameter 'pRbu' can be declared as pointer to const [constParameterPointer]
sqlite3_int64 sqlite3rbu_temp_size(sqlite3rbu *pRbu){
                                               ^
src\sqliteInt.h:1086:0: information: Include file: <TargetConditionals.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <TargetConditionals.h>
^
ext\rbu\sqlite3rbu.c:2651:19: style: Variable 'zUpdate' is assigned a value that is never used. [unreadVariable]
    char *zUpdate = 0;
                  ^
src\vxworks.h:18:0: information: Include file: <vxWorks.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vxWorks.h>
^
src\vxworks.h:19:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>  /* amalgamator: dontcache */
^
ext\rbu\sqlite3rbu.c:4043:12: style: Variable 'pCsr' is assigned a value that is never used. [unreadVariable]
      pCsr += nRbu+1;
           ^
src\date.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\btreeInt.h:383:3: error: #error wrong numeric code for read-transaction [preprocessorErrorDirective]
# error wrong numeric code for read-transaction
  ^
src\backup.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src\dbpage.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 146 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\btmutex.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src\auth.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\dbstat.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 146 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\btree.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src\delete.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\date.c:462:7: style: The scope of the variable 'Z' can be reduced. [variableScope]
  int Z, alpha, A, B, C, D, E, X1;
      ^
src\date.c:462:10: style: The scope of the variable 'alpha' can be reduced. [variableScope]
  int Z, alpha, A, B, C, D, E, X1;
         ^
src\date.c:462:17: style: The scope of the variable 'A' can be reduced. [variableScope]
  int Z, alpha, A, B, C, D, E, X1;
                ^
src\date.c:462:20: style: The scope of the variable 'B' can be reduced. [variableScope]
  int Z, alpha, A, B, C, D, E, X1;
                   ^
src\date.c:462:23: style: The scope of the variable 'C' can be reduced. [variableScope]
  int Z, alpha, A, B, C, D, E, X1;
                      ^
src\date.c:462:26: style: The scope of the variable 'D' can be reduced. [variableScope]
  int Z, alpha, A, B, C, D, E, X1;
                         ^
src\date.c:462:29: style: The scope of the variable 'E' can be reduced. [variableScope]
  int Z, alpha, A, B, C, D, E, X1;
                            ^
src\date.c:462:32: style: The scope of the variable 'X1' can be reduced. [variableScope]
  int Z, alpha, A, B, C, D, E, X1;
                               ^
src\date.c:1103:10: style: The scope of the variable 'n' can be reduced. [variableScope]
  int i, n;
         ^
src\date.c:557:14: style: Variable 'pX' can be declared as pointer to const [constVariablePointer]
  struct tm *pX;
             ^
src\date.c:1407:12: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
  sqlite3 *db;
           ^
src\expr.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 150 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\delete.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\date.c:1733:9: style: Variable 'zFormat' can be declared as pointer to const [constVariablePointer]
  char *zFormat = (char *)sqlite3_user_data(context);
        ^
src\date.c:1735:14: style: Variable 'pTm' can be declared as pointer to const [constVariablePointer]
  struct tm *pTm;
             ^
ext\fts5\fts5_index.c:5389:27: style: Condition 'nPrefix2>nPrefix' is always false [knownConditionTrueFalse]
        }else if( nPrefix2>nPrefix ){
                          ^
ext\fts5\fts5_index.c:5377:15: note: nPrefix is assigned '((nPrefix)<(nPrefix2))?(nPrefix):(nPrefix2)' here.
      nPrefix = MIN(nPrefix, nPrefix2);
              ^
ext\fts5\fts5_index.c:5389:27: note: Condition 'nPrefix2>nPrefix' is always false
        }else if( nPrefix2>nPrefix ){
                          ^
ext\fts5\fts5_index.c:9463:3: style: Statements following 'return' will never be executed. [unreachableCode]
  UNUSED_PARAM(db);
  ^
ext\fts5\fts5_index.c:1091:7: style: The scope of the variable 'iLvl' can be reduced. [variableScope]
  int iLvl;
      ^
ext\fts5\fts5_index.c:1130:11: style: The scope of the variable 'iSeg' can be reduced. [variableScope]
      int iSeg;
          ^
ext\fts5\fts5_index.c:1463:7: style: The scope of the variable 'il' can be reduced. [variableScope]
  int il, is;
      ^
ext\fts5\fts5_index.c:1463:11: style: The scope of the variable 'is' can be reduced. [variableScope]
  int il, is;
          ^
ext\fts5\fts5_index.c:3523:13: style: The scope of the variable 'iCol' can be reduced. [variableScope]
        int iCol;
            ^
ext\fts5\fts5_index.c:4794:9: style: The scope of the variable 'nPos' can be reduced. [variableScope]
    int nPos;                     /* position-list size field value */
        ^
ext\fts5\fts5_index.c:5550:7: style: The scope of the variable 'iSegid' can be reduced. [variableScope]
  int iSegid;
      ^
ext\fts5\fts5_index.c:5564:29: style: The scope of the variable 'pSeg' can be reduced. [variableScope]
      Fts5StructureSegment *pSeg; /* New segment within pStruct */
                            ^
ext\fts5\fts5_index.c:8363:9: style: The scope of the variable 'res' can be reduced. [variableScope]
    int res;
        ^
ext\fts5\fts5_index.c:8461:11: style: The scope of the variable 'nTerm' can be reduced. [variableScope]
      int nTerm;                  /* Size of term on leaf in bytes */
          ^
ext\fts5\fts5_index.c:8462:11: style: The scope of the variable 'res' can be reduced. [variableScope]
      int res;                    /* Comparison of term and split-key */
          ^
ext\fts5\fts5_index.c:975:71: style: Parameter 'pSeg' can be declared as pointer to const [constParameterPointer]
static void fts5DataRemoveSegment(Fts5Index *p, Fts5StructureSegment *pSeg){
                                                                      ^
ext\fts5\fts5_index.c:1028:41: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
int sqlite3Fts5StructureTest(Fts5Index *p, void *pStruct){
                                        ^
ext\fts5\fts5_index.c:1448:50: style: Parameter 'pSeg' can be declared as pointer to const [constParameterPointer]
static int fts5SegmentSize(Fts5StructureSegment *pSeg){
                                                 ^
ext\fts5\fts5_index.c:1509:27: style: Variable 'pSeg' can be declared as pointer to const [constVariablePointer]
    Fts5StructureSegment *pSeg;   /* Segment just written */
                          ^
ext\fts5\fts5_index.c:1627:40: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int fts5DlidxIterEof(Fts5Index *p, Fts5DlidxIter *pIter){
                                       ^
ext\fts5\fts5_index.c:1842:44: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static void fts5SegIterLoadNPos(Fts5Index *p, Fts5SegIter *pIter){
                                           ^
ext\fts5\fts5_index.c:1937:43: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static void fts5SegIterSetNext(Fts5Index *p, Fts5SegIter *pIter){
                                          ^
ext\fts5\fts5_index.c:2135:44: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int fts5MultiIterIsEmpty(Fts5Index *p, Fts5Iter *pIter){
                                           ^
ext\fts5\fts5_index.c:2136:16: style: Variable 'pSeg' can be declared as pointer to const [constVariablePointer]
  Fts5SegIter *pSeg = &pIter->aSeg[pIter->aFirst[1].iFirst];
               ^
ext\fts5\fts5_index.c:2393:15: style: Variable 'pLeaf' can be declared as pointer to const [constVariablePointer]
    Fts5Data *pLeaf = pIter->pLeaf;         /* Current leaf data */
              ^
ext\fts5\fts5_index.c:2475:13: style: Variable 'pLeaf' can be declared as pointer to const [constVariablePointer]
  Fts5Data *pLeaf = pIter->pLeaf; /* Current leaf data */
            ^
ext\fts5\fts5_index.c:3242:16: style: Variable 'pSeg' can be declared as pointer to const [constVariablePointer]
  Fts5SegIter *pSeg = &pIter->aSeg[ pIter->aFirst[1].iFirst ];
               ^
ext\fts5\fts5_index.c:3458:44: style: Parameter 'pColset' can be declared as pointer to const [constParameterPointer]
static int fts5IndexColsetTest(Fts5Colset *pColset, int iCol){
                                           ^
ext\fts5\fts5_index.c:3638:15: style: Parameter 'pColset' can be declared as pointer to const [constParameterPointer]
  Fts5Colset *pColset,            /* Colset to filter on */
              ^
ext\fts5\fts5_index.c:3696:67: style: Parameter 'pSeg' can be declared as pointer to const. However it seems that 'fts5IterSetOutputs_None' is a callback function, if 'pSeg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void fts5IterSetOutputs_None(Fts5Iter *pIter, Fts5SegIter *pSeg){
                                                                  ^
ext\fts5\fts5_index.c:3829:28: note: You might need to cast the function pointer here
      pIter->xSetOutputs = fts5IterSetOutputs_None;
                           ^
ext\fts5\fts5_index.c:3696:67: note: Parameter 'pSeg' can be declared as pointer to const
static void fts5IterSetOutputs_None(Fts5Iter *pIter, Fts5SegIter *pSeg){
                                                                  ^
ext\fts5\fts5_index.c:3771:10: style: Variable 'aiColEnd' can be declared as pointer to const [constVariablePointer]
    int *aiColEnd = &aiCol[pIter->pColset->nCol];
         ^
ext\fts5\fts5_index.c:3827:17: style: Variable 'pConfig' can be declared as pointer to const [constVariablePointer]
    Fts5Config *pConfig = pIter->pIndex->pConfig;
                ^
ext\fts5\fts5_index.c:3937:27: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
      Fts5StructureLevel *pEnd = &pStruct->aLevel[pStruct->nLevel];
                          ^
ext\fts5\fts5_index.c:4022:40: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int fts5MultiIterEof(Fts5Index *p, Fts5Iter *pIter){
                                       ^
ext\fts5\fts5_index.c:4883:15: style: Variable 'pConfig' can be declared as pointer to const [constVariablePointer]
  Fts5Config *pConfig = p->pConfig;
              ^
ext\fts5\fts5_index.c:4939:27: style: Variable 'pLvl' can be declared as pointer to const [constVariablePointer]
      Fts5StructureLevel *pLvl = &pStruct->aLevel[iLvl];
                          ^
ext\fts5\fts5_index.c:5566:19: style: Variable 'pPgidx' can be declared as pointer to const [constVariablePointer]
      Fts5Buffer *pPgidx;         /* Buffer in which to assemble pgidx */
                  ^
ext\fts5\fts5_index.c:6286:7: style: Parameter 'pToken' can be declared as pointer to const [constParameterPointer]
  u8 *pToken,                     /* Buffer containing token */
      ^
ext\fts5\fts5_index.c:6405:21: style: Parameter 'a1' can be declared as pointer to const [constParameterPointer]
  Fts5TokenDataMap *a1, int n1,   /* Input array 1 */
                    ^
ext\fts5\fts5_index.c:6406:21: style: Parameter 'a2' can be declared as pointer to const [constParameterPointer]
  Fts5TokenDataMap *a2, int n2,   /* Input array 2 */
                    ^
ext\fts5\fts5_index.c:7122:30: style: Variable 'pReader' can be declared as pointer to const [constVariablePointer]
          Fts5PoslistReader *pReader = &pT->aPoslistReader[ii];
                             ^
ext\fts5\fts5_index.c:7187:68: style: Parameter 'pTerm' can be declared as pointer to const [constParameterPointer]
static void fts5TokendataSetTermIfEof(Fts5Iter *pIter, Fts5Buffer *pTerm){
                                                                   ^
ext\fts5\fts5_index.c:7608:25: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
      Fts5TokenDataMap *p = &aMap[iTest];
                        ^
ext\fts5\fts5_index.c:7663:19: style: Variable 'pTerm' can be declared as pointer to const [constVariablePointer]
      Fts5Buffer *pTerm = &pT->apIter[ii]->aSeg[0].term;
                  ^
ext\fts5\fts5_index.c:7724:38: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
int sqlite3Fts5IndexReads(Fts5Index *p){
                                     ^
ext\fts5\fts5_index.c:7846:25: style: Parameter 'pSeg' can be declared as pointer to const [constParameterPointer]
  Fts5StructureSegment *pSeg,     /* Segment to rebuild hash of */
                        ^
ext\fts5\fts5_index.c:8616:11: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
    char *z = (char*)fts5MultiIterTerm(pIter, &n);
          ^
src\expr.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\fts5\fts5_index.c:5032:14: style: struct member 'Fts5FlushCtx::pIdx' is never used. [unusedStructMember]
  Fts5Index *pIdx;
             ^
ext\fts5\fts5_index.c:5212:12: style: Variable 'iIdx' is assigned a value that is never used. [unreadVariable]
  int iIdx = 0;
           ^
src\delete.c:119:60: style: Parameter 'pTrigger' can be declared as pointer to const [constParameterPointer]
int sqlite3IsReadOnly(Parse *pParse, Table *pTab, Trigger *pTrigger){
                                                           ^
src\delete.c:904:8: style: Parameter 'aRegIdx' can be declared as pointer to const [constParameterPointer]
  int *aRegIdx,      /* Only delete if aRegIdx!=0 && aRegIdx[i]>0 */
       ^
src\delete.c:913:10: style: Variable 'pPk' can be declared as pointer to const [constVariablePointer]
  Index *pPk;        /* PRIMARY KEY index, or NULL for rowid tables */
         ^
src\delete.c:971:10: style: Parameter 'pPrior' can be declared as pointer to const [constParameterPointer]
  Index *pPrior,       /* Previously generated index key */
         ^
src\fault.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\dbstat.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\dbpage.c:132:38: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[i];
                                     ^
src\dbpage.c:153:38: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[i];
                                     ^
src\dbpage.c:215:17: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  DbpageCursor *pCsr = (DbpageCursor *)pCursor;
                ^
src\dbpage.c:315:17: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  DbpageCursor *pCsr = (DbpageCursor *)pCursor;
                ^
src\dbpage.c:348:14: style: Variable 'zErr' is assigned a value that is never used. [unreadVariable]
  char *zErr = 0;
             ^
src\dbstat.c:308:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\alter.c:112:9: style: Variable 'v' can be declared as pointer to const [constVariablePointer]
  Vdbe *v = pParse->pVdbe;
        ^
src\alter.c:127:10: style: Parameter 'pName' can be declared as pointer to const [constParameterPointer]
  Token *pName              /* The new table name. */
         ^
src\alter.c:321:9: style: Variable 'pDflt' can be declared as pointer to const [constVariablePointer]
  Expr *pDflt;              /* Default value for the new column */
        ^
src\alter.c:885:15: style: Variable 'pList' can be declared as pointer to const [constVariablePointer]
    ExprList *pList = p->pEList;
              ^
src\alter.c:1628:16: style: Variable 'pTarget' can be declared as pointer to const [constVariablePointer]
        Table *pTarget = sqlite3LocateTable(&sParse, 0, pStep->zTarget, zDb);
               ^
src\alter.c:1631:23: style: Variable 'pUpsertSet' can be declared as pointer to const [constVariablePointer]
            ExprList *pUpsertSet = pStep->pUpsert->pUpsertSet;
                      ^
src\alter.c:1703:14: style: Variable 'pItem' can be declared as pointer to const [constVariablePointer]
    SrcItem *pItem = &pSrc->a[i];
             ^
src\dbstat.c:291:14: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  StatTable *pTab = (StatTable *)pVTab;
             ^
src\dbstat.c:573:9: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
  char *z;
        ^
src\dbstat.c:727:15: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  StatCursor *pCsr = (StatCursor *)pCursor;
              ^
src\dbstat.c:866:15: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  StatCursor *pCsr = (StatCursor *)pCursor;
              ^
src\build.c:5201:45: warning: Either the condition 'p->nSrc>1' is redundant or the array 'p->a[0]' is accessed at index -1, which is out of bounds. [negativeIndex]
      allFlags |= p->a[i].fg.jointype = p->a[i-1].fg.jointype;
                                            ^
src\build.c:5197:19: note: Assuming that condition 'p->nSrc>1' is not redundant
  if( p && p->nSrc>1 ){
                  ^
src\build.c:5198:20: note: Assignment 'i=p->nSrc-1', assigned value is 1
    int i = p->nSrc-1;
                   ^
src\build.c:5202:16: note: i is decremented', new value is 0
    }while( (--i)>0 );
               ^
src\build.c:5201:45: note: Negative array index
      allFlags |= p->a[i].fg.jointype = p->a[i-1].fg.jointype;
                                            ^
src\build.c:811:9: warning: Either the condition 'db==0' is redundant or there is possible null pointer dereference: db. [nullPointerRedundantCheck]
    if( db->pnBytesFreed==0 && !IsVirtual(pTable) ){
        ^
src\build.c:816:17: note: Assuming that condition 'db==0' is not redundant
      assert( db==0 || sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );
                ^
src\build.c:811:9: note: Null pointer dereference
    if( db->pnBytesFreed==0 && !IsVirtual(pTable) ){
        ^
src\build.c:173:11: style: The scope of the variable 'addrRewind' can be reduced. [variableScope]
      int addrRewind;
          ^
src\build.c:174:11: style: The scope of the variable 'reg' can be reduced. [variableScope]
      int reg;
          ^
src\build.c:616:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\build.c:750:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\build.c:4909:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\build.c:5224:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\build.c:5452:7: style: The scope of the variable 'j' can be reduced. [variableScope]
  int j;
      ^
src\build.c:5579:12: style: The scope of the variable 'pColl' can be reduced. [variableScope]
  CollSeq *pColl;             /* Collating sequence to be reindexed, or NULL */
           ^
src\build.c:5640:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\fkey.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\build.c:108:16: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    TableLock *p = &pParse->aTableLock[i];
               ^
src\build.c:172:18: style: Variable 'pReturning' can be declared as pointer to const [constVariablePointer]
      Returning *pReturning;
                 ^
src\build.c:206:15: style: Variable 'pSchema' can be declared as pointer to const [constVariablePointer]
      Schema *pSchema;
              ^
src\build.c:223:13: style: Variable 'vtab' can be declared as pointer to const [constVariablePointer]
      char *vtab = (char *)sqlite3GetVTable(db, pParse->apVtabLock[i]);
            ^
src\build.c:253:18: style: Variable 'pRet' can be declared as pointer to const [constVariablePointer]
      Returning *pRet;
                 ^
src\build.c:698:46: style: Parameter 'pCol' can be declared as pointer to const [constParameterPointer]
Expr *sqlite3ColumnExpr(Table *pTab, Column *pCol){
                                             ^
src\build.c:734:39: style: Parameter 'pCol' can be declared as pointer to const [constParameterPointer]
const char *sqlite3ColumnColl(Column *pCol){
                                      ^
src\build.c:812:13: style: Variable 'zName' can be declared as pointer to const [constVariablePointer]
      char *zName = pIndex->zName;
            ^
src\build.c:940:39: style: Parameter 'pName' can be declared as pointer to const [constParameterPointer]
int sqlite3FindDb(sqlite3 *db, Token *pName){
                                      ^
src\build.c:998:36: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
int sqlite3WritableSchema(sqlite3 *db){
                                   ^
src\build.c:1070:38: style: Parameter 'pIdx' can be declared as pointer to const [constParameterPointer]
int sqlite3TableColumnToIndex(Index *pIdx, int iCol){
                                     ^
src\build.c:1096:40: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
i16 sqlite3StorageColumnToTable(Table *pTab, i16 iCol){
                                       ^
src\build.c:1144:40: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
i16 sqlite3TableColumnToStorage(Table *pTab, i16 iCol){
                                       ^
src\build.c:1248:11: style: Variable 'zDb' can be declared as pointer to const [constVariablePointer]
    char *zDb = db->aDb[iDb].zDbSName;
          ^
src\build.c:1267:11: style: Variable 'zDb' can be declared as pointer to const [constVariablePointer]
    char *zDb = db->aDb[iDb].zDbSName;
          ^
src\build.c:1860:13: style: Variable 'pCExpr' can be declared as pointer to const [constVariablePointer]
      Expr *pCExpr = sqlite3ExprSkipCollate(pList->a[0].pExpr);
            ^
src\build.c:1924:50: style: Parameter 'pToken' can be declared as pointer to const [constParameterPointer]
void sqlite3AddCollateType(Parse *pParse, Token *pToken){
                                                 ^
src\build.c:2102:9: style: Variable 'zSep' can be declared as pointer to const [constVariablePointer]
  char *zSep, *zSep2, *zEnd;
        ^
src\build.c:2102:24: style: Variable 'zEnd' can be declared as pointer to const [constVariablePointer]
  char *zSep, *zSep2, *zEnd;
                       ^
src\build.c:2303:10: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Table *pTab = pIdx->pTable;
         ^
src\build.c:2873:14: style: Variable 'pEnd2' can be declared as pointer to const [constVariablePointer]
      Token *pEnd2 = tabOpts ? &pParse->sLastToken : pEnd;
             ^
src\build.c:2933:12: style: Variable 'pOld' can be declared as pointer to const [constVariablePointer]
    Table *pOld;
           ^
src\build.c:2975:10: style: Parameter 'pBegin' can be declared as pointer to const [constParameterPointer]
  Token *pBegin,     /* The CREATE token that begins the statement */
         ^
src\build.c:3442:42: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
int sqlite3ReadOnlyShadowTables(sqlite3 *db){
                                         ^
src\build.c:3479:9: style: Variable 'v' can be declared as pointer to const [constVariablePointer]
  Vdbe *v;
        ^
src\build.c:3733:10: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Table *pTab;
         ^
src\build.c:3930:10: style: Parameter 'pStart' can be declared as pointer to const [constParameterPointer]
  Token *pStart,     /* The CREATE token that begins this statement */
         ^
src\build.c:4135:11: style: Variable 'pExpr' can be declared as pointer to const [constVariablePointer]
    Expr *pExpr = pList->a[i].pExpr;
          ^
src\build.c:4195:11: style: Variable 'pCExpr' can be declared as pointer to const [constVariablePointer]
    Expr *pCExpr;                  /* The i-th index expression */
          ^
src\build.c:4372:14: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
      Index *p;
             ^
src\build.c:4614:12: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
    Table *pTab = pIndex->pTable;
           ^
src\build.c:4692:66: style: Parameter 'pToken' can be declared as pointer to const [constParameterPointer]
IdList *sqlite3IdListAppend(Parse *pParse, IdList *pList, Token *pToken){
                                                                 ^
src\build.c:4732:32: style: Parameter 'pList' can be declared as pointer to const [constParameterPointer]
int sqlite3IdListIndex(IdList *pList, const char *zName){
                               ^
src\build.c:4864:10: style: Parameter 'pTable' can be declared as pointer to const [constParameterPointer]
  Token *pTable,      /* Table to append */
         ^
src\build.c:4865:10: style: Parameter 'pDatabase' can be declared as pointer to const [constParameterPointer]
  Token *pDatabase    /* Database of the table */
         ^
src\build.c:5055:10: style: Parameter 'pAlias' can be declared as pointer to const [constParameterPointer]
  Token *pAlias,          /* The right-hand side of the AS subexpression */
         ^
src\build.c:5076:12: style: Variable 'pToken' can be declared as pointer to const [constVariablePointer]
    Token *pToken = (ALWAYS(pDatabase) && pDatabase->z) ? pDatabase : pTable;
           ^
src\build.c:5114:64: style: Parameter 'pIndexedBy' can be declared as pointer to const [constParameterPointer]
void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){
                                                               ^
src\build.c:5279:53: style: Parameter 'pName' can be declared as pointer to const [constParameterPointer]
void sqlite3Savepoint(Parse *pParse, int op, Token *pName){
                                                    ^
src\build.c:5359:9: style: Variable 'pDb' can be declared as pointer to const [constVariablePointer]
    Db *pDb = &db->aDb[i];
        ^
src\build.c:5428:9: style: Parameter 'p4' can be declared as pointer to const [constParameterPointer]
  char *p4,         /* Error message */
        ^
src\build.c:5579:12: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
  CollSeq *pColl;             /* Collating sequence to be reindexed, or NULL */
           ^
src\build.c:5685:10: style: Parameter 'pName' can be declared as pointer to const [constParameterPointer]
  Token *pName,           /* Name of the common-table */
         ^
src\func.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 161 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\build.c:2189:10: warning: Size of pointer 'zExtra' used instead of size of its data. [pointerSize]
  memcpy(zExtra, pIdx->azColl, sizeof(char*)*pIdx->nColumn);
         ^
src\global.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\func.c:17:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\func.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\func.c:20:0: information: Include file: <math.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <math.h>
^
src\global.c:359:0: information: Include file: "opcodes.h" not found. [missingInclude]
#include "opcodes.h"
^
src\hash.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\lsm1\lsm_sorted.c:5013:15: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
              pDb->pFreelist = &freelist;
              ^
src\hash.c:16:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\lsm1\lsm_sorted.c:4064:13: warning: Identical inner 'if' condition is always true. [identicalInnerCondition]
      if( rc==LSM_OK ){
            ^
ext\lsm1\lsm_sorted.c:4063:11: note: outer condition: rc==0
    if( rc==LSM_OK && rtIsWrite(eType) ){
          ^
ext\lsm1\lsm_sorted.c:4064:13: note: identical inner condition: rc==0
      if( rc==LSM_OK ){
            ^
ext\lsm1\lsm_sorted.c:5375:11: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( rc==LSM_OK ){
          ^
ext\lsm1\lsm_sorted.c:5368:11: note: First condition
    if( rc==LSM_OK ){
          ^
ext\lsm1\lsm_sorted.c:5375:11: note: Second condition
    if( rc==LSM_OK ){
          ^
ext\lsm1\lsm_sorted.c:5214:13: style: Condition 'nMax<nRem' is always false [knownConditionTrueFalse]
    if( nMax<nRem ){
            ^
ext\lsm1\lsm_sorted.c:5188:12: note: nMax is assigned 'nPage' here.
  int nMax = nPage;               /* Maximum pages to write to disk */
           ^
ext\lsm1\lsm_sorted.c:5198:9: note: Assuming condition is false
  if( rc!=LSM_OK ) return rc;
        ^
ext\lsm1\lsm_sorted.c:5213:10: note: nMax is assigned '(int)((nMax)>((pDb->nAutockpt/nPgsz)-(int)(nUnsync-nSync))?((pDb->nAutockpt/nPgsz)-(int)(nUnsync-nSync)):(nMax))' here.
    nMax = (int)LSM_MIN(nMax, (pDb->nAutockpt/nPgsz) - (int)(nUnsync-nSync));
         ^
ext\lsm1\lsm_sorted.c:5189:12: note: nRem is assigned 'nPage' here.
  int nRem = nPage;
           ^
ext\lsm1\lsm_sorted.c:5214:13: note: Condition 'nMax<nRem' is always false
    if( nMax<nRem ){
            ^
ext\lsm1\lsm_sorted.c:5921:14: style: Condition 'i<nLeft' is always true [knownConditionTrueFalse]
        if( i<nLeft ){
             ^
ext\lsm1\lsm_sorted.c:5897:19: note: Assignment 'nLeft=0', assigned value is 0
      int nLeft = 0;
                  ^
ext\lsm1\lsm_sorted.c:5901:13: note: nLeft is incremented', new value is 1
      aLeft[nLeft++] = pSeg;
            ^
ext\lsm1\lsm_sorted.c:5921:14: note: Condition 'i<nLeft' is always true
        if( i<nLeft ){
             ^
ext\lsm1\lsm_sorted.c:5928:14: style: Condition 'i==0' is always true [knownConditionTrueFalse]
        if( i==0 ){
             ^
src\fkey.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_sorted.c:2582:13: style: The comparison 'rc == 0' is always true. [knownConditionTrueFalse]
  assert( rc==LSM_OK || (*ppVal==0 && *pnVal==0) );
            ^
ext\lsm1\lsm_sorted.c:2537:12: note: 'rc' is assigned value '0' here.
  int rc = LSM_OK;
           ^
ext\lsm1\lsm_sorted.c:2582:13: note: The comparison 'rc == 0' is always true.
  assert( rc==LSM_OK || (*ppVal==0 && *pnVal==0) );
            ^
ext\lsm1\lsm_sorted.c:4522:55: style: Same expression 'pNext' found multiple times in chain of '&&' operators. [duplicateExpression]
    if( pNext && pNext->pMerge==0 && pNext->lhs.iRoot && pNext
                                                      ^
ext\lsm1\lsm_sorted.c:5146:11: style: The comparison 'rc == 0' is always true. [knownConditionTrueFalse]
    if( rc==LSM_OK
          ^
ext\lsm1\lsm_sorted.c:5141:12: note: 'rc' is assigned value '0' here.
  int rc = LSM_OK;
           ^
ext\lsm1\lsm_sorted.c:5146:11: note: The comparison 'rc == 0' is always true.
    if( rc==LSM_OK
          ^
ext\lsm1\lsm_sorted.c:686:13: style: The scope of the variable 'iLoad' can be reduced. [variableScope]
    LsmPgno iLoad;
            ^
ext\lsm1\lsm_sorted.c:3608:9: style: The scope of the variable 'nByte' can be reduced. [variableScope]
    int nByte;                    /* Number of free bytes required */
        ^
ext\lsm1\lsm_sorted.c:3961:7: style: The scope of the variable 'nHdr' can be reduced. [variableScope]
  int nHdr;                       /* Space required for this record header */
      ^
ext\lsm1\lsm_sorted.c:4078:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                          /* Iterator variable */
      ^
ext\lsm1\lsm_sorted.c:4162:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
ext\lsm1\lsm_sorted.c:4177:13: style: The scope of the variable 'res' can be reduced. [variableScope]
        int res;
            ^
ext\lsm1\lsm_sorted.c:4642:9: style: The scope of the variable 'nPg' can be reduced. [variableScope]
    int nPg;
        ^
ext\lsm1\lsm_sorted.c:5141:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc = LSM_OK;
      ^
ext\lsm1\lsm_sorted.c:5475:11: style: The scope of the variable 'nSize' can be reduced. [variableScope]
  LsmPgno nSize = pSeg->nSize;
          ^
ext\lsm1\lsm_sorted.c:5687:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, j;                       /* Loop counters */
      ^
ext\lsm1\lsm_sorted.c:5687:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;                       /* Loop counters */
         ^
src\hash.c:192:15: style: The scope of the variable 'pEntry' can be reduced. [variableScope]
  struct _ht *pEntry;
              ^
ext\lsm1\lsm_sorted.c:341:19: style: Parameter 'aOut' can be declared as pointer to const [constParameterPointer]
int lsmGetU16(u8 *aOut){
                  ^
ext\lsm1\lsm_sorted.c:345:19: style: Parameter 'aOut' can be declared as pointer to const [constParameterPointer]
u32 lsmGetU32(u8 *aOut){
                  ^
ext\lsm1\lsm_sorted.c:352:19: style: Parameter 'aOut' can be declared as pointer to const [constParameterPointer]
u64 lsmGetU64(u8 *aOut){
                  ^
ext\lsm1\lsm_sorted.c:385:63: style: Parameter 'pData' can be declared as pointer to const [constParameterPointer]
static int sortedBlobSet(lsm_env *pEnv, LsmBlob *pBlob, void *pData, int nData){
                                                              ^
ext\lsm1\lsm_sorted.c:838:15: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
  MergeInput *p
              ^
ext\lsm1\lsm_sorted.c:1097:15: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  MergeInput *p = &pMerge->splitkey;
              ^
ext\lsm1\lsm_sorted.c:1118:10: style: Variable 'pMerge' can be declared as pointer to const [constVariablePointer]
  Merge *pMerge = pLevel->pMerge;
         ^
ext\lsm1\lsm_sorted.c:1174:70: style: Parameter 'pPtr' can be declared as pointer to const [constParameterPointer]
static int segmentPtrIgnoreSeparators(MultiCursor *pCsr, SegmentPtr *pPtr){
                                                                     ^
ext\lsm1\lsm_sorted.c:1579:10: style: Variable 'pNext' can be declared as pointer to const [constVariablePointer]
  Level *pNext = pLvl->pNext;
         ^
ext\lsm1\lsm_sorted.c:2337:60: style: Parameter 'pSnap' can be declared as pointer to const [constParameterPointer]
static int multiCursorAddTree(MultiCursor *pCsr, Snapshot *pSnap, int eTree){
                                                           ^
ext\lsm1\lsm_sorted.c:2987:35: style: Parameter 'pCsr' can be declared as pointer to const [constParameterPointer]
lsm_db *lsmMCursorDb(MultiCursor *pCsr){
                                  ^
ext\lsm1\lsm_sorted.c:3185:20: style: Variable 'aEntry' can be declared as pointer to const [constVariablePointer]
    FreelistEntry *aEntry = pCsr->pDb->pWorker->freelist.aEntry;
                   ^
ext\lsm1\lsm_sorted.c:3224:23: style: Variable 'pPtr' can be declared as pointer to const [constVariablePointer]
          SegmentPtr *pPtr = &pCsr->aPtr[iKey-CURSOR_DATA_SEGMENT];
                      ^
ext\lsm1\lsm_sorted.c:3583:9: style: Parameter 'pKey' can be declared as pointer to const [constParameterPointer]
  void *pKey,
        ^
ext\lsm1\lsm_sorted.c:3879:7: style: Parameter 'aWrite' can be declared as pointer to const [constParameterPointer]
  u8 *aWrite,                     /* Write data from this buffer */
      ^
ext\lsm1\lsm_sorted.c:3969:12: style: Variable 'pSeg' can be declared as pointer to const [constVariablePointer]
  Segment *pSeg;                  /* Segment being written */
           ^
ext\lsm1\lsm_sorted.c:4605:21: style: Variable 'pInput' can be declared as pointer to const [constVariablePointer]
        MergeInput *pInput = &pMerge->aInput[i];
                    ^
ext\lsm1\lsm_sorted.c:4956:14: style: Variable 'pTopLevel' can be declared as pointer to const [constVariablePointer]
      Level *pTopLevel = lsmDbSnapshotLevel(pDb->pWorker);
             ^
ext\lsm1\lsm_sorted.c:5169:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  Snapshot *p = pDb->pWorker;
            ^
ext\lsm1\lsm_sorted.c:5185:13: style: Variable 'pWorker' can be declared as pointer to const [constVariablePointer]
  Snapshot *pWorker;              /* Worker snapshot */
            ^
ext\lsm1\lsm_sorted.c:5474:50: style: Parameter 'pSeg' can be declared as pointer to const [constParameterPointer]
static char *segToString(lsm_env *pEnv, Segment *pSeg, int nMin){
                                                 ^
src\func.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_sorted.c:618:11: style: Variable 'aCell' is assigned a value that is never used. [unreadVariable]
    aCell += GETVARINT64(aCell, iRef);
          ^
ext\lsm1\lsm_sorted.c:3679:10: style: Variable 'iOff' is assigned a value that is never used. [unreadVariable]
    iOff += lsmVarintPut64(&aData[iOff], iKeyPg);
         ^
ext\lsm1\lsm_sorted.c:5574:13: style: Variable 'aCell' is assigned a value that is never used. [unreadVariable]
      aCell += lsmVarintGet64(aCell, &iRef);
            ^
ext\lsm1\lsm_sorted.c:5636:11: style: Variable 'aCell' is assigned a value that is never used. [unreadVariable]
    aCell += lsmVarintGet64(aCell, &iRef);
          ^
src\insert.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 146 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\json.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 149 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\legacy.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\loadext.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 158 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\sqlite3ext.h:20:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\loadext.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\insert.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\malloc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\malloc.c:16:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
src\main.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 193 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\json.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\malloc.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\main.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\malloc.c:431:70: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){
                                                                     ^
src\fkey.c:971:16: warning: The address of variable 'iCol' might be accessed at non-zero index. [objectIndex]
      if( aiCol[i]==pTab->iPKey ){
               ^
src\fkey.c:968:15: note: Address of variable taken here.
      aiCol = &iCol;
              ^
src\fkey.c:971:16: note: The address of variable 'iCol' might be accessed at non-zero index.
      if( aiCol[i]==pTab->iPKey ){
               ^
src\fkey.c:972:14: warning: The address of variable 'iCol' might be accessed at non-zero index. [objectIndex]
        aiCol[i] = -1;
             ^
src\fkey.c:968:15: note: Address of variable taken here.
      aiCol = &iCol;
              ^
src\fkey.c:972:14: note: The address of variable 'iCol' might be accessed at non-zero index.
        aiCol[i] = -1;
             ^
src\fkey.c:561:14: style: The scope of the variable 'pWInfo' can be reduced. [variableScope]
  WhereInfo *pWInfo;              /* Context used by sqlite3WhereXXX() */
             ^
src\fkey.c:193:9: style: Variable 'zKey' can be declared as pointer to const [constVariablePointer]
  char *zKey = pFKey->aCol[0].zCol;   /* Name of left-most parent key column */
        ^
src\fkey.c:255:17: style: Variable 'zIdxCol' can be declared as pointer to const [constVariablePointer]
          char *zIdxCol;                    /* Name of indexed column */
                ^
src\fkey.c:326:8: style: Parameter 'aiCol' can be declared as pointer to const [constParameterPointer]
  int *aiCol,           /* Map from parent key columns to child table columns */
       ^
src\fkey.c:708:12: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
    Table *pTab = sqliteHashData(k);
           ^
src\fkey.c:735:49: style: Parameter 'pName' can be declared as pointer to const [constParameterPointer]
void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){
                                                ^
src\fkey.c:799:10: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
  Table *pTab,                    /* Table being updated */
         ^
src\fkey.c:801:8: style: Parameter 'aChange' can be declared as pointer to const [constParameterPointer]
  int *aChange,                   /* Array indicating modified columns */
       ^
src\fkey.c:828:8: style: Parameter 'aChange' can be declared as pointer to const [constParameterPointer]
  int *aChange,
       ^
src\fkey.c:833:11: style: Variable 'zKey' can be declared as pointer to const [constVariablePointer]
    char *zKey = p->aCol[i].zCol;
          ^
src\fkey.c:837:17: style: Variable 'pCol' can be declared as pointer to const [constVariablePointer]
        Column *pCol = &pTab->aCol[iKey];
                ^
src\fkey.c:854:49: style: Parameter 'pFKey' can be declared as pointer to const [constParameterPointer]
static int isSetNullAction(Parse *pParse, FKey *pFKey){
                                                ^
src\fkey.c:857:14: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    Trigger *p = pTop->pTriggerPrg->pTrigger;
             ^
src\fkey.c:981:15: style: Variable 'zCol' can be declared as pointer to const [constVariablePointer]
        char *zCol = pTo->aCol[pIdx ? pIdx->aiColumn[i] : pTo->iPKey].zCnName;
              ^
src\fkey.c:1144:10: style: Parameter 'pParse' can be declared as pointer to const [constParameterPointer]
  Parse *pParse,                  /* Parse context */
         ^
src\fkey.c:1301:17: style: Variable 'pDflt' can be declared as pointer to const [constVariablePointer]
          Expr *pDflt;
                ^
ext\rtree\geopoly.c:176:9: error: syntax error [syntaxError]
    if( safe_isdigit(c) ) continue;
        ^
src\mem0.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\mem1.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\func.c:319:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
src\func.c:445:9: style: The scope of the variable 'zBuf' can be reduced. [variableScope]
  char *zBuf;
        ^
src\func.c:505:9: style: The scope of the variable 'z1' can be reduced. [variableScope]
  char *z1;
        ^
src\func.c:507:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
src\func.c:524:9: style: The scope of the variable 'z1' can be reduced. [variableScope]
  char *z1;
        ^
src\func.c:526:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
src\func.c:781:13: style: The scope of the variable 'bMatch' can be reduced. [variableScope]
        int bMatch;
            ^
src\func.c:1346:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
src\func.c:1584:7: style: The scope of the variable 'flags' can be reduced. [variableScope]
  int flags;                        /* 1: trimleft  2: trimright  3: trim */
      ^
src\func.c:1585:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                            /* Loop counter */
      ^
src\func.c:2350:12: style: The scope of the variable 'pDef' can be reduced. [variableScope]
  FuncDef *pDef;
           ^
src\func.c:485:12: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
  sqlite3 *db = sqlite3_context_db_handle(context);
           ^
src\func.c:915:12: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
  sqlite3 *db = sqlite3_context_db_handle(context);
           ^
src\func.c:983:12: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
  CollSeq *pColl = sqlite3GetFuncCollSeq(context);
           ^
src\func.c:1204:11: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
    char *z = strchr(&zIn[i],'\\');
          ^
src\func.c:1499:12: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
  sqlite3 *db = sqlite3_context_db_handle(context);
           ^
src\func.c:2012:11: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  SumCtx *p;
          ^
src\func.c:2026:11: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  SumCtx *p;
          ^
src\func.c:2112:14: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
    CollSeq *pColl = sqlite3GetFuncCollSeq(context);
             ^
src\func.c:2388:12: style: Variable 'pDef' can be declared as pointer to const [constVariablePointer]
  FuncDef *pDef;
           ^
src\func.c:2419:11: style: Variable 'zEscape' can be declared as pointer to const [constVariablePointer]
    char *zEscape;
          ^
src\mem1.c:215:3: error: Common realloc mistake: 'p' nulled but not freed upon failure [memleakOnRealloc]
  p = SQLITE_REALLOC(p, nByte+8 );
  ^
src\mem1.c:182:18: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  sqlite3_int64 *p;
                 ^
src\mem2.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\wasm\api\sqlite3-wasm.c:1537:19: style: Variable 'fileExisted' is assigned a value that is never used. [unreadVariable]
  int fileExisted = 0;
                  ^
ext\wasm\api\sqlite3-wasm.c:1535:7: style: Unused variable: rc [unusedVariable]
  int rc;
      ^
src\mem1.c:106:0: information: Include file: <malloc.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <malloc.h>
^
src\mem3.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\mem5.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\memdb.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\main.c:4326:38: warning: Assert statement modifies 'x'. [assignmentInAssert]
      assert( /*side-effects-ok*/ (x = va_arg(ap,int))!=0 );
                                     ^
src\main.c:4326:40: warning: Assert statement calls a function which may have desired side effects: 'va_arg'. [assertWithSideEffect]
      assert( /*side-effects-ok*/ (x = va_arg(ap,int))!=0 );
                                       ^
src\main.c:439:8: style: Operator '|' with one operand equal to zero is redundant. [badBitmaskCheck]
       | MASKBIT64( SQLITE_CONFIG_LOG )
       ^
src\memdb.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\main.c:4824:10: warning: Either the condition 'zFilename' is redundant or there is possible null pointer dereference: zFilename. [nullPointerRedundantCheck]
  return zFilename[0] ? zFilename : 0;
         ^
src\main.c:4820:10: note: Assuming that condition 'zFilename' is not redundant
  while( ALWAYS(zFilename) && zFilename[0] && (N--)>0 ){
         ^
src\main.c:4824:10: note: Null pointer dereference
  return zFilename[0] ? zFilename : 0;
         ^
src\main.c:4874:20: warning: Either the condition 'zFilename' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  return zFilename + 1;
                   ^
src\main.c:4870:10: note: Assuming that condition 'zFilename' is not redundant
  while( ALWAYS(zFilename) && zFilename[0] ){
         ^
src\main.c:4874:20: note: Null pointer addition
  return zFilename + 1;
                   ^
src\main.c:4140:22: style: Variable 'db->busyHandler.nBusy' is assigned an expression that holds the same value. [redundantAssignment]
      db->busyHandler.nBusy = nSave;
                     ^
src\main.c:4138:17: note: nSave is assigned 'db->busyHandler.nBusy' here.
      int nSave = db->busyHandler.nBusy;
                ^
src\main.c:4140:22: note: Variable 'db->busyHandler.nBusy' is assigned an expression that holds the same value.
      db->busyHandler.nBusy = nSave;
                     ^
src\main.c:886:42: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){
                                         ^
src\main.c:1108:49: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){
                                                ^
src\main.c:1136:42: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
sqlite3_int64 sqlite3_changes64(sqlite3 *db){
                                         ^
src\main.c:1152:48: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
sqlite3_int64 sqlite3_total_changes64(sqlite3 *db){
                                               ^
src\main.c:1210:13: style: Variable 'pSchema' can be declared as pointer to const [constVariablePointer]
    Schema *pSchema = db->aDb[i].pSchema;
            ^
src\main.c:3881:37: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
int sqlite3_get_autocommit(sqlite3 *db){
                                    ^
src\main.c:4425:16: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
      sqlite3 *db = va_arg(ap, sqlite3*);
               ^
autosetup\jimsh0.c:4679:9: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
        argc--;
        ^
autosetup\jimsh0.c:18216:23: warning: Opposite inner 'if' condition leads to a dead code block. [oppositeInnerCondition]
                if (i >= argc - 2) {
                      ^
autosetup\jimsh0.c:18187:19: note: outer condition: i<argc-2
    for (i = 1; i < argc - 2; i++) {
                  ^
autosetup\jimsh0.c:18216:23: note: opposite inner condition: i>=argc-2
                if (i >= argc - 2) {
                      ^
src\memjournal.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 146 configurations. Use --force to check all configurations. [toomanyconfigs]

^
autosetup\jimsh0.c:2378:17: style: Condition 'retval' is always true [knownConditionTrueFalse]
            if (retval) {
                ^
autosetup\jimsh0.c:2377:20: note: Assuming that condition 'retval>0' is not redundant
        if (retval > 0) {
                   ^
autosetup\jimsh0.c:2378:17: note: Condition 'retval' is always true
            if (retval) {
                ^
autosetup\jimsh0.c:4101:35: style: Condition 'n' is always true [knownConditionTrueFalse]
        if (pattern[0] == '\0' && n) {
                                  ^
autosetup\jimsh0.c:9172:13: style: Condition 'rangeLen' is always true [knownConditionTrueFalse]
        if (rangeLen) {
            ^
autosetup\jimsh0.c:9167:19: note: Assuming that condition '*firstPtr>*lastPtr' is not redundant
    if (*firstPtr > *lastPtr) {
                  ^
autosetup\jimsh0.c:9171:41: note: Assignment 'rangeLen=*lastPtr-*firstPtr+1', assigned value is greater than 0
        rangeLen = *lastPtr - *firstPtr + 1;
                                        ^
autosetup\jimsh0.c:9172:13: note: Condition 'rangeLen' is always true
        if (rangeLen) {
            ^
autosetup\jimsh0.c:19631:15: style: Condition 'count<0' is always false [knownConditionTrueFalse]
    if (count < 0)
              ^
autosetup\jimsh0.c:19620:21: note: Assignment 'count=1', assigned value is 1
    long i, count = 1;
                    ^
autosetup\jimsh0.c:19623:14: note: Assuming condition is false
    if (argc < 2) {
             ^
autosetup\jimsh0.c:19631:15: note: Condition 'count<0' is always false
    if (count < 0)
              ^
autosetup\jimsh0.c:19673:12: style: Condition 'us<1' is always true [knownConditionTrueFalse]
    if (us < 1) {
           ^
autosetup\jimsh0.c:19657:15: note: Assignment 'us=0', assigned value is 0
    long us = 0;
              ^
autosetup\jimsh0.c:19664:14: note: Assuming condition is false
    if (argc < 2) {
             ^
autosetup\jimsh0.c:19673:12: note: Condition 'us<1' is always true
    if (us < 1) {
           ^
autosetup\jimsh0.c:20900:21: style: Condition 'listPtr!=0' is always true [knownConditionTrueFalse]
        if (listPtr != 0 && listPtr != (Jim_Obj *)EOF) {
                    ^
autosetup\jimsh0.c:21170:21: style: Condition 'argc==3' is always true [knownConditionTrueFalse]
    } else if (argc == 3) {
                    ^
autosetup\jimsh0.c:21167:21: note: Assuming that condition 'argc==2' is not redundant
    } else if (argc == 2) {
                    ^
autosetup\jimsh0.c:21161:26: note: Assuming that condition 'argc>3' is not redundant
    if (argc < 1 || argc > 3) {
                         ^
autosetup\jimsh0.c:21170:21: note: Condition 'argc==3' is always true
    } else if (argc == 3) {
                    ^
autosetup\jimsh0.c:3396:5: warning: snprintf format string requires 0 parameters but 1 is given. [wrongPrintfScanfArgNum]
    snprintf(buf, sizeof(buf), hdlfmt, Jim_GetId(interp));
    ^
autosetup\jimsh0.c:20099:5: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    snprintf(buffer, sizeof(buffer), "%d entries in table, %d buckets", dict->len, dict->size);
    ^
autosetup\jimsh0.c:21485:11: warning: snprintf format string requires 2 parameters but 5 are given. [wrongPrintfScanfArgNum]
    len = snprintf(buf, len + 1, format, params[0], params[1], params[2], params[3], params[4]);
          ^
src\mutex.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\date.c:592:6: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
  rc = localtime_s(pTm, t);
     ^
src\memjournal.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:4006:12: style: Redundant assignment of 'offset' to itself. [selfAssignment]
    offset = utf8_index(source_str, offset);
           ^
autosetup\jimsh0.c:22126:47: style: Variable 'formatted_bytes' is reassigned a value before the old one has been used. [redundantAssignment]
            formatted_chars = formatted_bytes = strlen(num_buffer);
                                              ^
autosetup\jimsh0.c:22124:33: note: formatted_bytes is assigned
                formatted_bytes = snprintf(num_buffer, length + 1, spec, w);
                                ^
autosetup\jimsh0.c:22126:47: note: formatted_bytes is overwritten
            formatted_chars = formatted_bytes = strlen(num_buffer);
                                              ^
src\mutex_noop.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
autosetup\jimsh0.c:21663:9: style: 'continue' is redundant since it is the last statement in a loop. [redundantContinue]
        continue;
        ^
autosetup\jimsh0.c:22950:3: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
  break;
  ^
autosetup\jimsh0.c:10844:9: style: The scope of the variable 'err' can be reduced. [variableScope]
    int err;
        ^
autosetup\jimsh0.c:11734:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
autosetup\jimsh0.c:13083:14: style: The scope of the variable 'peturb' can be reduced. [variableScope]
    unsigned peturb = h;
             ^
autosetup\jimsh0.c:15700:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
autosetup\jimsh0.c:15928:18: style: The scope of the variable 'si' can be reduced. [variableScope]
    unsigned int si, sj, x;
                 ^
autosetup\jimsh0.c:15928:22: style: The scope of the variable 'sj' can be reduced. [variableScope]
    unsigned int si, sj, x;
                     ^
autosetup\jimsh0.c:17901:9: style: The scope of the variable 'result' can be reduced. [variableScope]
    int result = JIM_ERR;
        ^
autosetup\jimsh0.c:18655:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
autosetup\jimsh0.c:20862:15: style: The scope of the variable 'i' can be reduced. [variableScope]
    int outc, i;
              ^
autosetup\jimsh0.c:22416:6: style: The scope of the variable 'latest' can be reduced. [variableScope]
 int latest;
     ^
autosetup\jimsh0.c:23002:6: style: The scope of the variable 'temp' can be reduced. [variableScope]
 int temp;
     ^
autosetup\jimsh0.c:5395:123: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
            Jim_AppendStrings(interp, errStrObj, "child ", action, " by signal ", Jim_SignalId(WTERMSIG(waitStatus)), "\n", NULL);
                                                                                                                          ^
autosetup\jimsh0.c:6724:69: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
    Jim_SetResultFormatted(interp, "\"%#s\" isn't an array", argv[0], NULL);
                                                                    ^
autosetup\jimsh0.c:15148:85: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
                Jim_AppendStrings(interp, Jim_GetResult(interp), ": ", parser.errmsg, NULL);
                                                                                    ^
src\memjournal.c:194:7: style: The scope of the variable 'nWrite' can be reduced. [variableScope]
  int nWrite = iAmt;
      ^
src\memjournal.c:430:44: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
int sqlite3JournalIsInMemory(sqlite3_file *p){
                                           ^
autosetup\jimsh0.c:21327:83: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), prefix, tablePtrSorted[i], NULL);
                                                                                  ^
autosetup\jimsh0.c:21574:78: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), Jim_String(cmd), " ", NULL);
                                                                             ^
autosetup\jimsh0.c:21576:61: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
    Jim_AppendStrings(interp, Jim_GetResult(interp), ct->cmd, NULL);
                                                            ^
autosetup\jimsh0.c:21578:71: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), " ", ct->args, NULL);
                                                                      ^
autosetup\jimsh0.c:21586:58: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
    Jim_AppendStrings(interp, Jim_GetResult(interp), "\"", NULL);
                                                         ^
autosetup\jimsh0.c:21712:62: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), "\"", NULL);
                                                             ^
autosetup\jimsh0.c:10378:17: style: Local variable 'len' shadows outer variable [shadowVariable]
            int len;
                ^
autosetup\jimsh0.c:10350:9: note: Shadowed declaration
    int len, i;
        ^
autosetup\jimsh0.c:10378:17: note: Shadow variable
            int len;
                ^
autosetup\jimsh0.c:18613:13: style: Local variable 'i' shadows outer variable [shadowVariable]
        int i;
            ^
autosetup\jimsh0.c:18515:9: note: Shadowed declaration
    int i;
        ^
autosetup\jimsh0.c:18613:13: note: Shadow variable
        int i;
            ^
autosetup\jimsh0.c:19871:29: style: Local variable 'i' shadows outer variable [shadowVariable]
                        int i;
                            ^
autosetup\jimsh0.c:19761:9: note: Shadowed declaration
    int i;
        ^
autosetup\jimsh0.c:19871:29: note: Shadow variable
                        int i;
                            ^
ext\fts5\fts5_expr.c:2534:13: style: Variable 'zEnd' can be declared as pointer to const [constVariablePointer]
      char *zEnd = &zIn[p->nQueryTerm];
            ^
autosetup\jimsh0.c:2204:51: style: Parameter 'af' can be declared as pointer to const. However it seems that 'stdio_strerror' is a callback function, if 'af' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static const char *stdio_strerror(struct AioFile *af)
                                                  ^
autosetup\jimsh0.c:2213:5: note: You might need to cast the function pointer here
    stdio_strerror,
    ^
autosetup\jimsh0.c:2204:51: note: Parameter 'af' can be declared as pointer to const
static const char *stdio_strerror(struct AioFile *af)
                                                  ^
autosetup\jimsh0.c:2218:42: style: Parameter 'af' can be declared as pointer to const [constParameterPointer]
static void aio_set_nonblocking(AioFile *af, int nb)
                                         ^
autosetup\jimsh0.c:2271:29: style: Parameter 'af' can be declared as pointer to const [constParameterPointer]
static int aio_eof(AioFile *af)
                            ^
autosetup\jimsh0.c:2629:11: style: Variable 'nl' can be declared as pointer to const [constVariablePointer]
    char *nl = NULL;
          ^
autosetup\jimsh0.c:3552:20: style: Variable 'entryPtr' can be declared as pointer to const [constVariablePointer]
    struct dirent *entryPtr;
                   ^
autosetup\jimsh0.c:4437:68: style: Parameter 'resolved_path' can be declared as pointer to const [constParameterPointer]
static char *JimRealPath(const char *restrict path, char *restrict resolved_path, size_t len)
                                                                   ^
autosetup\jimsh0.c:6453:16: style: Variable 'tm' can be declared as pointer to const [constVariablePointer]
    struct tm *tm;
               ^
autosetup\jimsh0.c:7782:44: style: Parameter 'privdata' can be declared as pointer to const. However it seems that 'JimStringCopyHTKeyCompare' is a callback function, if 'privdata' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int JimStringCopyHTKeyCompare(void *privdata, const void *key1, const void *key2)
                                           ^
autosetup\jimsh0.c:7820:5: note: You might need to cast the function pointer here
    JimStringCopyHTKeyCompare,
    ^
autosetup\jimsh0.c:7782:44: note: Parameter 'privdata' can be declared as pointer to const
static int JimStringCopyHTKeyCompare(void *privdata, const void *key1, const void *key2)
                                           ^
autosetup\jimsh0.c:7837:29: style: Parameter 'stack' can be declared as pointer to const [constParameterPointer]
int Jim_StackLen(Jim_Stack *stack)
                            ^
autosetup\jimsh0.c:8640:79: style: Parameter 'pc' can be declared as pointer to const [constParameterPointer]
static Jim_Obj *JimParserGetTokenObj(Jim_Interp *interp, struct JimParserCtx *pc)
                                                                              ^
autosetup\jimsh0.c:8950:69: style: Parameter 'srcPtr' can be declared as pointer to const. However it seems that 'DupInterpolatedInternalRep' is a callback function, if 'srcPtr' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void DupInterpolatedInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)
                                                                    ^
autosetup\jimsh0.c:8940:5: note: You might need to cast the function pointer here
    DupInterpolatedInternalRep,
    ^
autosetup\jimsh0.c:8950:69: note: Parameter 'srcPtr' can be declared as pointer to const
static void DupInterpolatedInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)
                                                                    ^
autosetup\jimsh0.c:9932:16: style: Variable 'script' can be declared as pointer to const [constVariablePointer]
    ScriptObj *script = JimGetScript(interp, scriptObj);
               ^
autosetup\jimsh0.c:10264:50: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
Jim_Obj *Jim_MakeGlobalNamespaceName(Jim_Interp *interp, Jim_Obj *nameObjPtr)
                                                 ^
autosetup\jimsh0.c:10301:59: style: Parameter 'nameObjPtr' can be declared as pointer to const [constParameterPointer]
static void JimCreateCommand(Jim_Interp *interp, Jim_Obj *nameObjPtr, Jim_Cmd *cmd)
                                                          ^
autosetup\jimsh0.c:10459:48: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
static void JimUpdateProcNamespace(Jim_Interp *interp, Jim_Cmd *cmdPtr, Jim_Obj *nameObjPtr)
                                               ^
autosetup\jimsh0.c:10459:65: style: Parameter 'cmdPtr' can be declared as pointer to const [constParameterPointer]
static void JimUpdateProcNamespace(Jim_Interp *interp, Jim_Cmd *cmdPtr, Jim_Obj *nameObjPtr)
                                                                ^
autosetup\jimsh0.c:10459:82: style: Parameter 'nameObjPtr' can be declared as pointer to const [constParameterPointer]
static void JimUpdateProcNamespace(Jim_Interp *interp, Jim_Cmd *cmdPtr, Jim_Obj *nameObjPtr)
                                                                                 ^
autosetup\jimsh0.c:10782:58: style: Parameter 'nameObjPtr' can be declared as pointer to const [constParameterPointer]
static int JimSetNewVariable(Jim_HashTable *ht, Jim_Obj *nameObjPtr, Jim_VarVal *vv)
                                                         ^
autosetup\jimsh0.c:10787:64: style: Parameter 'nameObjPtr' can be declared as pointer to const [constParameterPointer]
static Jim_VarVal *JimFindVariable(Jim_HashTable *ht, Jim_Obj *nameObjPtr)
                                                               ^
autosetup\jimsh0.c:10796:57: style: Parameter 'nameObjPtr' can be declared as pointer to const [constParameterPointer]
static int JimUnsetVariable(Jim_HashTable *ht, Jim_Obj *nameObjPtr)
                                                        ^
autosetup\jimsh0.c:10917:20: style: Variable 'framePtr' can be declared as pointer to const [constVariablePointer]
    Jim_CallFrame *framePtr;
                   ^
autosetup\jimsh0.c:11236:66: style: Parameter 'srcPtr' can be declared as pointer to const. However it seems that 'DupDictSubstInternalRep' is a callback function, if 'srcPtr' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void DupDictSubstInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)
                                                                 ^
autosetup\jimsh0.c:8929:5: note: You might need to cast the function pointer here
    DupDictSubstInternalRep,
    ^
autosetup\jimsh0.c:11236:66: note: Parameter 'srcPtr' can be declared as pointer to const
static void DupDictSubstInternalRep(Jim_Interp *interp, Jim_Obj *srcPtr, Jim_Obj *dupPtr)
                                                                 ^
autosetup\jimsh0.c:11688:49: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
static Jim_Obj *JimProcForEvalFrame(Jim_Interp *interp, Jim_EvalFrame *frame)
                                                ^
autosetup\jimsh0.c:11781:33: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
int Jim_GetExitCode(Jim_Interp *interp)
                                ^
autosetup\jimsh0.c:12782:55: style: Parameter 'appendListPtr' can be declared as pointer to const [constParameterPointer]
static void ListAppendList(Jim_Obj *listPtr, Jim_Obj *appendListPtr)
                                                      ^
autosetup\jimsh0.c:15856:27: style: Variable 'descr' can be declared as pointer to const [constVariablePointer]
        ScanFmtPartDescr *descr = &(fmtObj->descr[i]);
                          ^
autosetup\jimsh0.c:17110:14: style: Variable 'cmdPtr' can be declared as pointer to const [constVariablePointer]
    Jim_Cmd *cmdPtr = (Jim_Cmd *)value;
             ^
autosetup\jimsh0.c:17185:24: style: Variable 'targetCallFrame' can be declared as pointer to const [constVariablePointer]
        Jim_CallFrame *targetCallFrame = JimGetCallFrameByInteger(interp, level);
                       ^
autosetup\jimsh0.c:20090:15: style: Variable 'dict' can be declared as pointer to const [constVariablePointer]
    Jim_Dict *dict;
              ^
autosetup\jimsh0.c:21433:25: style: Parameter 'objPtr' can be declared as pointer to const [constParameterPointer]
int Jim_IsDict(Jim_Obj *objPtr)
                        ^
autosetup\jimsh0.c:21438:25: style: Parameter 'objPtr' can be declared as pointer to const [constParameterPointer]
int Jim_IsList(Jim_Obj *objPtr)
                        ^
autosetup\jimsh0.c:21507:36: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
int Jim_PackageProvide(Jim_Interp *interp, const char *name, const char *ver, int flags)
                                   ^
autosetup\jimsh0.c:21524:36: style: Parameter 'interp' can be declared as pointer to const. However it seems that 'subcmd_null' is a callback function, if 'interp' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int subcmd_null(Jim_Interp *interp, int argc, Jim_Obj *const *argv)
                                   ^
autosetup\jimsh0.c:21531:20: note: You might need to cast the function pointer here
    "dummy", NULL, subcmd_null, 0, 0, JIM_MODFLAG_HIDDEN
                   ^
autosetup\jimsh0.c:21524:36: note: Parameter 'interp' can be declared as pointer to const
static int subcmd_null(Jim_Interp *interp, int argc, Jim_Obj *const *argv)
                                   ^
autosetup\jimsh0.c:23206:31: style: Parameter 'preg' can be declared as pointer to const [constParameterPointer]
static int reg_iseol(regex_t *preg, int ch)
                              ^
autosetup\jimsh0.c:23558:31: style: Parameter 'preg' can be declared as pointer to const [constParameterPointer]
static int regopsize(regex_t *preg, int p )
                              ^
autosetup\jimsh0.c:24233:43: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
void Jim_HistorySetCompletion(Jim_Interp *interp, Jim_Obj *completionCommandObj)
                                          ^
autosetup\jimsh0.c:24233:60: style: Parameter 'completionCommandObj' can be declared as pointer to const [constParameterPointer]
void Jim_HistorySetCompletion(Jim_Interp *interp, Jim_Obj *completionCommandObj)
                                                           ^
autosetup\jimsh0.c:24249:38: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
void Jim_HistorySetHints(Jim_Interp *interp, Jim_Obj *hintsCommandObj)
                                     ^
autosetup\jimsh0.c:24249:55: style: Parameter 'hintsCommandObj' can be declared as pointer to const [constParameterPointer]
void Jim_HistorySetHints(Jim_Interp *interp, Jim_Obj *hintsCommandObj)
                                                      ^
autosetup\jimsh0.c:24421:17: style: Variable 'orig_argv0' can be declared as pointer to const [constVariablePointer]
    char *const orig_argv0 = argv[0];
                ^
src\mutex_unix.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 152 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\mutex_unix.c:25:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
src\mutex_w32.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 164 configurations. Use --force to check all configurations. [toomanyconfigs]

^
autosetup\jimsh0.c:21485:42: warning: Uninitialized variable: params [uninitvar]
    len = snprintf(buf, len + 1, format, params[0], params[1], params[2], params[3], params[4]);
                                         ^
autosetup\jimsh0.c:21458:25: note: Assuming condition is false
    for (i = 0; i < len && n < 5; i++) {
                        ^
autosetup\jimsh0.c:21485:42: note: Uninitialized variable: params
    len = snprintf(buf, len + 1, format, params[0], params[1], params[2], params[3], params[4]);
                                         ^
src\expr.c:5421:11: style: The scope of the variable 'nextCase' can be reduced. [variableScope]
      int nextCase;                     /* GOTO label for next WHEN clause */
          ^
src\expr.c:6184:7: style: The scope of the variable 'iVar' can be reduced. [variableScope]
  int iVar;
      ^
src\expr.c:6185:18: style: The scope of the variable 'pL' can be reduced. [variableScope]
  sqlite3_value *pL, *pR = 0;
                 ^
src\expr.c:7243:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
autosetup\jimsh0.c:287:13: style: union member 'Anonymous0::intval' is never used. [unusedStructMember]
        int intval;
            ^
src\expr.c:146:19: style: Variable 'pList' can be declared as pointer to const [constVariablePointer]
        ExprList *pList = pExpr->x.pList;
                  ^
src\expr.c:328:12: style: Variable 'pColl1' can be declared as pointer to const [constVariablePointer]
  CollSeq *pColl1 = sqlite3ExprNNCollSeq(pParse, pE1);
           ^
src\expr.c:329:12: style: Variable 'pColl2' can be declared as pointer to const [constVariablePointer]
  CollSeq *pColl2 = sqlite3ExprNNCollSeq(pParse, pE2);
           ^
src\expr.c:461:9: style: Parameter 'pLeft' can be declared as pointer to const [constParameterPointer]
  Expr *pLeft,      /* The left operand */
        ^
src\expr.c:462:9: style: Parameter 'pRight' can be declared as pointer to const [constParameterPointer]
  Expr *pRight,     /* The right operand */
        ^
src\expr.c:1778:71: style: Parameter 'p' can be declared as pointer to const. However it seems that 'gatherSelectWindowsSelectCallback' is a callback function, if 'p' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int gatherSelectWindowsSelectCallback(Walker *pWalker, Select *p){
                                                                      ^
src\expr.c:1784:23: note: You might need to cast the function pointer here
  w.xSelectCallback = gatherSelectWindowsSelectCallback;
                      ^
src\expr.c:1778:71: note: Parameter 'p' can be declared as pointer to const
static int gatherSelectWindowsSelectCallback(Walker *pWalker, Select *p){
                                                                      ^
src\expr.c:1819:9: style: Variable 'pPriorSelectColOld' can be declared as pointer to const [constVariablePointer]
  Expr *pPriorSelectColOld = 0;
        ^
src\expr.c:2237:13: style: Parameter 'pEList' can be declared as pointer to const [constParameterPointer]
  ExprList *pEList,
            ^
src\expr.c:2279:12: style: Variable 'pExpr' can be declared as pointer to const [constVariablePointer]
     Expr *pExpr = pList->a[i].pExpr;
           ^
src\expr.c:2390:9: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
  Expr *pExpr
        ^
src\expr.c:2394:12: style: Variable 'pDef' can be declared as pointer to const [constVariablePointer]
  FuncDef *pDef;     /* The function */
           ^
src\expr.c:2578:65: style: Parameter 'pSelect' can be declared as pointer to const. However it seems that 'exprSelectWalkTableConstant' is a callback function, if 'pSelect' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int exprSelectWalkTableConstant(Walker *pWalker, Select *pSelect){
                                                                ^
src\expr.c:2603:25: note: You might need to cast the function pointer here
    w.xSelectCallback = exprSelectWalkTableConstant;
                        ^
src\expr.c:2578:65: note: Parameter 'pSelect' can be declared as pointer to const
static int exprSelectWalkTableConstant(Walker *pWalker, Select *pSelect){
                                                                ^
src\expr.c:2703:11: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    Expr *p = pGroupBy->a[i].pExpr;
          ^
src\expr.c:2705:16: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
      CollSeq *pColl = sqlite3ExprNNCollSeq(pWalker->pParse, p);
               ^
src\expr.c:2982:10: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Table *pTab;
         ^
src\expr.c:3008:11: style: Variable 'pRes' can be declared as pointer to const [constVariablePointer]
    Expr *pRes = pEList->a[i].pExpr;
          ^
src\expr.c:3161:15: style: Variable 'pEList' can be declared as pointer to const [constVariablePointer]
    ExprList *pEList = pX->x.pSelect->pEList;
              ^
src\expr.c:3212:15: style: Variable 'pLhs' can be declared as pointer to const [constVariablePointer]
        Expr *pLhs = sqlite3VectorFieldSubexpr(pX->pLeft, i);
              ^
src\expr.c:3255:19: style: Variable 'pLhs' can be declared as pointer to const [constVariablePointer]
            Expr *pLhs = sqlite3VectorFieldSubexpr(pX->pLeft, i);
                  ^
src\expr.c:3256:19: style: Variable 'pRhs' can be declared as pointer to const [constVariablePointer]
            Expr *pRhs = pEList->a[i].pExpr;
                  ^
src\expr.c:3257:22: style: Variable 'pReq' can be declared as pointer to const [constVariablePointer]
            CollSeq *pReq = sqlite3BinaryCompareCollSeq(pParse, pLhs, pRhs);
                     ^
src\expr.c:3365:11: style: Variable 'pSelect' can be declared as pointer to const [constVariablePointer]
  Select *pSelect = ExprUseXSelect(pExpr) ? pExpr->x.pSelect : 0;
          ^
src\expr.c:3373:13: style: Variable 'pA' can be declared as pointer to const [constVariablePointer]
      Expr *pA = sqlite3VectorFieldSubexpr(pLeft, i);
            ^
src\expr.c:3413:49: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
void sqlite3VectorErrorMsg(Parse *pParse, Expr *pExpr){
                                                ^
src\expr.c:3433:14: style: Parameter 'pNewSig' can be declared as pointer to const [constParameterPointer]
  SubrtnSig *pNewSig      /* Signature for the IN operator */
             ^
src\expr.c:3435:17: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
  VdbeOp *pOp, *pEnd;
                ^
src\expr.c:3436:14: style: Variable 'pSig' can be declared as pointer to const [constVariablePointer]
  SubrtnSig *pSig;
             ^
src\expr.c:3600:15: style: Variable 'pEList' can be declared as pointer to const [constVariablePointer]
    ExprList *pEList = pSelect->pEList;
              ^
src\expr.c:3645:15: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
        Expr *p = sqlite3VectorFieldSubexpr(pLeft, i);
              ^
src\expr.c:4054:11: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    Expr *p = sqlite3VectorFieldSubexpr(pExpr->pLeft, i);
          ^
src\expr.c:4126:11: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    Expr *p;
          ^
src\expr.c:4514:13: style: Variable 'pA1' can be declared as pointer to const [constVariablePointer]
      Expr *pA1;
            ^
src\expr.c:4567:12: style: Variable 'pDef' can be declared as pointer to const [constVariablePointer]
  FuncDef *pDef;
           ^
src\expr.c:4681:55: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
static int exprPartidxExprLookup(Parse *pParse, Expr *pExpr, int iTarget){
                                                      ^
src\expr.c:4765:16: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
        Table *pTab = pCol->pTab;
               ^
src\expr.c:4909:13: style: Variable 'zBlob' can be declared as pointer to const [constVariablePointer]
      char *zBlob;
            ^
src\expr.c:5070:16: style: Variable 'pInfo' can be declared as pointer to const [constVariablePointer]
      AggInfo *pInfo = pExpr->pAggInfo;
               ^
src\expr.c:5367:16: style: Variable 'pAggInfo' can be declared as pointer to const [constVariablePointer]
      AggInfo *pAggInfo = pExpr->pAggInfo;
               ^
src\expr.c:5427:13: style: Variable 'pX' can be declared as pointer to const [constVariablePointer]
      Expr *pX;                         /* The X expression */
            ^
src\expr.c:5631:11: style: Variable 'pX' can be declared as pointer to const [constVariablePointer]
    Expr *pX = sqlite3ExprSkipCollateAndLikely(pExpr);
          ^
src\expr.c:6153:49: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
void sqlite3ExprIfFalseDup(Parse *pParse, Expr *pExpr, int dest,int jumpIfNull){
                                                ^
src\expr.c:6344:11: style: Variable 'pExprA' can be declared as pointer to const [constVariablePointer]
    Expr *pExprA = pA->a[i].pExpr;
          ^
src\expr.c:6345:11: style: Variable 'pExprB' can be declared as pointer to const [constVariablePointer]
    Expr *pExprB = pB->a[i].pExpr;
          ^
src\expr.c:6388:17: style: Variable 'pList' can be declared as pointer to const [constVariablePointer]
      ExprList *pList;
                ^
src\expr.c:6445:39: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
static int sqlite3ExprIsNotTrue(Expr *pExpr){
                                      ^
src\expr.c:6652:13: style: Variable 'pLeft' can be declared as pointer to const [constVariablePointer]
      Expr *pLeft = pExpr->pLeft;
            ^
src\expr.c:6653:13: style: Variable 'pRight' can be declared as pointer to const [constVariablePointer]
      Expr *pRight = pExpr->pRight;
            ^
src\expr.c:6741:48: style: Parameter 'pExpr' can be declared as pointer to const. However it seems that 'exprIdxCover' is a callback function, if 'pExpr' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int exprIdxCover(Walker *pWalker, Expr *pExpr){
                                               ^
src\expr.c:6772:21: note: You might need to cast the function pointer here
  w.xExprCallback = exprIdxCover;
                    ^
src\expr.c:6741:48: note: Parameter 'pExpr' can be declared as pointer to const
static int exprIdxCover(Walker *pWalker, Expr *pExpr){
                                               ^
src\expr.c:6819:12: style: Variable 'pSrc' can be declared as pointer to const [constVariablePointer]
  SrcList *pSrc = pSelect->pSrc;
           ^
src\expr.c:6834:52: style: Parameter 'pExpr' can be declared as pointer to const. However it seems that 'exprRefToSrcList' is a callback function, if 'pExpr' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int exprRefToSrcList(Walker *pWalker, Expr *pExpr){
                                                   ^
src\expr.c:6877:21: note: You might need to cast the function pointer here
  w.xExprCallback = exprRefToSrcList;
                    ^
src\expr.c:6834:52: note: Parameter 'pExpr' can be declared as pointer to const
static int exprRefToSrcList(Walker *pWalker, Expr *pExpr){
                                                   ^
src\expr.c:7039:13: style: Variable 'pE' can be declared as pointer to const [constVariablePointer]
      Expr *pE = pTerm->pExpr;
            ^
src\expr.c:7169:25: style: Variable 'pOBList' can be declared as pointer to const [constVariablePointer]
              ExprList *pOBList;
                        ^
ext\lsm1\lsm_tree.c:415:41: style: Parameter 'pTree' can be declared as pointer to const [constParameterPointer]
void assert_tree_looks_ok(int rc, Tree *pTree){
                                        ^
autosetup\jimsh0.c:380:11: style: union member 'Anonymous1::twoPtrValue' is never used. [unusedStructMember]
        } twoPtrValue;
          ^
autosetup\jimsh0.c:378:19: style: struct member 'Anonymous2::ptr1' is never used. [unusedStructMember]
            void *ptr1;
                  ^
src\notify.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
autosetup\jimsh0.c:379:19: style: struct member 'Anonymous2::ptr2' is never used. [unusedStructMember]
            void *ptr2;
                  ^
src\os.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
autosetup\jimsh0.c:414:27: style: struct member 'Anonymous8::id' is never used. [unusedStructMember]
            unsigned long id;
                          ^
autosetup\jimsh0.c:415:35: style: struct member 'Anonymous8::refPtr' is never used. [unusedStructMember]
            struct Jim_Reference *refPtr;
                                  ^
src\os.c:206:36: style: Parameter 'id' can be declared as pointer to const [constParameterPointer]
int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){
                                   ^
src\os.c:206:56: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){
                                                       ^
src\os.c:386:36: style: Parameter 'pVfs' can be declared as pointer to const [constParameterPointer]
static void vfsUnlink(sqlite3_vfs *pVfs){
                                   ^
autosetup\jimsh0.c:468:17: style: struct member 'Jim_ObjType::name' is never used. [unusedStructMember]
    const char *name;
                ^
autosetup\jimsh0.c:472:9: style: struct member 'Jim_ObjType::flags' is never used. [unusedStructMember]
    int flags;
        ^
src\os_kv.c:17:0: information: Include file: <sqliteInt.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sqliteInt.h>
^
src\os_kv.c:165:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
src\os_kv.c:166:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
src\os_kv.c:167:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
src\os_kv.c:953:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/time.h>
^
autosetup\jimsh0.c:493:14: style: struct member 'Jim_CallFrame::unused_fileNameObj' is never used. [unusedStructMember]
    Jim_Obj *unused_fileNameObj;
             ^
autosetup\jimsh0.c:494:9: style: struct member 'Jim_CallFrame::unused_line' is never used. [unusedStructMember]
    int unused_line;
        ^
src\os_kv.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\os_unix.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 218 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\os_unix.c:90:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>   /* amalgamator: keep */
^
src\os_unix.c:91:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>    /* amalgamator: keep */
^
src\os_unix.c:92:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
src\os_unix.c:93:0: information: Include file: <sys/ioctl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/ioctl.h>
^
src\os_unix.c:94:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>      /* amalgamator: keep */
^
src\os_unix.c:95:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
src\os_unix.c:96:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/time.h>    /* amalgamator: keep */
^
src\os_unix.c:97:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
src\os_unix.c:100:0: information: Include file: <sys/mman.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <sys/mman.h>
^
src\os_unix.c:160:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <pthread.h>
^
src\os_unix.c:6742:0: information: Include file: <dlfcn.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <dlfcn.h>
^
src\mutex_noop.c:90:24: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  sqlite3_debug_mutex *p = (sqlite3_debug_mutex*)pX;
                       ^
src\mutex_noop.c:94:24: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  sqlite3_debug_mutex *p = (sqlite3_debug_mutex*)pX;
                       ^
src\os_kv.c:401:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
src\os_kv.c:692:19: style: Checking if unsigned expression 'pFile->nJrnl' is less than zero. [unsignedLessThanZero]
  if( pFile->nJrnl<=0 ){
                  ^
src\os_kv.c:711:38: style: Parameter 'pProtoFile' can be declared as pointer to const. However it seems that 'kvvfsSyncDb' is a callback function, if 'pProtoFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int kvvfsSyncDb(sqlite3_file *pProtoFile, int flags){
                                     ^
src\os_kv.c:124:3: note: You might need to cast the function pointer here
  kvvfsSyncDb,                    /* xSync */
  ^
src\os_kv.c:711:38: note: Parameter 'pProtoFile' can be declared as pointer to const
static int kvvfsSyncDb(sqlite3_file *pProtoFile, int flags){
                                     ^
src\os_kv.c:719:14: style: Variable 'pFile' can be declared as pointer to const [constVariablePointer]
  KVVfsFile *pFile = (KVVfsFile *)pProtoFile;
             ^
src\os_kv.c:774:47: style: Parameter 'pProtoFile' can be declared as pointer to const. However it seems that 'kvvfsFileControlJrnl' is a callback function, if 'pProtoFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int kvvfsFileControlJrnl(sqlite3_file *pProtoFile, int op, void *pArg){
                                              ^
src\os_kv.c:153:3: note: You might need to cast the function pointer here
  kvvfsFileControlJrnl,           /* xFileControl */
  ^
src\os_kv.c:774:47: note: Parameter 'pProtoFile' can be declared as pointer to const
static int kvvfsFileControlJrnl(sqlite3_file *pProtoFile, int op, void *pArg){
                                              ^
src\os_kv.c:774:73: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'kvvfsFileControlJrnl' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int kvvfsFileControlJrnl(sqlite3_file *pProtoFile, int op, void *pArg){
                                                                        ^
src\os_kv.c:153:3: note: You might need to cast the function pointer here
  kvvfsFileControlJrnl,           /* xFileControl */
  ^
src\os_kv.c:774:73: note: Parameter 'pArg' can be declared as pointer to const
static int kvvfsFileControlJrnl(sqlite3_file *pProtoFile, int op, void *pArg){
                                                                        ^
src\os_kv.c:795:42: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'kvvfsSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int kvvfsSectorSize(sqlite3_file *pFile){
                                         ^
src\os_kv.c:154:3: note: You might need to cast the function pointer here
  kvvfsSectorSize,                /* xSectorSize */
  ^
src\os_kv.c:795:42: note: Parameter 'pFile' can be declared as pointer to const
static int kvvfsSectorSize(sqlite3_file *pFile){
                                         ^
src\os_kv.c:802:53: style: Parameter 'pProtoFile' can be declared as pointer to const. However it seems that 'kvvfsDeviceCharacteristics' is a callback function, if 'pProtoFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int kvvfsDeviceCharacteristics(sqlite3_file *pProtoFile){
                                                    ^
src\os_kv.c:155:3: note: You might need to cast the function pointer here
  kvvfsDeviceCharacteristics,     /* xDeviceCharacteristics */
  ^
src\os_kv.c:802:53: note: Parameter 'pProtoFile' can be declared as pointer to const
static int kvvfsDeviceCharacteristics(sqlite3_file *pProtoFile){
                                                    ^
src\os_kv.c:922:39: style: Parameter 'pVfs' can be declared as pointer to const. However it seems that 'kvvfsDlOpen' is a callback function, if 'pVfs' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void *kvvfsDlOpen(sqlite3_vfs *pVfs, const char *zPath){
                                      ^
src\os_kv.c:105:3: note: You might need to cast the function pointer here
  kvvfsDlOpen,                    /* xDlOpen */
  ^
src\os_kv.c:922:39: note: Parameter 'pVfs' can be declared as pointer to const
static void *kvvfsDlOpen(sqlite3_vfs *pVfs, const char *zPath){
                                      ^
src\os_kv.c:939:36: style: Parameter 'pVfs' can be declared as pointer to const. However it seems that 'kvvfsSleep' is a callback function, if 'pVfs' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int kvvfsSleep(sqlite3_vfs *pVfs, int nMicro){
                                   ^
src\os_kv.c:110:3: note: You might need to cast the function pointer here
  kvvfsSleep,                     /* xSleep */
  ^
src\os_kv.c:939:36: note: Parameter 'pVfs' can be declared as pointer to const
static int kvvfsSleep(sqlite3_vfs *pVfs, int nMicro){
                                   ^
src\os_kv.c:584:16: portability: 'zBuf' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
    memset(zBuf+n, 0, iAmt-n);
               ^
src\os_win.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 200 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\os_unix.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:663:14: style: struct member 'Jim_Reference::objPtr' is never used. [unusedStructMember]
    Jim_Obj *objPtr;
             ^
autosetup\jimsh0.c:664:14: style: struct member 'Jim_Reference::finalizerCmdNamePtr' is never used. [unusedStructMember]
    Jim_Obj *finalizerCmdNamePtr;
             ^
autosetup\jimsh0.c:665:10: style: struct member 'Jim_Reference::tag' is never used. [unusedStructMember]
    char tag[JIM_REFERENCE_TAGLEN+1];
         ^
src\pager.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 149 configurations. Use --force to check all configurations. [toomanyconfigs]

^
autosetup\jimsh0.c:2134:11: style: struct member 'JimAioFopsType::verify' is never used. [unusedStructMember]
    int (*verify)(struct AioFile *af);
          ^
src\pcache.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 146 configurations. Use --force to check all configurations. [toomanyconfigs]

^
autosetup\jimsh0.c:5418:9: style: struct member 'WaitInfo::status' is never used. [unusedStructMember]
    int status;
        ^
src\pcache.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
autosetup\jimsh0.c:11435:24: style: union member 'Anonymous22::s' is never used. [unusedStructMember]
        unsigned short s;
                       ^
src\pcache.c:832:35: style: Parameter 'pCache' can be declared as pointer to const [constParameterPointer]
i64 sqlite3PcacheRefCount(PCache *pCache){
                                  ^
src\pcache.c:839:38: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
i64 sqlite3PcachePageRefcount(PgHdr *p){
                                     ^
src\pcache.c:919:34: style: Parameter 'pCache' can be declared as pointer to const [constParameterPointer]
int sqlite3PCacheIsDirty(PCache *pCache){
                                 ^
src\pager.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\mutex_w32.c:93:3: error: syntax error [syntaxError]
  MemoryBarrier();
  ^
src\insert.c:461:7: style: The scope of the variable 'memId' can be reduced. [variableScope]
  int memId;                 /* Register holding max rowid */
      ^
src\insert.c:720:19: style: The scope of the variable 'pSubq' can be reduced. [variableScope]
        Subquery *pSubq;
                  ^
src\insert.c:234:11: style: Variable 'pVTab' can be declared as pointer to const [constVariablePointer]
  VTable *pVTab = IsVirtual(pTab) ? sqlite3GetVTable(p->db, pTab) : 0;
          ^
src\insert.c:266:55: style: Parameter 'pExpr' can be declared as pointer to const. However it seems that 'exprColumnFlagUnion' is a callback function, if 'pExpr' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int exprColumnFlagUnion(Walker *pWalker, Expr *pExpr){
                                                      ^
src\insert.c:341:21: note: You might need to cast the function pointer here
  w.xExprCallback = exprColumnFlagUnion;
                    ^
src\insert.c:266:55: note: Parameter 'pExpr' can be declared as pointer to const
static int exprColumnFlagUnion(Walker *pWalker, Expr *pExpr){
                                                      ^
src\insert.c:418:12: style: Variable 'pSeqTab' can be declared as pointer to const [constVariablePointer]
    Table *pSeqTab = pParse->db->aDb[iDb].pSchema->pSeqTab;
           ^
src\insert.c:616:11: style: Variable 'pExpr' can be declared as pointer to const [constVariablePointer]
    Expr *pExpr = pRow->a[ii].pExpr;
          ^
src\insert.c:1510:15: style: Variable 'pIpk' can be declared as pointer to const [constVariablePointer]
        Expr *pIpk = pList->a[ipkColumn].pExpr;
              ^
src\insert.c:1686:59: style: Parameter 'pExpr' can be declared as pointer to const. However it seems that 'checkConstraintExprNode' is a callback function, if 'pExpr' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int checkConstraintExprNode(Walker *pWalker, Expr *pExpr){
                                                          ^
src\insert.c:1723:21: note: You might need to cast the function pointer here
  w.xExprCallback = checkConstraintExprNode;
                    ^
src\insert.c:1686:59: note: Parameter 'pExpr' can be declared as pointer to const
static int checkConstraintExprNode(Walker *pWalker, Expr *pExpr){
                                                          ^
autosetup\jimsh0.c:2498:13: style: Variable 'argv' is assigned a value that is never used. [unreadVariable]
        argv++;
            ^
src\insert.c:1895:8: style: Parameter 'aRegIdx' can be declared as pointer to const [constParameterPointer]
  int *aRegIdx,        /* Use register aRegIdx[i] for index i.  0 for unused */
       ^
src\insert.c:2552:19: style: Variable 'p4' can be declared as pointer to const [constVariablePointer]
            char *p4 = (char*)sqlite3LocateCollSeq(pParse, pPk->azColl[i]);
                  ^
src\insert.c:2785:8: style: Parameter 'aRegIdx' can be declared as pointer to const [constParameterPointer]
  int *aRegIdx,       /* Register used by each index.  0 for unused indices */
       ^
autosetup\jimsh0.c:3327:13: style: Variable 'mode' is assigned a value that is never used. [unreadVariable]
        mode++;
            ^
src\insert.c:2873:7: style: Parameter 'aToOpen' can be declared as pointer to const [constParameterPointer]
  u8 *aToOpen,     /* If not NULL: boolean for each table and index */
      ^
src\insert.c:3170:13: style: Variable 'pDestExpr' can be declared as pointer to const [constVariablePointer]
      Expr *pDestExpr = sqlite3ColumnExpr(pDest, pDestCol);
            ^
src\insert.c:3171:13: style: Variable 'pSrcExpr' can be declared as pointer to const [constVariablePointer]
      Expr *pSrcExpr = sqlite3ColumnExpr(pSrc, pSrcCol);
            ^
autosetup\jimsh0.c:4679:13: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
        argc--;
            ^
src\pcache1.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
autosetup\jimsh0.c:17901:16: style: Variable 'result' is assigned a value that is never used. [unreadVariable]
    int result = JIM_ERR;
               ^
autosetup\jimsh0.c:19912:20: style: Variable 'idx' is assigned a value that is never used. [unreadVariable]
                idx++;
                   ^
src\os_unix.c:6478:7: style: The if condition is the same as the previous if condition [duplicateCondition]
  if( isDelete )                ctrlFlags |= UNIXFILE_DELETE;
      ^
src\os_unix.c:6444:7: note: First condition
  if( isDelete ){
      ^
src\os_unix.c:6478:7: note: Second condition
  if( isDelete )                ctrlFlags |= UNIXFILE_DELETE;
      ^
src\notify.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src\os_unix.c:3922:11: style: The scope of the variable 'nWrite' can be reduced. [variableScope]
      int nWrite = 0;             /* Number of bytes written by seekAndWrite */
          ^
src\os_unix.c:6023:7: style: The scope of the variable 'iLimit' can be reduced. [variableScope]
  int iLimit = 0;
      ^
src\os_unix.c:6822:13: style: The scope of the variable 'got' can be reduced. [variableScope]
    int fd, got;
            ^
src\os_unix.c:1339:36: style: Parameter 'pFile' can be declared as pointer to const [constParameterPointer]
static void robust_close(unixFile *pFile, int h, int lineno){
                                   ^
src\prepare.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\pragma.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 153 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\pragma.c:31:0: information: Include file: "pragma.h" not found. [missingInclude]
#include "pragma.h"
^
src\printf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 150 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\os_unix.c:954:25: style: struct member 'vxworksFileId::pNext' is never used. [unusedStructMember]
  struct vxworksFileId *pNext;  /* Next in a list of them all */
                        ^
src\os_unix.c:955:7: style: struct member 'vxworksFileId::nRef' is never used. [unusedStructMember]
  int nRef;                     /* Number of references to this one */
      ^
src\os_unix.c:956:7: style: struct member 'vxworksFileId::nName' is never used. [unusedStructMember]
  int nName;                    /* Length of the zCanonicalName[] string */
      ^
src\os_unix.c:957:9: style: struct member 'vxworksFileId::zCanonicalName' is never used. [unusedStructMember]
  char *zCanonicalName;         /* Canonical filename */
        ^
src\pcache1.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\os_unix.c:4372:6: style: struct member 'unixShm::hasMutex' is never used. [unusedStructMember]
  u8 hasMutex;               /* True if holding the unixShmNode->pShmMutex */
     ^
src\os_unix.c:4373:6: style: struct member 'unixShm::id' is never used. [unusedStructMember]
  u8 id;                     /* Id of this connection within its unixShmNode */
     ^
src\os_unix.c:3922:18: style: Variable 'nWrite' is assigned a value that is never used. [unreadVariable]
      int nWrite = 0;             /* Number of bytes written by seekAndWrite */
                 ^
src\prepare.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\printf.c:180:2: information: Limiting ValueFlow analysis in function 'sqlite3_str_vappendf' since it is too complex. Please specify --check-level=exhaustive to perform full analysis. [checkLevelNormal]
){
 ^
src\printf.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\pragma.c:415:2: information: Limiting ValueFlow analysis in function 'sqlite3Pragma' since it is too complex. Please specify --check-level=exhaustive to perform full analysis. [checkLevelNormal]
){
 ^
src\pragma.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\pcache1.c:538:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  u32 i;
      ^
src\pcache1.c:814:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
src\pcache1.c:518:48: style: Parameter 'pCache' can be declared as pointer to const [constParameterPointer]
static int pcache1UnderMemoryPressure(PCache1 *pCache){
                                               ^
src\pcache1.c:902:14: style: Variable 'pOther' can be declared as pointer to const [constVariablePointer]
    PCache1 *pOther;
             ^
src\os_win.h:21:0: information: Include file: "windows.h" not found. [missingInclude]
#include "windows.h"
^
src\os_win.c:1550:7: error: syntax error [syntaxError]
  if( osInterlockedCompareExchange(&sqlite3_os_type, 0, 0)==0 ){
      ^
src\random.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\resolve.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\rowset.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\random.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\select.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 154 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\pragma.c:2163:9: style: 'continue' is redundant since it is the last statement in a loop. [redundantContinue]
        continue;
        ^
src\pragma.c:312:26: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int upr, lwr, mid = 0, rc;
                         ^
src\pragma.c:550:13: style: The scope of the variable 'aOp' can be reduced. [variableScope]
    VdbeOp *aOp;
            ^
src\pragma.c:1401:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
src\pragma.c:1681:12: style: Variable 'pObjTab' can be declared as pointer to const [constVariablePointer]
    Table *pObjTab = 0;     /* Check only this one table, if not NULL */
           ^
src\pragma.c:1870:19: style: Variable 'zErr' can be declared as pointer to const [constVariablePointer]
            char *zErr;
                  ^
src\pragma.c:1897:17: style: Variable 'zErr' can be declared as pointer to const [constVariablePointer]
          char *zErr;
                ^
src\pragma.c:2024:19: style: Variable 'zErr' can be declared as pointer to const [constVariablePointer]
            char *zErr;
                  ^
src\pragma.c:2141:23: style: Variable 'pVTab' can be declared as pointer to const [constVariablePointer]
        sqlite3_vtab *pVTab;
                      ^
src\pragma.c:2491:13: style: Variable 'pSchema' can be declared as pointer to const [constVariablePointer]
    Schema *pSchema;       /* The current schema */
            ^
src\pragma.c:2495:11: style: Variable 'zSubSql' can be declared as pointer to const [constVariablePointer]
    char *zSubSql;         /* SQL statement for the OP_SqlExec opcode */
          ^
src\pragma.c:2787:9: style: Parameter 'pAux' can be declared as pointer to const. However it seems that 'pragmaVtabConnect' is a callback function, if 'pAux' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void *pAux,
        ^
src\pragma.c:3033:3: note: You might need to cast the function pointer here
  pragmaVtabConnect,           /* xConnect - connect to an existing table */
  ^
src\pragma.c:2787:9: note: Parameter 'pAux' can be declared as pointer to const
  void *pAux,
        ^
src\pragma.c:2861:15: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  PragmaVtab *pTab = (PragmaVtab*)tab;
              ^
src\pragma.c:2998:21: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  PragmaVtabCursor *pCsr = (PragmaVtabCursor*)pVtabCursor;
                    ^
src\pragma.c:3011:15: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  PragmaVtab *pTab = (PragmaVtab*)(pVtabCursor->pVtab);
              ^
src\pragma.c:3024:21: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  PragmaVtabCursor *pCsr = (PragmaVtabCursor*)pVtabCursor;
                    ^
src\prepare.c:698:3: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
  db->pParse = &sParse;
  ^
src\rowset.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\prepare.c:850:4: warning: Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt. [nullPointerRedundantCheck]
  *ppStmt = 0;
   ^
src\prepare.c:971:34: note: Assuming that condition 'ppStmt==0' is not redundant
  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );
                                 ^
src\prepare.c:970:20: note: Calling function 'sqlite3LockAndPrepare', 6th argument 'ppStmt' value is 0
                 0,ppStmt,pzTail);
                   ^
src\prepare.c:850:4: note: Null pointer dereference
  *ppStmt = 0;
   ^
src\prepare.c:999:4: warning: Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt. [nullPointerRedundantCheck]
  *ppStmt = 0;
   ^
src\prepare.c:1086:34: note: Assuming that condition 'ppStmt==0' is not redundant
  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */
                                 ^
src\prepare.c:1085:10: note: Calling function 'sqlite3Prepare16', 5th argument 'ppStmt' value is 0
         ppStmt,pzTail);
         ^
src\prepare.c:999:4: note: Null pointer dereference
  *ppStmt = 0;
   ^
src\prepare.c:61:45: style: Parameter 'pIndex' can be declared as pointer to const [constParameterPointer]
int sqlite3IndexHasDuplicateRootPage(Index *pIndex){
                                            ^
src\prepare.c:541:47: style: Parameter 'pSchema' can be declared as pointer to const [constParameterPointer]
int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){
                                              ^
src\status.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 150 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\json.c:2521:14: style: Return value 'sz+n==(unsigned int)nBlob' is always true [knownConditionTrueFalse]
  return sz+n==(u32)nBlob;
             ^
src\json.c:2519:11: note: Assuming that condition 'sz+n!=(unsigned int)nBlob' is not redundant
  if( sz+n!=(u32)nBlob ) return 0;
          ^
src\json.c:2520:38: note: Assuming condition is false
  if( (aBlob[0] & 0x0f)<=JSONB_FALSE && sz>0 ) return 0;
                                     ^
src\json.c:2521:14: note: Return value 'sz+n==(unsigned int)nBlob' is always true
  return sz+n==(u32)nBlob;
             ^
src\resolve.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\json.c:719:7: style: The scope of the variable 'k' can be reduced. [variableScope]
  u32 k;
      ^
src\json.c:720:6: style: The scope of the variable 'c' can be reduced. [variableScope]
  u8 c;
     ^
src\json.c:1506:11: style: The scope of the variable 'sub' can be reduced. [variableScope]
      u32 sub;
          ^
src\json.c:1523:11: style: The scope of the variable 'sub' can be reduced. [variableScope]
      u32 sub;
          ^
src\json.c:2957:16: style: The scope of the variable 'nKey' can be reduced. [variableScope]
  u32 i, j, k, nKey, sz, n, iEnd, rc;
               ^
src\json.c:3039:11: style: The scope of the variable 'nIns' can be reduced. [variableScope]
      u32 nIns;          /* Total bytes to insert (label+value) */
          ^
src\json.c:4139:7: style: The scope of the variable 'iTCursor' can be reduced. [variableScope]
  u32 iTCursor;     /* Cursor position while scanning the target object */
      ^
src\json.c:4142:7: style: The scope of the variable 'iTEnd' can be reduced. [variableScope]
  u32 iTEnd;        /* Current first byte past end of target */
      ^
src\json.c:4153:6: style: The scope of the variable 'ePLabel' can be reduced. [variableScope]
  u8 ePLabel;       /* Node type of the patch label */
     ^
src\json.c:4154:7: style: The scope of the variable 'iPLabel' can be reduced. [variableScope]
  u32 iPLabel;      /* Start of patch label */
      ^
src\json.c:4155:7: style: The scope of the variable 'nPLabel' can be reduced. [variableScope]
  u32 nPLabel;      /* Size of header on the patch label */
      ^
src\json.c:4157:7: style: The scope of the variable 'iPValue' can be reduced. [variableScope]
  u32 iPValue;      /* Start of patch value */
      ^
src\json.c:4158:7: style: The scope of the variable 'nPValue' can be reduced. [variableScope]
  u32 nPValue;      /* Header size for the patch value */
      ^
src\json.c:4288:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                /* Result code */
      ^
src\json.c:4322:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
src\json.c:4323:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
src\json.c:4848:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
src\json.c:4849:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
src\json.c:4953:23: style: The scope of the variable 'pNew' can be reduced. [variableScope]
  JsonEachConnection *pNew;
                      ^
src\json.c:5074:23: style: The scope of the variable 'i' can be reduced. [variableScope]
    u32 n, sz = 0, k, i;
                      ^
src\json.c:693:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
  assert( c>=0 && c<sizeof(aSpecial) );
           ^
src\json.c:4161:18: style: Unsigned expression 'iTarget' can't be negative so it is unnecessary to test it. [unsignedPositive]
  assert( iTarget>=0 && iTarget<pTarget->nBlob );
                 ^
src\json.c:4162:17: style: Unsigned expression 'iPatch' can't be negative so it is unnecessary to test it. [unsignedPositive]
  assert( iPatch>=0 && iPatch<pPatch->nBlob );
                ^
src\json.c:1167:7: style: Variable 'aOld' can be declared as pointer to const [constVariablePointer]
  u8 *aOld;
      ^
src\json.c:2528:39: style: Parameter 'pParse' can be declared as pointer to const [constParameterPointer]
static u32 jsonbArrayCount(JsonParse *pParse, u32 iRoot){
                                      ^
src\json.c:5046:19: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  JsonEachCursor *p = (JsonEachCursor*)cur;
                  ^
src\json.c:5143:21: style: Variable 'pParent' can be declared as pointer to const [constVariablePointer]
        JsonParent *pParent = &p->aParent[p->nParent-1];
                    ^
src\json.c:5285:19: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  JsonEachCursor *p = (JsonEachCursor*)cur;
                  ^
src\table.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\tclsqlite.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\tclsqlite.c:42:0: information: Include file: <tcl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <tcl.h>          /* All normal cases */
^
src\tclsqlite.c:55:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
src\tclsqlite.c:62:0: information: Include file: "sqlite3.h" not found. [missingInclude]
# include "sqlite3.h"
^
src\tclsqlite.c:63:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdlib.h>
^
src\tclsqlite.c:64:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <string.h>
^
src\tclsqlite.c:65:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <assert.h>
^
src\tclsqlite.c:81:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#   include <stdint.h>
^
src\tclsqlite.c:89:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
src\tclsqlite.c:93:0: information: Include file: <signal.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <signal.h>
^
src\tclsqlite.c:94:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
src\json.c:1105:8: style: struct member 'NanInfName::nRepl' is never used. [unusedStructMember]
  char nRepl;
       ^
src\json.c:1107:9: style: struct member 'NanInfName::zRepl' is never used. [unusedStructMember]
  char *zRepl;
        ^
src\table.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\json.c:4363:21: style: Variable 'zPath' is assigned a value that is never used. [unreadVariable]
  const char *zPath = 0; /* Path of element to be removed */
                    ^
src\json.c:4470:21: style: Variable 'zPath' is assigned a value that is never used. [unreadVariable]
  const char *zPath = 0;
                    ^
src\table.c:176:3: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
  *pazResult = &res.azResult[1];
  ^
src\printf.c:1384:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;                             /* Vararg list */
          ^
src\select.c:7425:2: information: Limiting ValueFlow analysis in function 'sqlite3Select' since it is too complex. Please specify --check-level=exhaustive to perform full analysis. [checkLevelNormal]
){
 ^
src\printf.c:738:28: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
            unsigned char *z = (unsigned char*)bufpt;
                           ^
src\printf.c:868:17: style: Variable 'pExpr' can be declared as pointer to const [constVariablePointer]
          Expr *pExpr = va_arg(ap,Expr*);
                ^
src\printf.c:875:18: style: Variable 'pToken' can be declared as pointer to const [constVariablePointer]
          Token *pToken = va_arg(ap, Token*);
                 ^
src\printf.c:1216:39: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
sqlite3_str *sqlite3_str_new(sqlite3 *db){
                                      ^
src\tclsqlite.c:2003:2: information: Limiting ValueFlow analysis in function 'DbObjCmd' since it is too complex. Please specify --check-level=exhaustive to perform full analysis. [checkLevelNormal]
){
 ^
src\select.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\tclsqlite.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\pager.c:4892:16: style: The if condition is the same as the previous if condition [duplicateCondition]
  if( nPathname>0 ){
               ^
src\pager.c:4881:16: note: First condition
  if( nPathname>0 ){
               ^
src\pager.c:4892:16: note: Second condition
  if( nPathname>0 ){
               ^
src\pager.c:1063:19: style: The scope of the variable 'p' can be reduced. [variableScope]
  PagerSavepoint *p;
                  ^
src\pager.c:1582:17: style: The scope of the variable 'aMagic' can be reduced. [variableScope]
  unsigned char aMagic[8];     /* A buffer to hold the magic header */
                ^
src\pager.c:4546:13: style: The scope of the variable 'pData2' can be reduced. [variableScope]
      char *pData2;
            ^
src\pager.c:1350:36: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
static i64 journalHdrOffset(Pager *pPager){
                                   ^
src\pager.c:1776:36: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
u32 sqlite3PagerDataVersion(Pager *pPager){
                                   ^
src\pager.c:2235:31: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
static u32 pager_cksum(Pager *pPager, const u8 *aData){
                              ^
src\pager.c:3058:11: style: Variable 'dbFileVers' can be declared as pointer to const [constVariablePointer]
      u8 *dbFileVers = &((u8*)pPg->pData)[24];
          ^
src\pager.c:3528:37: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
static void pagerFixMaplimit(Pager *pPager){
                                    ^
src\pager.c:3818:36: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
void *sqlite3PagerTempSpace(Pager *pPager){
                                   ^
src\pager.c:3907:35: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
void sqlite3PagerPagecount(Pager *pPager, int *pnPage){
                                  ^
src\pager.c:4546:13: style: Variable 'pData2' can be declared as pointer to const [constVariablePointer]
      char *pData2;
            ^
src\pager.c:5071:10: style: Variable 'pPager' can be declared as pointer to const [constVariablePointer]
  Pager *pPager;
         ^
src\pager.c:5691:10: style: Parameter 'pPager' can be declared as pointer to const. However it seems that 'getPageError' is a callback function, if 'pPager' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Pager *pPager,      /* The pager open on the database file */
         ^
src\pager.c:1042:20: note: You might need to cast the function pointer here
    pPager->xGet = getPageError;
                   ^
src\pager.c:5691:10: note: Parameter 'pPager' can be declared as pointer to const
  Pager *pPager,      /* The pager open on the database file */
         ^
src\pager.c:6264:10: style: Variable 'pPager' can be declared as pointer to const [constVariablePointer]
  Pager *pPager = pPg->pPager;
         ^
src\pager.c:6798:34: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
u8 sqlite3PagerIsreadonly(Pager *pPager){
                                 ^
src\pager.c:6885:32: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
int sqlite3PagerIsMemdb(Pager *pPager){
                               ^
src\pager.c:7080:37: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){
                                    ^
src\pager.c:7089:39: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
sqlite3_file *sqlite3PagerFile(Pager *pPager){
                                      ^
src\pager.c:7108:44: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
const char *sqlite3PagerJournalname(Pager *pPager){
                                           ^
src\pager.c:7294:36: style: Parameter 'pPg' can be declared as pointer to const [constParameterPointer]
void *sqlite3PagerGetExtra(DbPage *pPg){
                                   ^
src\pager.c:7431:39: style: Parameter 'pPager' can be declared as pointer to const [constParameterPointer]
int sqlite3PagerGetJournalMode(Pager *pPager){
                                      ^
src\pager.c:5521:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;
         ^
src\test1.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 171 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test1.c:21:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <unistd.h>
^
src\tclsqlite.h:27:0: information: Include file: <tcl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <tcl.h>          /* All normal cases */
^
src\test1.c:30:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test1.c:31:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test1.c:4359:0: information: Include file: <sys/uio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <sys/uio.h>
^
src\test1.c:6010:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
src\test1.c:7736:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
src\test1.c:7946:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/time.h>
^
src\test1.c:7947:0: information: Include file: <sys/resource.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/resource.h>
^
ext\lsm1\lsm_tree.c:2168:13: style: The comparison 'rc != 0' is always false. [knownConditionTrueFalse]
      if( rc!=LSM_OK ) break;
            ^
ext\lsm1\lsm_tree.c:2138:12: note: 'rc' is assigned value '0' here.
  int rc = LSM_OK;
           ^
ext\lsm1\lsm_tree.c:2168:13: note: The comparison 'rc != 0' is always false.
      if( rc!=LSM_OK ) break;
            ^
src\tclsqlite.c:1005:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\tclsqlite.c:1094:10: style: The scope of the variable 'c' can be reduced. [variableScope]
    char c = zType[0];
         ^
src\tclsqlite.c:2529:10: style: The scope of the variable 'zLineNum' can be reduced. [variableScope]
    char zLineNum[80];          /* Line number print buffer */
         ^
src\tclsqlite.c:2531:14: style: The scope of the variable 'pResult' can be reduced. [variableScope]
    Tcl_Obj *pResult;           /* interp result */
             ^
src\tclsqlite.c:3292:20: style: The scope of the variable 'pData' can be reduced. [variableScope]
    unsigned char *pData;
                   ^
src\tclsqlite.c:427:15: style: Parameter 'hPtr' can be declared as pointer to const. However it seems that 'incrblobHandle' is a callback function, if 'hPtr' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  ClientData *hPtr
              ^
src\tclsqlite.c:442:3: note: You might need to cast the function pointer here
  incrblobHandle,                    /* getHandleProc (always returns error) */
  ^
src\tclsqlite.c:427:15: note: Parameter 'hPtr' can be declared as pointer to const
  ClientData *hPtr
              ^
src\tclsqlite.c:845:12: style: Parameter 'db' can be declared as pointer to const. However it seems that 'DbWalHandler' is a callback function, if 'db' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  sqlite3 *db,
           ^
src\tclsqlite.c:1982:39: note: You might need to cast the function pointer here
  sqlite3_wal_hook(db, (pDb->pWalHook?DbWalHandler:0), pDb);
                                      ^
src\tclsqlite.c:845:12: note: Parameter 'db' can be declared as pointer to const
  sqlite3 *db,
           ^
src\tclsqlite.c:2084:13: style: Variable 'zAuth' can be declared as pointer to const [constVariablePointer]
      char *zAuth;
            ^
src\tclsqlite.c:2187:13: style: Variable 'zCallback' can be declared as pointer to const [constVariablePointer]
      char *zCallback;
            ^
src\tclsqlite.c:2217:13: style: Variable 'zBusy' can be declared as pointer to const [constVariablePointer]
      char *zBusy;
            ^
src\tclsqlite.c:2246:11: style: Variable 'subCmd' can be declared as pointer to const [constVariablePointer]
    char *subCmd;
          ^
src\tclsqlite.c:2324:11: style: Variable 'zScript' can be declared as pointer to const [constVariablePointer]
    char *zScript;
          ^
src\tclsqlite.c:2708:20: style: Variable 'pBA' can be declared as pointer to const [constVariablePointer]
    unsigned char *pBA;
                   ^
src\tclsqlite.c:3083:13: style: Variable 'zNull' can be declared as pointer to const [constVariablePointer]
      char *zNull = Tcl_GetStringFromObj(objv[2], &len);
            ^
src\tclsqlite.c:3135:13: style: Variable 'zProgress' can be declared as pointer to const [constVariablePointer]
      char *zProgress;
            ^
src\tclsqlite.c:3181:13: style: Variable 'zProfile' can be declared as pointer to const [constVariablePointer]
      char *zProfile;
            ^
src\tclsqlite.c:3392:13: style: Variable 'zTrace' can be declared as pointer to const [constVariablePointer]
      char *zTrace;
            ^
src\tclsqlite.c:3432:13: style: Variable 'zTraceV2' can be declared as pointer to const [constVariablePointer]
      char *zTraceV2;
            ^
src\tclsqlite.c:4009:39: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
EXTERN int Sqlite3_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }
                                      ^
src\tclsqlite.c:4010:42: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
EXTERN int Tclsqlite3_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }
                                         ^
src\tclsqlite.c:4016:41: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
EXTERN int Sqlite3_SafeInit(Tcl_Interp *interp){ return TCL_ERROR; }
                                        ^
src\tclsqlite.c:4017:43: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
EXTERN int Sqlite3_SafeUnload(Tcl_Interp *interp, int flags){return TCL_ERROR;}
                                          ^
src\tclsqlite.c:4029:38: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
EXTERN int Sqlite_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }
                                     ^
src\tclsqlite.c:4030:41: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
EXTERN int Tclsqlite_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }
                                        ^
src\tclsqlite.c:4031:40: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
EXTERN int Sqlite_SafeInit(Tcl_Interp *interp){ return TCL_ERROR; }
                                       ^
src\tclsqlite.c:4032:42: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
EXTERN int Sqlite_SafeUnload(Tcl_Interp *interp, int flags){return TCL_ERROR;}
                                         ^
src\pcache.c:141:11: style: Variable 'pCache' can be declared as pointer to const [constVariablePointer]
  PCache *pCache;
          ^
src\test1.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\func.c:2513:13: style: The scope of the variable 'b' can be reduced. [variableScope]
  double x, b, ans;
            ^
src\test2.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test2.c:18:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test2.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test2.c:20:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
src\test3.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 149 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test4.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test4.c:17:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test4.c:18:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test4.c:19:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
src\test4.c:20:0: information: Include file: <sched.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sched.h>
^
src\test4.c:21:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
src\test2.c:349:8: style: The scope of the variable 'zBuf' can be reduced. [variableScope]
  char zBuf[100];
       ^
src\test2.c:32:41: style: Parameter 'pNotUsed' can be declared as pointer to const. However it seems that 'pager_test_reiniter' is a callback function, if 'pNotUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void pager_test_reiniter(DbPage *pNotUsed){
                                        ^
src\test2.c:60:7: note: You might need to cast the function pointer here
      pager_test_reiniter);
      ^
src\test2.c:32:41: note: Parameter 'pNotUsed' can be declared as pointer to const
static void pager_test_reiniter(DbPage *pNotUsed){
                                        ^
src\test4.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test4.c:476:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\test4.c:174:38: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static void test_thread_wait(Thread *p){
                                     ^
src\test5.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 152 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test5.c:21:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test5.c:22:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test5.c:162:13: style: Variable 'zTmp' can be declared as pointer to const [constVariablePointer]
      char *zTmp = z;
            ^
src\test5.c:186:10: style: Parameter 'clientData' can be declared as pointer to const [constParameterPointer]
  void * clientData,
         ^
src\test5.c:187:15: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
  Tcl_Interp *interp,
              ^
src\test5.c:189:18: style: Parameter 'objv' can be declared as const array [constParameter]
  Tcl_Obj *CONST objv[]
                 ^
src\resolve.c:340:21: style: The comparison 'cnt == 0' is always true. [knownConditionTrueFalse]
  assert( pNC && cnt==0 );
                    ^
src\resolve.c:287:13: note: 'cnt' is assigned value '0' here.
  int cnt = 0;                      /* Number of matching column names */
            ^
src\resolve.c:340:21: note: The comparison 'cnt == 0' is always true.
  assert( pNC && cnt==0 );
                    ^
src\resolve.c:1471:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;             /* Loop counter */
      ^
src\resolve.c:75:9: style: Variable 'pOrig' can be declared as pointer to const [constVariablePointer]
  Expr *pOrig;           /* The iCol-th column of the result set */
        ^
src\resolve.c:161:68: style: Parameter 'pTopNC' can be declared as pointer to const [constParameterPointer]
static int areDoubleQuotedStringsEnabled(sqlite3 *db, NameContext *pTopNC){
                                                                   ^
src\resolve.c:181:10: style: Variable 'pExTab' can be declared as pointer to const [constVariablePointer]
  Table *pExTab;
         ^
src\resolve.c:230:10: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
  Table *pTab,              /* The schema table we are trying to match */
         ^
src\resolve.c:666:17: style: Variable 'pOrig' can be declared as pointer to const [constVariablePointer]
          Expr *pOrig;
                ^
src\resolve.c:864:12: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
    Table *pTab;
           ^
src\resolve.c:906:17: style: Parameter 'pNC' can be declared as pointer to const [constParameterPointer]
   NameContext *pNC,    /* The name context */
                ^
src\resolve.c:909:10: style: Parameter 'pError' can be declared as pointer to const [constParameterPointer]
   Expr *pError         /* Associate error with this expression */
         ^
src\resolve.c:932:34: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int exprProbability(Expr *p){
                                 ^
src\resolve.c:1560:9: style: Parameter 'pError' can be declared as pointer to const [constParameterPointer]
  Expr *pError           /* Associate the error with the expression */
        ^
src\resolve.c:1703:12: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
  sqlite3 *db = pParse->db;
           ^
src\resolve.c:1846:12: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
  sqlite3 *db;            /* Database connection */
           ^
src\test6.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\resolve.c:88:10: style: Variable 'pDup' is assigned a value that is never used. [unreadVariable]
    pDup = 0;
         ^
src\test6.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test3.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src\test8.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ext\wasm\api\sqlite3-wasm.c:1734:0: information: Include file: <emscripten/console.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <emscripten/console.h>
^
ext\wasm\api\sqlite3-wasm.c:1735:0: information: Include file: <emscripten/wasmfs.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <emscripten/wasmfs.h>
^
src\test8.c:18:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test8.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test1.c:358:42: style: Condition 'zHex[j+2]' is always true [knownConditionTrueFalse]
    if( zHex[j]=='%' && zHex[j+2] && zHex[j+2] ){
                                         ^
src\test1.c:1270:35: style: Condition 'p' is always true [knownConditionTrueFalse]
      sqlite3_result_int(context, p ? p->n : 0);
                                  ^
src\test1.c:5033:24: style: Condition 'zTail' is always true [knownConditionTrueFalse]
  if( rc==SQLITE_OK && zTail && objc>=6 ){
                       ^
src\test1.c:6083:28: style: Condition 'zB[j]=='.'' is always true [knownConditionTrueFalse]
    if( zA[i]=='.' && zB[j]=='.' ){
                           ^
src\test1.c:6083:14: note: Assuming that condition 'zA[i]=='.'' is not redundant
    if( zA[i]=='.' && zB[j]=='.' ){
             ^
src\test1.c:6081:14: note: Assuming that condition 'zA[i]!=zB[j]' is not redundant
    if( zA[i]!=zB[j] ) break;
             ^
src\test1.c:6082:14: note: Assuming condition is false
    if( zA[i]==0 ) break;
             ^
src\test1.c:6083:28: note: Condition 'zB[j]=='.'' is always true
    if( zA[i]=='.' && zB[j]=='.' ){
                           ^
src\test1.c:4944:12: warning: If memory allocation fails, then there is a possible null pointer dereference: zCopy [nullPointerOutOfMemory]
    memcpy(zCopy, zSql, bytes);
           ^
src\test1.c:4943:19: note: Assuming allocation function fails
    zCopy = malloc(bytes);
                  ^
src\test1.c:4943:19: note: Assignment 'zCopy=malloc(bytes)', assigned value is 0
    zCopy = malloc(bytes);
                  ^
src\test1.c:4944:12: note: Null pointer dereference
    memcpy(zCopy, zSql, bytes);
           ^
src\test1.c:4948:12: warning: If memory allocation fails, then there is a possible null pointer dereference: zCopy [nullPointerOutOfMemory]
    memcpy(zCopy, zSql, n);
           ^
src\test1.c:4947:19: note: Assuming allocation function fails
    zCopy = malloc(n);
                  ^
src\test1.c:4947:19: note: Assignment 'zCopy=malloc(n)', assigned value is 0
    zCopy = malloc(n);
                  ^
src\test1.c:4948:12: note: Null pointer dereference
    memcpy(zCopy, zSql, n);
           ^
src\test1.c:5019:12: warning: If memory allocation fails, then there is a possible null pointer dereference: zCopy [nullPointerOutOfMemory]
    memcpy(zCopy, zSql, bytes);
           ^
src\test1.c:5018:19: note: Assuming allocation function fails
    zCopy = malloc(bytes);
                  ^
src\test1.c:5018:19: note: Assignment 'zCopy=malloc(bytes)', assigned value is 0
    zCopy = malloc(bytes);
                  ^
src\test1.c:5019:12: note: Null pointer dereference
    memcpy(zCopy, zSql, bytes);
           ^
src\test1.c:5023:12: warning: If memory allocation fails, then there is a possible null pointer dereference: zCopy [nullPointerOutOfMemory]
    memcpy(zCopy, zSql, n);
           ^
src\test1.c:5022:19: note: Assuming allocation function fails
    zCopy = malloc(n);
                  ^
src\test1.c:5022:19: note: Assignment 'zCopy=malloc(n)', assigned value is 0
    zCopy = malloc(n);
                  ^
src\test1.c:5023:12: note: Null pointer dereference
    memcpy(zCopy, zSql, n);
           ^
src\test6.c:372:10: warning: Either the condition 'pNew==0' is redundant or there is possible null pointer dereference: pNew. [nullPointerRedundantCheck]
  memset(pNew, 0, sizeof(WriteBuffer)+nBuf);
         ^
src\test6.c:369:11: note: Assuming that condition 'pNew==0' is not redundant
  if( pNew==0 ){
          ^
src\test6.c:372:10: note: Null pointer dereference
  memset(pNew, 0, sizeof(WriteBuffer)+nBuf);
         ^
src\test6.c:373:3: warning: Either the condition 'pNew==0' is redundant or there is possible null pointer dereference: pNew. [nullPointerRedundantCheck]
  pNew->iOffset = iOffset;
  ^
src\test6.c:369:11: note: Assuming that condition 'pNew==0' is not redundant
  if( pNew==0 ){
          ^
src\test6.c:373:3: note: Null pointer dereference
  pNew->iOffset = iOffset;
  ^
src\test6.c:374:3: warning: Either the condition 'pNew==0' is redundant or there is possible null pointer dereference: pNew. [nullPointerRedundantCheck]
  pNew->nBuf = nBuf;
  ^
src\test6.c:369:11: note: Assuming that condition 'pNew==0' is not redundant
  if( pNew==0 ){
          ^
src\test6.c:374:3: note: Null pointer dereference
  pNew->nBuf = nBuf;
  ^
src\test6.c:375:3: warning: Either the condition 'pNew==0' is redundant or there is possible null pointer dereference: pNew. [nullPointerRedundantCheck]
  pNew->pFile = (CrashFile *)pFile;
  ^
src\test6.c:369:11: note: Assuming that condition 'pNew==0' is not redundant
  if( pNew==0 ){
          ^
src\test6.c:375:3: note: Null pointer dereference
  pNew->pFile = (CrashFile *)pFile;
  ^
src\test1.c:287:10: style: The comparison 'res == 0' is always true. [knownConditionTrueFalse]
  if( res==0 && getenv("OMIT_MISUSE")!=0 ) res = 1;
         ^
src\test1.c:278:13: note: 'res' is assigned value '0' here.
  int res = 0;
            ^
src\test1.c:287:10: note: The comparison 'res == 0' is always true.
  if( res==0 && getenv("OMIT_MISUSE")!=0 ) res = 1;
         ^
src\test1.c:358:35: style: Same expression on both sides of '&&'. [duplicateExpression]
    if( zHex[j]=='%' && zHex[j+2] && zHex[j+2] ){
                                  ^
src\test1.c:3335:10: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
      rc = SQLITE_NOMEM;
         ^
src\test1.c:3321:8: note: rc is assigned
    rc = sqlite3_create_collation(db, "test_collate", SQLITE_UTF16LE,
       ^
src\test1.c:3335:10: note: rc is overwritten
      rc = SQLITE_NOMEM;
         ^
src\test6.c:186:37: style: Parameter 'pFile' can be declared as pointer to const [constParameterPointer]
static int writeListSync(CrashFile *pFile, int isCrash){
                                    ^
src\test6.c:200:16: style: Variable 'pFinal' can be declared as pointer to const [constVariablePointer]
  WriteBuffer *pFinal = 0;
               ^
src\test6.c:411:14: style: Variable 'pCrash' can be declared as pointer to const [constVariablePointer]
  CrashFile *pCrash = (CrashFile *)pFile;
             ^
src\test6.c:538:39: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'cfSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int cfSectorSize(sqlite3_file *pFile){
                                      ^
src\test6.c:583:3: note: You might need to cast the function pointer here
  cfSectorSize,                 /* xSectorSize */
  ^
src\test6.c:538:39: note: Parameter 'pFile' can be declared as pointer to const
static int cfSectorSize(sqlite3_file *pFile){
                                      ^
src\test6.c:541:50: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'cfDeviceCharacteristics' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int cfDeviceCharacteristics(sqlite3_file *pFile){
                                                 ^
src\test6.c:584:3: note: You might need to cast the function pointer here
  cfDeviceCharacteristics,      /* xDeviceCharacteristics */
  ^
src\test6.c:541:50: note: Parameter 'pFile' can be declared as pointer to const
static int cfDeviceCharacteristics(sqlite3_file *pFile){
                                                 ^
src\test1.c:2152:3: style: Statements following noreturn function 'exit()' will never be executed. [unreachableCode]
  assert( interp==0 );   /* This will always fail */
  ^
src\test1.c:580:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\test1.c:1647:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
src\test1.c:2899:8: style: The scope of the variable 'zBuf' can be reduced. [variableScope]
  char zBuf[50];
       ^
src\test1.c:3258:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
src\test1.c:3813:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\test1.c:3847:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\test1.c:3883:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\test1.c:4829:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
src\test1.c:5112:12: style: The scope of the variable 'pTail' can be reduced. [variableScope]
  Tcl_Obj *pTail = 0;
           ^
src\test1.c:5172:12: style: The scope of the variable 'pTail' can be reduced. [variableScope]
  Tcl_Obj *pTail = 0;
           ^
src\test1.c:5742:12: style: The scope of the variable 'pRet' can be reduced. [variableScope]
  Tcl_Obj *pRet;
           ^
src\test1.c:6705:8: style: The scope of the variable 'zBuf' can be reduced. [variableScope]
  char zBuf[100];
       ^
src\test1.c:8257:15: style: The scope of the variable 'zName' can be reduced. [variableScope]
  const char *zName;
              ^
src\test1.c:7813:8: style: Unsigned expression 'n' can't be negative so it is unnecessary to test it. [unsignedPositive]
  if( n>=0 && n<sizeof(zBuf) ){
       ^
src\test6.c:595:16: style: struct member 'crashAppData::pOrig' is never used. [unusedStructMember]
  sqlite3_vfs *pOrig;                   /* Wrapped vfs structure */
               ^
src\test1.c:8845:12: style: Checking if unsigned expression 'nCore' is less than zero. [unsignedLessThanZero]
  if( nCore<=0 ) nCore = 1;
           ^
src\test6.c:724:11: style: struct member 'DeviceFlag::zName' is never used. [unusedStructMember]
    char *zName;
          ^
src\test1.c:6459:16: style: Local variable 'apVfs' shadows outer variable [shadowVariable]
  sqlite3_vfs *apVfs[20];
               ^
src\test1.c:6573:21: note: Shadowed declaration
static sqlite3_vfs *apVfs[20];
                    ^
src\test1.c:6459:16: note: Shadow variable
  sqlite3_vfs *apVfs[20];
               ^
src\test1.c:232:9: style: Parameter 'NotUsed' can be declared as pointer to const [constParameterPointer]
  void *NotUsed,
        ^
src\test1.c:233:15: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
  Tcl_Interp *interp,    /* The TCL interpreter that invoked this command */
              ^
src\test1.c:657:9: style: Parameter 'NotUsed' can be declared as pointer to const [constParameterPointer]
  void *NotUsed,
        ^
src\test1.c:658:15: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
  Tcl_Interp *interp,    /* The TCL interpreter that invoked this command */
              ^
src\test1.c:671:9: style: Parameter 'NotUsed' can be declared as pointer to const [constParameterPointer]
  void *NotUsed,
        ^
src\test1.c:672:15: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
  Tcl_Interp *interp,    /* The TCL interpreter that invoked this command */
              ^
src\test1.c:1036:9: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
  char *z = (char*)sqlite3_value_text(apVal[0]);
        ^
src\test1.c:1277:20: style: Parameter 'context' can be declared as pointer to const. However it seems that 'legacyCountStep' is a callback function, if 'context' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  sqlite3_context *context,
                   ^
src\test1.c:1331:9: note: You might need to cast the function pointer here
        legacyCountStep, legacyCountFinalize
        ^
src\test1.c:1277:20: note: Parameter 'context' can be declared as pointer to const
  sqlite3_context *context,
                   ^
src\test1.c:1926:38: style: Parameter 'ctx' can be declared as pointer to const. However it seems that 'cf2Func' is a callback function, if 'ctx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void cf2Func(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){
                                     ^
src\test1.c:2019:19: note: You might need to cast the function pointer here
      (p->pFunc ? cf2Func : 0),
                  ^
src\test1.c:1926:38: note: Parameter 'ctx' can be declared as pointer to const
static void cf2Func(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){
                                     ^
src\test1.c:1928:38: style: Parameter 'ctx' can be declared as pointer to const. However it seems that 'cf2Step' is a callback function, if 'ctx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void cf2Step(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){
                                     ^
src\test1.c:2020:19: note: You might need to cast the function pointer here
      (p->pStep ? cf2Step : 0),
                  ^
src\test1.c:1928:38: note: Parameter 'ctx' can be declared as pointer to const
static void cf2Step(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){
                                     ^
src\test1.c:1930:39: style: Parameter 'ctx' can be declared as pointer to const. However it seems that 'cf2Final' is a callback function, if 'ctx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void cf2Final(sqlite3_context *ctx){
                                      ^
src\test1.c:2021:20: note: You might need to cast the function pointer here
      (p->pFinal ? cf2Final : 0),
                   ^
src\test1.c:1930:39: note: Parameter 'ctx' can be declared as pointer to const
static void cf2Final(sqlite3_context *ctx){
                                      ^
src\test1.c:2140:9: style: Parameter 'NotUsed' can be declared as pointer to const [constParameterPointer]
  void *NotUsed,
        ^
src\test1.c:2141:15: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
  Tcl_Interp *interp,    /* The TCL interpreter that invoked this command */
              ^
src\test8.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test1.c:3365:9: style: Parameter 'pCtx' can be declared as pointer to const. However it seems that 'test_utf16bin_collate_func' is a callback function, if 'pCtx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void *pCtx,
        ^
src\test1.c:3387:7: note: You might need to cast the function pointer here
      test_utf16bin_collate_func
      ^
src\test1.c:3365:9: note: Parameter 'pCtx' can be declared as pointer to const
  void *pCtx,
        ^
src\test1.c:3468:9: style: Parameter 'NotUsed' can be declared as pointer to const. However it seems that 'alignmentCollFunc' is a callback function, if 'NotUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void *NotUsed,
        ^
src\test1.c:3494:12: note: You might need to cast the function pointer here
        0, alignmentCollFunc);
           ^
src\test1.c:3468:9: note: Parameter 'NotUsed' can be declared as pointer to const
  void *NotUsed,
        ^
src\test1.c:3651:9: style: Variable 'zCode' can be declared as pointer to const [constVariablePointer]
  char *zCode;
        ^
src\test1.c:3679:9: style: Parameter 'NotUsed' can be declared as pointer to const [constParameterPointer]
  void *NotUsed,
        ^
src\test1.c:3680:15: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
  Tcl_Interp *interp,    /* The TCL interpreter that invoked this command */
              ^
src\test1.c:4540:24: style: Variable 'v' can be declared as pointer to const [constVariablePointer]
        unsigned char *v = Tcl_GetByteArrayFromObj(objv[i+i], &n);
                       ^
src\test1.c:5378:9: style: Variable 'zSql' can be declared as pointer to const [constVariablePointer]
  char *zSql;
        ^
src\test9.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test1.c:6157:10: style: Parameter 'clientData' can be declared as pointer to const. However it seems that 'test_release_memory' is a callback function, if 'clientData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void * clientData,
         ^
src\test1.c:8983:41: note: You might need to cast the function pointer here
     { "sqlite3_release_memory",        test_release_memory,     0},
                                        ^
src\test1.c:6157:10: note: Parameter 'clientData' can be declared as pointer to const
  void * clientData,
         ^
src\test1.c:6158:15: style: Parameter 'interp' can be declared as pointer to const. However it seems that 'test_release_memory' is a callback function, if 'interp' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Interp *interp,
              ^
src\test1.c:8983:41: note: You might need to cast the function pointer here
     { "sqlite3_release_memory",        test_release_memory,     0},
                                        ^
src\test1.c:6158:15: note: Parameter 'interp' can be declared as pointer to const
  Tcl_Interp *interp,
              ^
src\test1.c:6160:18: style: Parameter 'objv' can be declared as const array. However it seems that 'test_release_memory' is a callback function, if 'objv' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Obj *CONST objv[]
                 ^
src\test1.c:8983:41: note: You might need to cast the function pointer here
     { "sqlite3_release_memory",        test_release_memory,     0},
                                        ^
src\test1.c:6160:18: note: Parameter 'objv' can be declared as const array
  Tcl_Obj *CONST objv[]
                 ^
src\test9.c:19:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test9.c:20:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test1.c:6363:10: style: Parameter 'clientData' can be declared as pointer to const. However it seems that 'test_thread_cleanup' is a callback function, if 'clientData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void * clientData,
         ^
src\test1.c:8992:41: note: You might need to cast the function pointer here
     { "sqlite3_thread_cleanup",        test_thread_cleanup,     0},
                                        ^
src\test1.c:6363:10: note: Parameter 'clientData' can be declared as pointer to const
  void * clientData,
         ^
src\test1.c:6364:15: style: Parameter 'interp' can be declared as pointer to const. However it seems that 'test_thread_cleanup' is a callback function, if 'interp' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Interp *interp,
              ^
src\test1.c:8992:41: note: You might need to cast the function pointer here
     { "sqlite3_thread_cleanup",        test_thread_cleanup,     0},
                                        ^
src\test1.c:6364:15: note: Parameter 'interp' can be declared as pointer to const
  Tcl_Interp *interp,
              ^
src\test1.c:6366:18: style: Parameter 'objv' can be declared as const array. However it seems that 'test_thread_cleanup' is a callback function, if 'objv' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Obj *CONST objv[]
                 ^
src\test1.c:8992:41: note: You might need to cast the function pointer here
     { "sqlite3_thread_cleanup",        test_thread_cleanup,     0},
                                        ^
src\test1.c:6366:18: note: Parameter 'objv' can be declared as const array
  Tcl_Obj *CONST objv[]
                 ^
src\test1.c:6388:11: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  int v, *a;
          ^
src\test1.c:7293:15: style: Parameter 'interp' can be declared as pointer to const. However it seems that 'reset_prng_state' is a callback function, if 'interp' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Interp *interp,    /* The TCL interpreter that invoked this command */
              ^
src\test1.c:9003:41: note: You might need to cast the function pointer here
     { "reset_prng_state",              reset_prng_state,   0 },
                                        ^
src\test1.c:7293:15: note: Parameter 'interp' can be declared as pointer to const
  Tcl_Interp *interp,    /* The TCL interpreter that invoked this command */
              ^
src\test1.c:7295:18: style: Parameter 'objv' can be declared as const array. However it seems that 'reset_prng_state' is a callback function, if 'objv' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Obj *CONST objv[]  /* Command arguments */
                 ^
src\test1.c:9003:41: note: You might need to cast the function pointer here
     { "reset_prng_state",              reset_prng_state,   0 },
                                        ^
src\test1.c:7295:18: note: Parameter 'objv' can be declared as const array
  Tcl_Obj *CONST objv[]  /* Command arguments */
                 ^
src\test1.c:7800:14: style: Variable 'pTm' can be declared as pointer to const [constVariablePointer]
  struct tm *pTm;
             ^
src\test1.c:4398:19: error: Uninitialized variable: pStmt [uninitvar]
    sqlite3_stmt *pStmt,
                  ^
src\test1.c:1961:17: style: struct member 'EncTable::zEnc' is never used. [unusedStructMember]
    const char *zEnc;
                ^
src\test9.c:31:28: style: Variable 'zErrFunction' is assigned a value that is never used. [unreadVariable]
  const char *zErrFunction = "N/A";
                           ^
src\test9.c:73:28: style: Variable 'zErrFunction' is assigned a value that is never used. [unreadVariable]
  const char *zErrFunction = "N/A";
                           ^
src\test9.c:113:28: style: Variable 'zErrFunction' is assigned a value that is never used. [unreadVariable]
  const char *zErrFunction = "N/A";
                           ^
src\test1.c:5274:19: style: struct member 'OpenFlag::zFlag' is never used. [unusedStructMember]
      const char *zFlag;
                  ^
src\test1.c:1902:6: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  rc = sqlite3_create_collation_v2(db, Tcl_GetString(objv[2]), SQLITE_UTF8,
     ^
src\test1.c:2875:6: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  rc = sqlite3_file_control(db, "main", SQLITE_FCNTL_FILE_POINTER, (void*)&pFd);
     ^
src\test1.c:5112:18: style: Variable 'pTail' is assigned a value that is never used. [unreadVariable]
  Tcl_Obj *pTail = 0;
                 ^
src\test1.c:5172:18: style: Variable 'pTail' is assigned a value that is never used. [unreadVariable]
  Tcl_Obj *pTail = 0;
                 ^
src\test1.c:5306:6: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  rc = sqlite3_open_v2(zFilename, &db, flags, zVfs);
     ^
src\test8.c:612:7: style: The scope of the variable 'iCol' can be reduced. [variableScope]
  int iCol = i + 1;
      ^
src\test8.c:1112:15: style: The scope of the variable 'zVal' can be reduced. [variableScope]
  const char *zVal;
              ^
src\test8.c:1143:15: style: The scope of the variable 'zVal' can be reduced. [variableScope]
  const char *zVal;
              ^
src\test8.c:759:66: style: Parameter 'pIdxInfo' can be declared as pointer to const [constParameterPointer]
static char *echoSelectList(echo_vtab *pTab, sqlite3_index_info *pIdxInfo){
                                                                 ^
src\tclsqlite.h:25:0: information: Include file: "sqlite_tcl.h" not found. [missingInclude]
# include "sqlite_tcl.h"   /* Special case for Windows using STDCALL */
^
src\test_autoext.c:190:10: style: Parameter 'clientData' can be declared as pointer to const. However it seems that 'resetAutoExtObjCmd' is a callback function, if 'clientData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void * clientData,
         ^
src\test_autoext.c:219:11: note: You might need to cast the function pointer here
          resetAutoExtObjCmd, 0, 0);
          ^
src\test_autoext.c:190:10: note: Parameter 'clientData' can be declared as pointer to const
  void * clientData,
         ^
src\test_autoext.c:191:15: style: Parameter 'interp' can be declared as pointer to const. However it seems that 'resetAutoExtObjCmd' is a callback function, if 'interp' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Interp *interp,
              ^
src\test_autoext.c:219:11: note: You might need to cast the function pointer here
          resetAutoExtObjCmd, 0, 0);
          ^
src\test_autoext.c:191:15: note: Parameter 'interp' can be declared as pointer to const
  Tcl_Interp *interp,
              ^
src\test_autoext.c:193:18: style: Parameter 'objv' can be declared as const array. However it seems that 'resetAutoExtObjCmd' is a callback function, if 'objv' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  Tcl_Obj *CONST objv[]
                 ^
src\test_autoext.c:219:11: note: You might need to cast the function pointer here
          resetAutoExtObjCmd, 0, 0);
          ^
src\test_autoext.c:193:18: note: Parameter 'objv' can be declared as const array
  Tcl_Obj *CONST objv[]
                 ^
src\test_backup.c:17:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_backup.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_backup.c:36:17: style: struct member 'BackupSubCommand::zCmd' is never used. [unusedStructMember]
    const char *zCmd;
                ^
src\test_bestindex.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_blob.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_blob.c:16:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_blob.c:17:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_blob.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_bestindex.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_btree.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 149 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_blob.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_config.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 231 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_config.c:28:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_config.c:29:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_bestindex.c:184:12: style: The scope of the variable 'pScript' can be reduced. [variableScope]
  Tcl_Obj *pScript = 0;
           ^
src\test_bestindex.c:275:19: style: The scope of the variable 'zErr' can be reduced. [variableScope]
      const char *zErr;
                  ^
src\test_bestindex.c:360:18: style: The scope of the variable 'p' can be reduced. [variableScope]
        Tcl_Obj *p = apElem[ii+1];
                 ^
src\test_bestindex.c:399:15: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  tcl_cursor *pCsr = (tcl_cursor*)pVtabCursor;
              ^
src\test_bestindex.c:145:14: style: Variable 'iIn' is assigned a value that is never used. [unreadVariable]
          iIn++;
             ^
src\test_bestindex.c:184:20: style: Variable 'pScript' is assigned a value that is never used. [unreadVariable]
  Tcl_Obj *pScript = 0;
                   ^
src\test_delete.c:23:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <unistd.h>
^
src\test_delete.c:24:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#  include <errno.h>
^
src\test_delete.c:26:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_delete.c:27:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_delete.c:28:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_bestindex.c:780:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
      rc = SQLITE_ERROR;
         ^
src\test_delete.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_delete.c:61:16: style: Parameter 'pVfs' can be declared as pointer to const [constParameterPointer]
  sqlite3_vfs *pVfs,
               ^
src\test_demovfs.c:118:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_demovfs.c:120:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_demovfs.c:121:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_demovfs.c:122:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
src\test_demovfs.c:123:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
src\test_demovfs.c:124:0: information: Include file: <sys/file.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/file.h>
^
src\test_demovfs.c:125:0: information: Include file: <sys/param.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/param.h>
^
src\test_demovfs.c:126:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
src\test_demovfs.c:127:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
src\test_demovfs.c:128:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
src\test_demovfs.c:129:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
src\test_demovfs.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_devsym.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_demovfs.c:463:9: style: The scope of the variable 'dfd' can be reduced. [variableScope]
    int dfd;                      /* File descriptor open on directory */
        ^
src\test_demovfs.c:307:39: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'demoTruncate' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int demoTruncate(sqlite3_file *pFile, sqlite_int64 size){
                                      ^
src\test_demovfs.c:405:5: note: You might need to cast the function pointer here
    demoTruncate,                 /* xTruncate */
    ^
src\test_demovfs.c:307:39: note: Parameter 'pFile' can be declared as pointer to const
static int demoTruncate(sqlite3_file *pFile, sqlite_int64 size){
                                      ^
src\test_demovfs.c:360:35: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'demoLock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int demoLock(sqlite3_file *pFile, int eLock){
                                  ^
src\test_demovfs.c:408:5: note: You might need to cast the function pointer here
    demoLock,                     /* xLock */
    ^
src\test_demovfs.c:360:35: note: Parameter 'pFile' can be declared as pointer to const
static int demoLock(sqlite3_file *pFile, int eLock){
                                  ^
src\test_demovfs.c:363:37: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'demoUnlock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int demoUnlock(sqlite3_file *pFile, int eLock){
                                    ^
src\test_demovfs.c:409:5: note: You might need to cast the function pointer here
    demoUnlock,                   /* xUnlock */
    ^
src\test_demovfs.c:363:37: note: Parameter 'pFile' can be declared as pointer to const
static int demoUnlock(sqlite3_file *pFile, int eLock){
                                    ^
src\test_demovfs.c:374:42: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'demoFileControl' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int demoFileControl(sqlite3_file *pFile, int op, void *pArg){
                                         ^
src\test_demovfs.c:411:5: note: You might need to cast the function pointer here
    demoFileControl,              /* xFileControl */
    ^
src\test_demovfs.c:374:42: note: Parameter 'pFile' can be declared as pointer to const
static int demoFileControl(sqlite3_file *pFile, int op, void *pArg){
                                         ^
src\test_demovfs.c:374:63: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'demoFileControl' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int demoFileControl(sqlite3_file *pFile, int op, void *pArg){
                                                              ^
src\test_demovfs.c:411:5: note: You might need to cast the function pointer here
    demoFileControl,              /* xFileControl */
    ^
src\test_demovfs.c:374:63: note: Parameter 'pArg' can be declared as pointer to const
static int demoFileControl(sqlite3_file *pFile, int op, void *pArg){
                                                              ^
src\test_demovfs.c:383:41: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'demoSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int demoSectorSize(sqlite3_file *pFile){
                                        ^
src\test_demovfs.c:412:5: note: You might need to cast the function pointer here
    demoSectorSize,               /* xSectorSize */
    ^
src\test_demovfs.c:383:41: note: Parameter 'pFile' can be declared as pointer to const
static int demoSectorSize(sqlite3_file *pFile){
                                        ^
src\test_demovfs.c:386:52: style: Parameter 'pFile' can be declared as pointer to const [constParameterPointer]
static int demoDeviceCharacteristics(sqlite3_file *pFile){
                                                   ^
src\test_demovfs.c:565:38: style: Parameter 'pVfs' can be declared as pointer to const. However it seems that 'demoDlOpen' is a callback function, if 'pVfs' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void *demoDlOpen(sqlite3_vfs *pVfs, const char *zPath){
                                     ^
src\test_demovfs.c:632:5: note: You might need to cast the function pointer here
    demoDlOpen,                   /* xDlOpen */
    ^
src\test_demovfs.c:565:38: note: Parameter 'pVfs' can be declared as pointer to const
static void *demoDlOpen(sqlite3_vfs *pVfs, const char *zPath){
                                     ^
src\test_demovfs.c:572:38: style: Parameter 'pVfs' can be declared as pointer to const. However it seems that 'demoDlSym' is a callback function, if 'pVfs' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void (*demoDlSym(sqlite3_vfs *pVfs, void *pH, const char *z))(void){
                                     ^
src\test_demovfs.c:634:5: note: You might need to cast the function pointer here
    demoDlSym,                    /* xDlSym */
    ^
src\test_demovfs.c:572:38: note: Parameter 'pVfs' can be declared as pointer to const
static void (*demoDlSym(sqlite3_vfs *pVfs, void *pH, const char *z))(void){
                                     ^
src\test_demovfs.c:572:50: style: Parameter 'pH' can be declared as pointer to const. However it seems that 'demoDlSym' is a callback function, if 'pH' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void (*demoDlSym(sqlite3_vfs *pVfs, void *pH, const char *z))(void){
                                                 ^
src\test_demovfs.c:634:5: note: You might need to cast the function pointer here
    demoDlSym,                    /* xDlSym */
    ^
src\test_demovfs.c:572:50: note: Parameter 'pH' can be declared as pointer to const
static void (*demoDlSym(sqlite3_vfs *pVfs, void *pH, const char *z))(void){
                                                 ^
src\test_demovfs.c:575:38: style: Parameter 'pVfs' can be declared as pointer to const. However it seems that 'demoDlClose' is a callback function, if 'pVfs' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void demoDlClose(sqlite3_vfs *pVfs, void *pHandle){
                                     ^
src\test_demovfs.c:635:5: note: You might need to cast the function pointer here
    demoDlClose,                  /* xDlClose */
    ^
src\test_demovfs.c:575:38: note: Parameter 'pVfs' can be declared as pointer to const
static void demoDlClose(sqlite3_vfs *pVfs, void *pHandle){
                                     ^
src\test_demovfs.c:575:50: style: Parameter 'pHandle' can be declared as pointer to const. However it seems that 'demoDlClose' is a callback function, if 'pHandle' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void demoDlClose(sqlite3_vfs *pVfs, void *pHandle){
                                                 ^
src\test_demovfs.c:635:5: note: You might need to cast the function pointer here
    demoDlClose,                  /* xDlClose */
    ^
src\test_demovfs.c:575:50: note: Parameter 'pHandle' can be declared as pointer to const
static void demoDlClose(sqlite3_vfs *pVfs, void *pHandle){
                                                 ^
src\test_demovfs.c:583:40: style: Parameter 'pVfs' can be declared as pointer to const. However it seems that 'demoRandomness' is a callback function, if 'pVfs' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int demoRandomness(sqlite3_vfs *pVfs, int nByte, char *zByte){
                                       ^
src\test_demovfs.c:636:5: note: You might need to cast the function pointer here
    demoRandomness,               /* xRandomness */
    ^
src\test_demovfs.c:583:40: note: Parameter 'pVfs' can be declared as pointer to const
static int demoRandomness(sqlite3_vfs *pVfs, int nByte, char *zByte){
                                       ^
src\test_demovfs.c:583:63: style: Parameter 'zByte' can be declared as pointer to const. However it seems that 'demoRandomness' is a callback function, if 'zByte' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int demoRandomness(sqlite3_vfs *pVfs, int nByte, char *zByte){
                                                              ^
src\test_demovfs.c:636:5: note: You might need to cast the function pointer here
    demoRandomness,               /* xRandomness */
    ^
src\test_demovfs.c:583:63: note: Parameter 'zByte' can be declared as pointer to const
static int demoRandomness(sqlite3_vfs *pVfs, int nByte, char *zByte){
                                                              ^
src\test_demovfs.c:591:35: style: Parameter 'pVfs' can be declared as pointer to const. However it seems that 'demoSleep' is a callback function, if 'pVfs' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int demoSleep(sqlite3_vfs *pVfs, int nMicro){
                                  ^
src\test_demovfs.c:637:5: note: You might need to cast the function pointer here
    demoSleep,                    /* xSleep */
    ^
src\test_demovfs.c:591:35: note: Parameter 'pVfs' can be declared as pointer to const
static int demoSleep(sqlite3_vfs *pVfs, int nMicro){
                                  ^
src\test_devsym.c:19:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_demovfs.c:680:41: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
int Sqlitetest_demovfs_Init(Tcl_Interp *interp){ return TCL_OK; }
                                        ^
src\test_devsym.c:178:43: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'devsymSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int devsymSectorSize(sqlite3_file *pFile){
                                          ^
src\test_devsym.c:239:3: note: You might need to cast the function pointer here
  devsymSectorSize,                 /* xSectorSize */
  ^
src\test_devsym.c:178:43: note: Parameter 'pFile' can be declared as pointer to const
static int devsymSectorSize(sqlite3_file *pFile){
                                          ^
src\test_devsym.c:185:54: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'devsymDeviceCharacteristics' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int devsymDeviceCharacteristics(sqlite3_file *pFile){
                                                     ^
src\test_devsym.c:240:3: note: You might need to cast the function pointer here
  devsymDeviceCharacteristics,      /* xDeviceCharacteristics */
  ^
src\test_devsym.c:185:54: note: Parameter 'pFile' can be declared as pointer to const
static int devsymDeviceCharacteristics(sqlite3_file *pFile){
                                                     ^
src\test_fs.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 151 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\tclsqlite.c:40:0: information: Include file: "sqlite_tcl.h" not found. [missingInclude]
# include "sqlite_tcl.h"   /* Special case for Windows using STDCALL */
^
src\test_fs.c:66:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_fs.c:67:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_fs.c:68:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
src\test_fs.c:69:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
src\test_fs.c:70:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
src\test_fs.c:73:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
src\test_fs.c:74:0: information: Include file: <dirent.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <dirent.h>
^
src\test_func.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 152 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_func.c:15:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_func.c:17:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_func.c:18:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_func.c:19:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
ext\fts3\fts3_write.c:4783:33: warning: Possible null pointer dereference: pSeg [nullPointer]
    assert( j<pCsr->nSegment && pSeg->iIdx==i );
                                ^
ext\fts3\fts3_write.c:4774:27: note: Assignment 'pSeg=0', assigned value is 0
    Fts3SegReader *pSeg = 0;
                          ^
ext\fts3\fts3_write.c:4779:14: note: Assuming condition is false
    for(j=0; ALWAYS(j<pCsr->nSegment); j++){
             ^
ext\fts3\fts3_write.c:4783:33: note: Null pointer dereference
    assert( j<pCsr->nSegment && pSeg->iIdx==i );
                                ^
ext\fts3\fts3_write.c:4785:9: warning: Possible null pointer dereference: pSeg [nullPointer]
    if( pSeg->aNode==0 ){
        ^
ext\fts3\fts3_write.c:4774:27: note: Assignment 'pSeg=0', assigned value is 0
    Fts3SegReader *pSeg = 0;
                          ^
ext\fts3\fts3_write.c:4779:14: note: Assuming condition is false
    for(j=0; ALWAYS(j<pCsr->nSegment); j++){
             ^
ext\fts3\fts3_write.c:4785:9: note: Null pointer dereference
    if( pSeg->aNode==0 ){
        ^
src\test_fs.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_func.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_func.c:893:11: style: The scope of the variable 'nGlobalHitCount' can be reduced. [variableScope]
      int nGlobalHitCount = aPhraseinfo[3*iCol+1];
          ^
src\test_func.c:161:53: style: Parameter 'a' can be declared as pointer to const. However it seems that 'test_agg_errmsg16_step' is a callback function, if 'a' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void test_agg_errmsg16_step(sqlite3_context *a, int b,sqlite3_value **c){
                                                    ^
src\test_func.c:705:7: note: You might need to cast the function pointer here
      test_agg_errmsg16_step, test_agg_errmsg16_final);
      ^
src\test_func.c:161:53: note: Parameter 'a' can be declared as pointer to const
static void test_agg_errmsg16_step(sqlite3_context *a, int b,sqlite3_value **c){
                                                    ^
src\test_hexio.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_func.c:476:7: style: Variable 'pEndHdr' can be declared as pointer to const [constVariablePointer]
  u8 *pEndHdr;                    /* Points to one byte past record header */
      ^
src\test_func.c:524:7: style: Variable 'pEndHdr' can be declared as pointer to const [constVariablePointer]
  u8 *pEndHdr;                    /* Points to one byte past record header */
      ^
src\test_func.c:556:14: style: Variable 'hexdigit' can be declared as const array [constVariable]
        char hexdigit[] = {
             ^
src\test_func.c:561:13: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
        u8 *z = (u8*)sqlite3_value_blob(&mem);
            ^
src\test_func.c:735:36: style: Parameter 'a' can be declared as pointer to const. However it seems that 'tStep' is a callback function, if 'a' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void tStep(sqlite3_context *a, int b, sqlite3_value **c){}
                                   ^
src\test_func.c:800:31: note: You might need to cast the function pointer here
       mxArg, SQLITE_UTF8, 0, tStep, 0, 0);
                              ^
src\test_func.c:735:36: note: Parameter 'a' can be declared as pointer to const
static void tStep(sqlite3_context *a, int b, sqlite3_value **c){}
                                   ^
src\test_func.c:736:37: style: Parameter 'a' can be declared as pointer to const. However it seems that 'tFinal' is a callback function, if 'a' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void tFinal(sqlite3_context *a){}
                                    ^
src\test_func.c:767:67: note: You might need to cast the function pointer here
  rc = sqlite3_create_function(db, "tx", 1, SQLITE_UTF8, 0, 0, 0, tFinal);
                                                                  ^
src\test_func.c:736:37: note: Parameter 'a' can be declared as pointer to const
static void tFinal(sqlite3_context *a){}
                                    ^
src\test_func.c:890:10: style: Variable 'aPhraseinfo' can be declared as pointer to const [constVariablePointer]
    int *aPhraseinfo = &aMatchinfo[2 + iPhrase*nCol*3];
         ^
src\test_hexio.c:22:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_hexio.c:23:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_hexio.c:24:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_fs.c:280:13: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  FsdirCsr *pCsr = (FsdirCsr*)cur;
            ^
src\test_fs.c:309:13: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  FsdirCsr *pCsr = (FsdirCsr*)cur;
            ^
src\test_fs.c:550:14: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  FstreeCsr *pCsr = (FstreeCsr*)cur;
             ^
src\test_fs.c:79:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <io.h>
^
src\test_hexio.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_hexio.c:35:17: style: The scope of the variable 'c' can be reduced. [variableScope]
  unsigned char c;
                ^
src\test_hexio.c:73:17: style: The scope of the variable 'c' can be reduced. [variableScope]
  unsigned char c;
                ^
src\test_hexio.c:212:11: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
    char *z = Tcl_GetStringFromObj(objv[1], &n);
          ^
src\test_hexio.c:431:13: style: Variable 'zVal' can be declared as pointer to const [constVariablePointer]
      char *zVal = Tcl_GetStringFromObj(aArg[i], &nVal);
            ^
src\test_btree.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src\test_init.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_init.c:29:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
ext\rbu\sqlite3rbu.c:93:0: information: Include file: "windows.h" not found. [missingInclude]
#include "windows.h"
^
src\test_intarray.h:84:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_intarray.c:22:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_intarray.c:23:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_intarray.c:144:20: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  intarray_cursor *pCur = (intarray_cursor *)cur;
                   ^
src\test_intarray.c:150:20: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  intarray_cursor *pCur = (intarray_cursor *)cur;
                   ^
src\test_intarray.c:180:44: style: Parameter 'tab' can be declared as pointer to const. However it seems that 'intarrayBestIndex' is a callback function, if 'tab' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int intarrayBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){
                                           ^
src\test_intarray.c:192:3: note: You might need to cast the function pointer here
  intarrayBestIndex,           /* xBestIndex - find the best query index */
  ^
src\test_intarray.c:180:44: note: Parameter 'tab' can be declared as pointer to const
static int intarrayBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){
                                           ^
src\test_intarray.c:180:69: style: Parameter 'pIdxInfo' can be declared as pointer to const. However it seems that 'intarrayBestIndex' is a callback function, if 'pIdxInfo' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int intarrayBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){
                                                                    ^
src\test_intarray.c:192:3: note: You might need to cast the function pointer here
  intarrayBestIndex,           /* xBestIndex - find the best query index */
  ^
src\test_intarray.c:180:69: note: Parameter 'pIdxInfo' can be declared as pointer to const
static int intarrayBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){
                                                                    ^
src\test_journal.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_loadext.c:14:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_journal.c:98:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_loadext.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_journal.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_malloc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 151 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_malloc.c:18:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_malloc.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_malloc.c:20:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_journal.c:250:13: style: The scope of the variable 'pp' can be reduced. [variableScope]
  jt_file **pp;
            ^
src\test_journal.c:479:11: style: The scope of the variable 'pgno' can be reduced. [variableScope]
      u32 pgno;
          ^
src\test_journal.c:604:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
    int rc;
        ^
src\test_journal.c:347:17: style: Variable 'aMagic' can be declared as const array [constVariable]
  unsigned char aMagic[] = { 0xd9, 0xd5, 0x05, 0xf9, 0x20, 0xa1, 0x63, 0xd7 };
                ^
src\test_md5.c:15:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_md5.c:16:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_md5.c:17:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_md5.c:18:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_md5.c:62:16: style: The scope of the variable 't' can be reduced. [variableScope]
        uint32 t;
               ^
src\test_md5.c:297:16: style: The scope of the variable 'x' can be reduced. [variableScope]
  unsigned int x;
               ^
src\test_md5.c:277:46: style: Parameter 'digest' can be declared as pointer to const. However it seems that 'MD5DigestToBase16' is a callback function, if 'digest' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void MD5DigestToBase16(unsigned char *digest, char *zBuf){
                                             ^
src\test_md5.c:399:21: note: You might need to cast the function pointer here
                    MD5DigestToBase16, 0);
                    ^
src\test_md5.c:277:46: note: Parameter 'digest' can be declared as pointer to const
static void MD5DigestToBase16(unsigned char *digest, char *zBuf){
                                             ^
src\test_md5.c:295:47: style: Parameter 'digest' can be declared as const array. However it seems that 'MD5DigestToBase10x8' is a callback function, if 'digest' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void MD5DigestToBase10x8(unsigned char digest[16], char zDigest[50]){
                                              ^
src\test_md5.c:401:21: note: You might need to cast the function pointer here
                    MD5DigestToBase10x8, 0);
                    ^
src\test_md5.c:295:47: note: Parameter 'digest' can be declared as const array
static void MD5DigestToBase10x8(unsigned char digest[16], char zDigest[50]){
                                              ^
src\select.c:1272:7: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
      pSort->pDeferredRowLoad = &sRowLoadInfo;
      ^
src\select.c:2271:11: warning: Either the condition 'pColExpr!=0' is redundant or there is possible null pointer dereference: pColExpr. [nullPointerRedundantCheck]
      if( pColExpr->op==TK_COLUMN
          ^
src\select.c:2267:14: note: Assuming that condition 'pColExpr!=0' is not redundant
      while( ALWAYS(pColExpr!=0) && pColExpr->op==TK_DOT ){
             ^
src\select.c:2271:11: note: Null pointer dereference
      if( pColExpr->op==TK_COLUMN
          ^
src\select.c:3548:18: style: The comparison 'pKeyDup == 0' is always true. [knownConditionTrueFalse]
  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */
                 ^
src\select.c:3540:22: note: 'pKeyDup' is assigned value '0' here.
  KeyInfo *pKeyDup = 0; /* Comparison information for duplicate removal */
                     ^
src\select.c:3548:18: note: The comparison 'pKeyDup == 0' is always true.
  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */
                 ^
src\test_multiplex.c:50:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\select.c:265:10: style: The scope of the variable 'p' can be reduced. [variableScope]
  Token *p;
         ^
src\test_multiplex.c:51:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_multiplex.c:52:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_multiplex.c:53:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\select.c:391:7: style: The scope of the variable 'iCol' can be reduced. [variableScope]
  int iCol;            /* Index of column matching zCol */
      ^
src\select.c:1613:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\select.c:2355:12: style: The scope of the variable 'pColl' can be reduced. [variableScope]
  CollSeq *pColl;
           ^
src\select.c:2510:9: style: The scope of the variable 'v' can be reduced. [variableScope]
  Vdbe *v = 0;
        ^
src\select.c:2511:7: style: The scope of the variable 'iLimit' can be reduced. [variableScope]
  int iLimit = 0;
      ^
src\select.c:2512:7: style: The scope of the variable 'iOffset' can be reduced. [variableScope]
  int iOffset;
      ^
src\select.c:3510:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;             /* Loop counters */
         ^
src\select.c:6645:12: style: The scope of the variable 'k' can be reduced. [variableScope]
    int j, k;
           ^
src\test_mutex.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_mutex.c:15:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_mutex.c:17:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_mutex.c:18:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_mutex.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\select.c:546:15: style: Variable 'zName' can be declared as pointer to const [constVariablePointer]
        char *zName;   /* Name of column in the right table */
              ^
src\select.c:681:16: style: Parameter 'pInfo' can be declared as pointer to const [constParameterPointer]
  RowLoadInfo *pInfo         /* Info needed to complete the row load */
               ^
src\select.c:928:13: style: Parameter 'pEList' can be declared as pointer to const [constParameterPointer]
  ExprList *pEList,  /* Expression for each element */
            ^
src\select.c:1200:15: style: Variable 'pEList' can be declared as pointer to const [constVariablePointer]
    ExprList *pEList;
              ^
src\select.c:1605:13: style: Parameter 'pList' can be declared as pointer to const [constParameterPointer]
  ExprList *pList,     /* Form the KeyInfo object from this ExprList */
            ^
src\select.c:1683:15: style: Parameter 'pDest' can be declared as pointer to const [constParameterPointer]
  SelectDest *pDest /* Write the sorted results here */
              ^
src\select.c:1691:13: style: Variable 'pOrderBy' can be declared as pointer to const [constVariablePointer]
  ExprList *pOrderBy = pSort->pOrderBy;
            ^
src\select.c:2176:13: style: Variable 'zName' can be declared as pointer to const [constVariablePointer]
      char *zName = pEList->a[i].zEName;
            ^
src\select.c:2191:15: style: Variable 'zName' can be declared as pointer to const [constVariablePointer]
        char *zName = 0;
              ^
src\select.c:2260:27: style: Variable 'pCollide' can be declared as pointer to const [constVariablePointer]
    struct ExprList_item *pCollide;
                          ^
src\select.c:2355:12: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
  CollSeq *pColl;
           ^
src\select.c:3262:61: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p){
                                                            ^
src\select.c:3294:11: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
  Select *p,              /* The SELECT statement */
          ^
src\select.c:3295:15: style: Parameter 'pIn' can be declared as pointer to const [constParameterPointer]
  SelectDest *pIn,        /* Coroutine supplying data */
              ^
src\select.c:3947:20: style: Variable 'pNat' can be declared as pointer to const [constVariablePointer]
          CollSeq *pNat = sqlite3ExprCollSeq(pSubst->pParse, pNew);
                   ^
src\select.c:3948:20: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
          CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse,
                   ^
src\select.c:4102:8: style: Variable 'aCsrMap' can be declared as pointer to const [constVariablePointer]
  int *aCsrMap = pWalker->u.aiCol;
       ^
src\select.c:4838:9: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
  Expr *pExpr          /* Overall expression: COLUMN=VALUE or VALUE=COLUMN */
        ^
src\test_multiplex.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\select.c:4933:11: style: Variable 'pColumn' can be declared as pointer to const [constVariablePointer]
    Expr *pColumn = pConst->apExpr[i*2];
          ^
src\select.c:5228:12: style: Variable 'pSrc' can be declared as pointer to const [constVariablePointer]
  SrcItem *pSrc;        /* The subquery FROM term into which WHERE is pushed */
           ^
src\select.c:5262:20: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
          CollSeq *pColl = sqlite3ExprCollSeq(pParse, pList->a[ii].pExpr);
                   ^
src\select.c:5384:10: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Table *pTab;       /* The table that describes the subquery */
         ^
src\select.c:5463:13: style: Variable 'pEList' can be declared as pointer to const [constVariablePointer]
  ExprList *pEList;                     /* Arguments to agg function */
            ^
src\select.c:5518:9: style: Variable 'pExpr' can be declared as pointer to const [constVariablePointer]
  Expr *pExpr;
        ^
src\select.c:5602:25: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  struct ExprList_item *a;
                        ^
src\select.c:6677:23: style: Variable 'pCol' can be declared as pointer to const [constVariablePointer]
  struct AggInfo_col *pCol;
                      ^
src\select.c:6812:15: style: Variable 'pList' can be declared as pointer to const [constVariablePointer]
    ExprList *pList;
              ^
src\select.c:7150:11: style: Variable 'pSel' can be declared as pointer to const [constVariablePointer]
  Select *pSel;
          ^
src\select.c:7156:13: style: Variable 'pS1' can be declared as pointer to const [constVariablePointer]
    Select *pS1;
            ^
src\select.c:7341:10: style: Parameter 'pParse' can be declared as pointer to const [constParameterPointer]
  Parse *pParse,          /* Parsing context */
         ^
src\select.c:7906:15: style: Variable 'pCteUse' can be declared as pointer to const [constVariablePointer]
      CteUse *pCteUse = pItem->u2.pCteUse;
              ^
src\select.c:8107:13: style: Variable 'pWin' can be declared as pointer to const [constVariablePointer]
    Window *pWin = p->pWin;      /* Main window object (or NULL) */
            ^
src\select.c:8500:17: style: Variable 'pBase' can be declared as pointer to const [constVariablePointer]
          Expr *pBase = sqlite3ExprSkipCollateAndLikely(pX);
                ^
src\select.c:8594:30: style: Variable 'pF' can be declared as pointer to const [constVariablePointer]
        struct AggInfo_func *pF = &pAggInfo->aFunc[0];
                             ^
src\select.c:8724:32: style: Variable 'pF' can be declared as pointer to const [constVariablePointer]
          struct AggInfo_func *pF = pAggInfo->aFunc;
                               ^
src\test_mutex.c:105:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pRet [nullPointerOutOfMemory]
  pRet->eType = eType;
  ^
src\test_mutex.c:97:35: note: Assuming allocation function fails
    pRet = (sqlite3_mutex *)malloc(sizeof(sqlite3_mutex));
                                  ^
src\test_mutex.c:97:12: note: Assignment 'pRet=(sqlite3_mutex*)malloc(sizeof(sqlite3_mutex))', assigned value is 0
    pRet = (sqlite3_mutex *)malloc(sizeof(sqlite3_mutex));
           ^
src\test_mutex.c:105:3: note: Null pointer dereference
  pRet->eType = eType;
  ^
src\test_mutex.c:106:3: warning: If memory allocation fails, then there is a possible null pointer dereference: pRet [nullPointerOutOfMemory]
  pRet->pReal = pReal;
  ^
src\test_mutex.c:97:35: note: Assuming allocation function fails
    pRet = (sqlite3_mutex *)malloc(sizeof(sqlite3_mutex));
                                  ^
src\test_mutex.c:97:12: note: Assignment 'pRet=(sqlite3_mutex*)malloc(sizeof(sqlite3_mutex))', assigned value is 0
    pRet = (sqlite3_mutex *)malloc(sizeof(sqlite3_mutex));
           ^
src\test_mutex.c:106:3: note: Null pointer dereference
  pRet->pReal = pReal;
  ^
src\select.c:807:9: style: Variable 'pOp' is assigned a value that is never used. [unreadVariable]
    pOp = 0; /* Ensure pOp not used after sqlite3VdbeAddOp3() */
        ^
src\select.c:2510:11: style: Variable 'v' is assigned a value that is never used. [unreadVariable]
  Vdbe *v = 0;
          ^
src\select.c:2511:14: style: Variable 'iLimit' is assigned a value that is never used. [unreadVariable]
  int iLimit = 0;
             ^
src\select.c:4385:18: style: Variable 'iNewParent' is assigned a value that is never used. [unreadVariable]
  int iNewParent = -1;/* Replacement table for iParent */
                 ^
src\test_onefile.c:82:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_onefile.c:83:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_onefile.c:84:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\tclsqlite.c:903:12: style: Parameter 'db' can be declared as pointer to const. However it seems that 'DbPreUpdateHandler' is a callback function, if 'db' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  sqlite3 *db,
           ^
src\tclsqlite.c:1978:51: note: You might need to cast the function pointer here
  sqlite3_preupdate_hook(db, (pDb->pPreUpdateHook?DbPreUpdateHandler:0), pDb);
                                                  ^
src\tclsqlite.c:903:12: note: Parameter 'db' can be declared as pointer to const
  sqlite3 *db,
           ^
src\test_multiplex.c:861:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\test_onefile.c:272:13: style: Variable 'pTmp' can be declared as pointer to const [constVariablePointer]
  tmp_file *pTmp = (tmp_file *)pFile;
            ^
src\test_onefile.c:316:34: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'tmpSync' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int tmpSync(sqlite3_file *pFile, int flags){
                                 ^
src\test_onefile.c:235:3: note: You might need to cast the function pointer here
  tmpSync,                      /* xSync */
  ^
src\test_onefile.c:316:34: note: Parameter 'pFile' can be declared as pointer to const
static int tmpSync(sqlite3_file *pFile, int flags){
                                 ^
src\test_onefile.c:324:13: style: Variable 'pTmp' can be declared as pointer to const [constVariablePointer]
  tmp_file *pTmp = (tmp_file *)pFile;
            ^
src\test_onefile.c:332:34: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'tmpLock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int tmpLock(sqlite3_file *pFile, int eLock){
                                 ^
src\test_onefile.c:237:3: note: You might need to cast the function pointer here
  tmpLock,                      /* xLock */
  ^
src\test_onefile.c:332:34: note: Parameter 'pFile' can be declared as pointer to const
static int tmpLock(sqlite3_file *pFile, int eLock){
                                 ^
src\test_onefile.c:339:36: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'tmpUnlock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int tmpUnlock(sqlite3_file *pFile, int eLock){
                                   ^
src\test_onefile.c:238:3: note: You might need to cast the function pointer here
  tmpUnlock,                    /* xUnlock */
  ^
src\test_onefile.c:339:36: note: Parameter 'pFile' can be declared as pointer to const
static int tmpUnlock(sqlite3_file *pFile, int eLock){
                                   ^
src\test_onefile.c:354:41: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'tmpFileControl' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int tmpFileControl(sqlite3_file *pFile, int op, void *pArg){
                                        ^
src\test_onefile.c:240:3: note: You might need to cast the function pointer here
  tmpFileControl,               /* xFileControl */
  ^
src\test_onefile.c:354:41: note: Parameter 'pFile' can be declared as pointer to const
static int tmpFileControl(sqlite3_file *pFile, int op, void *pArg){
                                        ^
src\test_onefile.c:354:62: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'tmpFileControl' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int tmpFileControl(sqlite3_file *pFile, int op, void *pArg){
                                                             ^
src\test_onefile.c:240:3: note: You might need to cast the function pointer here
  tmpFileControl,               /* xFileControl */
  ^
src\test_onefile.c:354:62: note: Parameter 'pArg' can be declared as pointer to const
static int tmpFileControl(sqlite3_file *pFile, int op, void *pArg){
                                                             ^
src\test_onefile.c:361:40: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'tmpSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int tmpSectorSize(sqlite3_file *pFile){
                                       ^
src\test_onefile.c:241:3: note: You might need to cast the function pointer here
  tmpSectorSize,                /* xSectorSize */
  ^
src\test_onefile.c:361:40: note: Parameter 'pFile' can be declared as pointer to const
static int tmpSectorSize(sqlite3_file *pFile){
                                       ^
src\test_onefile.c:368:51: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'tmpDeviceCharacteristics' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int tmpDeviceCharacteristics(sqlite3_file *pFile){
                                                  ^
src\test_onefile.c:242:3: note: You might need to cast the function pointer here
  tmpDeviceCharacteristics,     /* xDeviceCharacteristics */
  ^
src\test_onefile.c:368:51: note: Parameter 'pFile' can be declared as pointer to const
static int tmpDeviceCharacteristics(sqlite3_file *pFile){
                                                  ^
src\test_onefile.c:528:17: style: Variable 'pReal' can be declared as pointer to const [constVariablePointer]
  fs_real_file *pReal = p->pReal;
                ^
src\test_onefile.c:540:33: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'fsLock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int fsLock(sqlite3_file *pFile, int eLock){
                                ^
src\test_onefile.c:216:3: note: You might need to cast the function pointer here
  fsLock,                       /* xLock */
  ^
src\test_onefile.c:540:33: note: Parameter 'pFile' can be declared as pointer to const
static int fsLock(sqlite3_file *pFile, int eLock){
                                ^
src\test_onefile.c:547:35: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'fsUnlock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int fsUnlock(sqlite3_file *pFile, int eLock){
                                  ^
src\test_onefile.c:217:3: note: You might need to cast the function pointer here
  fsUnlock,                     /* xUnlock */
  ^
src\test_onefile.c:547:35: note: Parameter 'pFile' can be declared as pointer to const
static int fsUnlock(sqlite3_file *pFile, int eLock){
                                  ^
src\test_onefile.c:562:40: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'fsFileControl' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int fsFileControl(sqlite3_file *pFile, int op, void *pArg){
                                       ^
src\test_onefile.c:219:3: note: You might need to cast the function pointer here
  fsFileControl,                /* xFileControl */
  ^
src\test_onefile.c:562:40: note: Parameter 'pFile' can be declared as pointer to const
static int fsFileControl(sqlite3_file *pFile, int op, void *pArg){
                                       ^
src\test_onefile.c:562:61: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'fsFileControl' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int fsFileControl(sqlite3_file *pFile, int op, void *pArg){
                                                            ^
src\test_onefile.c:219:3: note: You might need to cast the function pointer here
  fsFileControl,                /* xFileControl */
  ^
src\test_onefile.c:562:61: note: Parameter 'pArg' can be declared as pointer to const
static int fsFileControl(sqlite3_file *pFile, int op, void *pArg){
                                                            ^
src\test_onefile.c:570:39: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'fsSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int fsSectorSize(sqlite3_file *pFile){
                                      ^
src\test_onefile.c:220:3: note: You might need to cast the function pointer here
  fsSectorSize,                 /* xSectorSize */
  ^
src\test_onefile.c:570:39: note: Parameter 'pFile' can be declared as pointer to const
static int fsSectorSize(sqlite3_file *pFile){
                                      ^
src\test_onefile.c:577:50: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'fsDeviceCharacteristics' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int fsDeviceCharacteristics(sqlite3_file *pFile){
                                                 ^
src\test_onefile.c:221:3: note: You might need to cast the function pointer here
  fsDeviceCharacteristics,      /* xDeviceCharacteristics */
  ^
src\test_onefile.c:577:50: note: Parameter 'pFile' can be declared as pointer to const
static int fsDeviceCharacteristics(sqlite3_file *pFile){
                                                 ^
src\test_osinst.c:72:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_osinst.c:78:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_osinst.c:79:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_osinst.c:237:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/time.h>
^
src\test_osinst.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_pcache.c:24:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_pcache.c:25:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_pcache.c:26:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_pcache.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_pcache.c:460:38: warning: Assert statement calls a function which may have desired side effects: 'testpcacheCreate'. [assertWithSideEffect]
      assert( defaultPcache.xCreate!=testpcacheCreate );
                                     ^
src\test_pcache.c:53:33: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'testpcacheInit' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int testpcacheInit(void *pArg){
                                ^
src\test_pcache.c:437:5: note: You might need to cast the function pointer here
    testpcacheInit,
    ^
src\test_pcache.c:53:33: note: Parameter 'pArg' can be declared as pointer to const
static int testpcacheInit(void *pArg){
                                ^
src\test_pcache.c:67:38: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'testpcacheShutdown' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void testpcacheShutdown(void *pArg){
                                     ^
src\test_pcache.c:438:5: note: You might need to cast the function pointer here
    testpcacheShutdown,
    ^
src\test_pcache.c:67:38: note: Parameter 'pArg' can be declared as pointer to const
static void testpcacheShutdown(void *pArg){
                                     ^
src\test_pcache.c:170:15: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  testpcache *p = (testpcache*)pCache;
              ^
src\test_pcache.c:181:15: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  testpcache *p = (testpcache*)pCache;
              ^
src\test_pcache.c:292:24: style: Parameter 'pOldPage' can be declared as pointer to const. However it seems that 'testpcacheUnpin' is a callback function, if 'pOldPage' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  sqlite3_pcache_page *pOldPage,
                       ^
src\test_pcache.c:443:5: note: You might need to cast the function pointer here
    testpcacheUnpin,
    ^
src\test_pcache.c:292:24: note: Parameter 'pOldPage' can be declared as pointer to const
  sqlite3_pcache_page *pOldPage,
                       ^
src\test_osinst.c:829:46: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static unsigned int get32bits(unsigned char *p){
                                             ^
src\test_pcache.c:337:24: style: Parameter 'pOldPage' can be declared as pointer to const. However it seems that 'testpcacheRekey' is a callback function, if 'pOldPage' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  sqlite3_pcache_page *pOldPage,
                       ^
src\test_pcache.c:444:5: note: You might need to cast the function pointer here
    testpcacheRekey,
    ^
src\test_pcache.c:337:24: note: Parameter 'pOldPage' can be declared as pointer to const
  sqlite3_pcache_page *pOldPage,
                       ^
src\test_osinst.c:1016:14: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  VfslogCsr *pCsr = (VfslogCsr *)pCursor;
             ^
src\test_osinst.c:1017:15: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  VfslogVtab *p = (VfslogVtab *)pCursor->pVtab;
              ^
src\test_osinst.c:1065:14: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  VfslogCsr *pCsr = (VfslogCsr *)pCursor;
             ^
src\test_quota.h:30:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_quota.h:31:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
src\test_quota.h:32:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
src\test_quota.h:33:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
src\test_quota.c:31:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_quota.c:32:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_quota.c:52:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
src\test_rtree.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_quota.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_rtree.c:16:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_sqllog.c:77:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_sqllog.c:79:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
src\test_sqllog.c:80:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_sqllog.c:81:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_sqllog.c:82:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_sqllog.c:84:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
src\test_sqllog.c:85:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
src\test_schema.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 149 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_schema.c:45:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_schema.c:46:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_schema.c:47:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_sqllog.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_superlock.c:21:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_superlock.c:22:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>               /* memset(), strlen() */
^
src\test_superlock.c:23:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>               /* assert() */
^
src\test_schema.c:153:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  schema_cursor *pCur = (schema_cursor *)cur;
                 ^
src\test_schema.c:262:42: style: Parameter 'tab' can be declared as pointer to const. However it seems that 'schemaBestIndex' is a callback function, if 'tab' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int schemaBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){
                                         ^
src\test_schema.c:274:3: note: You might need to cast the function pointer here
  schemaBestIndex,
  ^
src\test_schema.c:262:42: note: Parameter 'tab' can be declared as pointer to const
static int schemaBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){
                                         ^
src\test_schema.c:262:67: style: Parameter 'pIdxInfo' can be declared as pointer to const. However it seems that 'schemaBestIndex' is a callback function, if 'pIdxInfo' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int schemaBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){
                                                                  ^
src\test_schema.c:274:3: note: You might need to cast the function pointer here
  schemaBestIndex,
  ^
src\test_schema.c:262:67: note: Parameter 'pIdxInfo' can be declared as pointer to const
static int schemaBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){
                                                                  ^
src\test_superlock.c:310:9: style: Variable 'zPath' can be declared as pointer to const [constVariablePointer]
  char *zPath;
        ^
src\test_superlock.c:311:9: style: Variable 'zVfs' can be declared as pointer to const [constVariablePointer]
  char *zVfs = 0;
        ^
src\test_osinst.c:1138:13: style: Variable 'zVfs' can be declared as pointer to const [constVariablePointer]
      char *zVfs;
            ^
src\test_osinst.c:1139:13: style: Variable 'zMsg' can be declared as pointer to const [constVariablePointer]
      char *zMsg;
            ^
src\test_osinst.c:1154:13: style: Variable 'zVfs' can be declared as pointer to const [constVariablePointer]
      char *zVfs;
            ^
src\test_osinst.c:1169:13: style: Variable 'zVfs' can be declared as pointer to const [constVariablePointer]
      char *zVfs;
            ^
src\test_osinst.c:1170:13: style: Variable 'zParent' can be declared as pointer to const [constVariablePointer]
      char *zParent;
            ^
src\test_osinst.c:1171:13: style: Variable 'zLog' can be declared as pointer to const [constVariablePointer]
      char *zLog;
            ^
src\test_osinst.c:811:17: style: struct member 'VfslogVtab::pFd' is never used. [unusedStructMember]
  sqlite3_file *pFd;              /* File descriptor open on vfslog file */
                ^
src\test_osinst.c:813:9: style: struct member 'VfslogVtab::zFile' is never used. [unusedStructMember]
  char *zFile;                    /* File name for pFd */
        ^
src\test_osinst.c:823:9: style: struct member 'VfslogCsr::zTransient' is never used. [unusedStructMember]
  char *zTransient;               /* Transient 'file' string */
        ^
src\test_osinst.c:824:7: style: struct member 'VfslogCsr::nFile' is never used. [unusedStructMember]
  int nFile;                      /* Size of array azFile[] */
      ^
src\test_osinst.c:825:10: style: struct member 'VfslogCsr::azFile' is never used. [unusedStructMember]
  char **azFile;                  /* File strings */
         ^
src\test_osinst.c:826:17: style: struct member 'VfslogCsr::aBuf' is never used. [unusedStructMember]
  unsigned char aBuf[1024];       /* Current vfs log entry (read from file) */
                ^
src\test_osinst.c:1119:30: style: struct member 'SqliteDb::db' is never used. [unusedStructMember]
  struct SqliteDb { sqlite3 *db; };
                             ^
src\test_osinst.c:1120:12: style: Unused variable: db [unusedVariable]
  sqlite3 *db;
           ^
src\test_osinst.c:1121:15: style: Unused variable: cmdInfo [unusedVariable]
  Tcl_CmdInfo cmdInfo;
              ^
src\test_osinst.c:1189:13: style: Unused variable: zDb [unusedVariable]
      char *zDb;
            ^
src\test_syscall.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_syscall.c:78:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_syscall.c:80:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_syscall.c:81:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_syscall.c:82:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\test_syscall.c:89:0: information: Include file: <sys/mman.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/mman.h>
^
src\test_syscall.c:90:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
src\test_syscall.c:91:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
src\test_sqllog.c:310:11: style: Local variable 'rc' shadows outer variable [shadowVariable]
      int rc;
          ^
src\test_sqllog.c:296:7: note: Shadowed declaration
  int rc;
      ^
src\test_sqllog.c:310:11: note: Shadow variable
      int rc;
          ^
src\test_sqllog.c:193:13: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
      char *z;
            ^
src\test_tclsh.c:22:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\os_unix.c:3680:8: error: syntax error [syntaxError]
  rc = fdatasync(fd);
       ^
src\test_malloc.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_tclsh.c:27:0: information: Include file: <sys/resource.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/resource.h>
^
src\test_quota.c:1133:21: warning: Identical inner 'if' condition is always true. [identicalInnerCondition]
    if( pFile->iSize<szNew ){
                    ^
src\test_quota.c:1131:44: note: outer condition: pFile->iSize<szNew
  if( (pFile = p->pFile)!=0 && pFile->iSize<szNew ){
                                           ^
src\test_quota.c:1133:21: note: identical inner condition: pFile->iSize<szNew
    if( pFile->iSize<szNew ){
                    ^
src\test_quota.c:1131:14: style: Redundant initialization for 'pFile'. The initialized value is overwritten before it is read. [redundantInitialization]
  if( (pFile = p->pFile)!=0 && pFile->iSize<szNew ){
             ^
src\test_quota.c:1129:20: note: pFile is initialized
  quotaFile *pFile = p->pFile;
                   ^
src\test_quota.c:1131:14: note: pFile is overwritten
  if( (pFile = p->pFile)!=0 && pFile->iSize<szNew ){
             ^
src\test_quota.c:434:14: style: The scope of the variable 'pQuotaOpen' can be reduced. [variableScope]
  quotaConn *pQuotaOpen;                     /* The new quota file descriptor */
             ^
src\test_quota.c:437:17: style: The scope of the variable 'pSubOpen' can be reduced. [variableScope]
  sqlite3_file *pSubOpen;                    /* Real file descriptor */
                ^
src\test_quota.c:494:14: style: The scope of the variable 'pFile' can be reduced. [variableScope]
  quotaFile *pFile;                          /* Files in the quota */
             ^
src\test_quota.c:609:15: style: The scope of the variable 'pGroup' can be reduced. [variableScope]
  quotaGroup *pGroup;
              ^
src\test_quota.c:635:15: style: The scope of the variable 'pGroup' can be reduced. [variableScope]
  quotaGroup *pGroup;
              ^
src\test_quota.c:920:18: style: The scope of the variable 'pFile' can be reduced. [variableScope]
      quotaFile *pFile;
                 ^
src\test_quota.c:1234:7: style: The scope of the variable 'diff' can be reduced. [variableScope]
  int diff;               /* Difference between filenames */
      ^
src\test_quota.c:1235:8: style: The scope of the variable 'c' can be reduced. [variableScope]
  char c;                 /* First character past end of pattern */
       ^
src\test_quota.c:410:35: style: Parameter 'zOld' can be declared as pointer to const [constParameterPointer]
static void quota_mbcs_free(char *zOld){
                                  ^
src\test_syscall.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_tclvar.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_tclvar.c:40:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_tclvar.c:41:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\test_syscall.c:502:11: style: Variable 'zFunc' can be declared as pointer to const [constVariablePointer]
    char *zFunc = Tcl_GetStringFromObj(objv[2], &nFunc);
          ^
src\test_syscall.c:725:16: style: Variable 'pVfs' can be declared as pointer to const [constVariablePointer]
  sqlite3_vfs *pVfs = sqlite3_vfs_find(0);
               ^
src\test_syscall.c:580:17: style: struct member 'Errno::z' is never used. [unusedStructMember]
    const char *z;
                ^
src\test_syscall.c:710:21: style: struct member 'SyscallCmd::xCmd' is never used. [unusedStructMember]
    Tcl_ObjCmdProc *xCmd;
                    ^
src\test_malloc.c:1046:64: warning: Either the condition 'bufid<=2' is redundant or the array 'azBuf[2][10000]' is accessed at index 2, which is out of bounds. [arrayIndexOutOfBoundsCond]
    rc = sqlite3_db_config(db, SQLITE_DBCONFIG_LOOKASIDE, azBuf[bufid], sz,cnt);
                                                               ^
src\test_malloc.c:1045:30: note: Assuming that condition 'bufid<=2' is not redundant
  }else if( bufid>=1 && bufid<=2 && sz*cnt<=sizeof(azBuf[0]) ){
                             ^
src\test_malloc.c:1046:64: note: Array index out of bounds
    rc = sqlite3_db_config(db, SQLITE_DBCONFIG_LOOKASIDE, azBuf[bufid], sz,cnt);
                                                               ^
src\test_tclvar.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_malloc.c:1084:5: error: Common realloc mistake: 'zBuf' nulled but not freed upon failure [memleakOnRealloc]
    zBuf = realloc(zBuf, nByte);
    ^
src\test_thread.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 149 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_vdbecov.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_malloc.c:390:9: style: Variable 'zHex' can be declared as pointer to const [constVariablePointer]
  char *zHex;
        ^
src\test_thread.c:23:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
src\test_thread.c:26:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
src\test_vdbecov.c:16:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_tclvar.c:136:12: style: The scope of the variable 'p' can be reduced. [variableScope]
  Tcl_Obj *p;
           ^
src\test_tclvar.c:275:13: style: The scope of the variable 'z3' can be reduced. [variableScope]
      char *z3;
            ^
src\test_tclvar.c:323:12: style: The scope of the variable 'pRes' can be reduced. [variableScope]
  Tcl_Obj *pRes;
           ^
src\test_vfs.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_osinst.c:75:0: information: Include file: <windows.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <windows.h>
^
src\test_osinst.c:222:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
src\test_thread.c:274:7: style: Local variable 'sqlite3TestMakePointerStr' shadows outer function [shadowFunction]
  int sqlite3TestMakePointerStr(Tcl_Interp *interp, char *zPtr, void *p);
      ^
src\test_thread.c:69:12: note: Shadowed declaration
extern int sqlite3TestMakePointerStr(Tcl_Interp *, char *, void *);
           ^
src\test_thread.c:274:7: note: Shadow variable
  int sqlite3TestMakePointerStr(Tcl_Interp *interp, char *zPtr, void *p);
      ^
src\test_vdbecov.c:109:40: style: Parameter 'interp' can be declared as pointer to const [constParameterPointer]
int Sqlitetestvdbecov_Init(Tcl_Interp *interp){
                                       ^
src\test_thread.c:92:9: style: Variable 'zMsg' can be declared as pointer to const [constVariablePointer]
  char *zMsg;
        ^
src\test_thread.c:180:28: style: Variable 'zVarname' can be declared as pointer to const [constVariablePointer]
  Tcl_Size nVarname; char *zVarname;
                           ^
src\test_thread.c:181:27: style: Variable 'zScript' can be declared as pointer to const [constVariablePointer]
  Tcl_Size nScript; char *zScript;
                          ^
src\test_thread.c:230:9: style: Variable 'zMsg' can be declared as pointer to const [constVariablePointer]
  char *zMsg;
        ^
src\test_vfs.c:29:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_thread.c:327:11: style: struct member 'SubCommand::zName' is never used. [unusedStructMember]
    char *zName;
          ^
src\test_windirent.h:27:0: information: Include file: "windows.h" not found. [missingInclude]
#include "windows.h"
^
src\test_windirent.h:33:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_windirent.h:39:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
src\test_windirent.h:40:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\test_windirent.h:41:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
src\test_windirent.h:42:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <io.h>
^
src\test_windirent.h:43:0: information: Include file: <limits.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <limits.h>
^
src\test_windirent.h:44:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
src\test_windirent.h:45:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
src\test_window.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_window.c:14:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
src\test_wsd.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\threads.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 152 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\threads.c:39:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
src\tokenize.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_vfs.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\tokenize.c:19:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\tokenize.c:148:0: information: Include file: "keywordhash.h" not found. [missingInclude]
#include "keywordhash.h"
^
autosetup\jimsh0.c:22275:39: warning: Either the condition 'exp==NULL' is redundant or there is possible null pointer dereference: exp. [nullPointerRedundantCheck]
 fprintf(stderr, "Compiling: '%s'\n", exp);
                                      ^
autosetup\jimsh0.c:22279:10: note: Assuming that condition 'exp==NULL' is not redundant
 if (exp == NULL)
         ^
autosetup\jimsh0.c:22275:39: note: Null pointer dereference
 fprintf(stderr, "Compiling: '%s'\n", exp);
                                      ^
src\test_window.c:44:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\test_window.c:51:17: style: The scope of the variable 'zResult' can be reduced. [variableScope]
    const char *zResult;
                ^
src\test_window.c:261:18: style: Variable 'pInt' can be declared as pointer to const [constVariablePointer]
  sqlite3_int64 *pInt;
                 ^
src\test_window.c:272:18: style: Variable 'pInt' can be declared as pointer to const [constVariablePointer]
  sqlite3_int64 *pInt;
                 ^
src\treeview.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\tokenize.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_quota.c:49:0: information: Include file: <windows.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <windows.h>
^
src\test_quota.c:50:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <io.h>
^
src\tokenize.c:718:15: style: The comparison 'nErr == 0' is always true. [knownConditionTrueFalse]
  assert( nErr==0 );
              ^
src\tokenize.c:600:14: note: 'nErr' is assigned value '0' here.
  int nErr = 0;                   /* Number of errors encountered */
             ^
src\tokenize.c:718:15: note: The comparison 'nErr == 0' is always true.
  assert( nErr==0 );
              ^
src\tokenize.c:602:9: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
  int n = 0;                      /* Length of the next token token */
        ^
src\treeview.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_vfs.c:949:7: style: The scope of the variable 'nLock' can be reduced. [variableScope]
  int nLock;
      ^
src\test_vfs.c:1155:13: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
        u8 *a = Tcl_GetByteArrayFromObj(objv[3], &n);
            ^
src\test_vfs.c:1497:11: style: Variable 'zSwitch' can be declared as pointer to const [constVariablePointer]
    char *zSwitch;
          ^
src\trigger.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\update.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\test_quota.c:384:5: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
  n = strlen(zUtf8);
    ^
src\update.c:294:2: information: Limiting ValueFlow analysis in function 'sqlite3Update' since it is too complex. Please specify --check-level=exhaustive to perform full analysis. [checkLevelNormal]
){
 ^
src\trigger.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\update.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\upsert.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\utf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 151 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\utf.c:37:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
src\upsert.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\utf.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\test_quota.c:1490:12: style: The scope of the variable 'pGroupTerm' can be reduced. [variableScope]
  Tcl_Obj *pGroupTerm;
           ^
src\test_quota.c:1602:9: style: Variable 'zBuf' can be declared as pointer to const [constVariablePointer]
  char *zBuf;
        ^
src\treeview.c:242:18: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( pItem->fg.isUsing ){
                 ^
src\treeview.c:241:18: note: First condition
    if( pItem->fg.isUsing ) n++;
                 ^
src\treeview.c:242:18: note: Second condition
    if( pItem->fg.isUsing ){
                 ^
src\treeview.c:58:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;
          ^
src\treeview.c:59:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\treeview.c:140:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\treeview.c:248:16: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
        Table *pTab = pItem->pSTab;
               ^
src\treeview.c:383:9: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
  Expr *pExpr,            /* Value for PRECEDING or FOLLOWING */
        ^
src\treeview.c:723:17: style: Variable 'pOB' can be declared as pointer to const [constVariablePointer]
          Expr *pOB = pExpr->pLeft;
                ^
src\treeview.c:910:13: style: Variable 'zName' can be declared as pointer to const [constVariablePointer]
      char *zName = pList->a[i].zEName;
            ^
src\treeview.c:976:13: style: Variable 'zName' can be declared as pointer to const [constVariablePointer]
      char *zName = pList->a[i].zName;
            ^
src\update.c:191:13: style: Parameter 'pChanges' can be declared as pointer to const [constParameterPointer]
  ExprList *pChanges,             /* List of expressions to return */
            ^
src\update.c:193:9: style: Parameter 'pWhere' can be declared as pointer to const [constParameterPointer]
  Expr *pWhere,                   /* WHERE clause for query */
        ^
src\update.c:205:10: style: Variable 'pTab' can be declared as pointer to const [constVariablePointer]
  Table *pTab = pTabList->a[0].pSTab;
         ^
src\treeview.c:265:9: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
  int n = 0;
        ^
src\utf.c:453:7: style: Condition 'bom' is always false [knownConditionTrueFalse]
  if( bom ){
      ^
src\utf.c:439:12: note: Assignment 'bom=0', assigned value is 0
  u8 bom = 0;
           ^
src\utf.c:453:7: note: Condition 'bom' is always false
  if( bom ){
      ^
src\utf.c:552:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
src\trigger.c:425:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\trigger.c:464:10: style: Parameter 'pName' can be declared as pointer to const [constParameterPointer]
  Token *pName,               /* The target name */
         ^
src\trigger.c:747:58: style: Parameter 'pEList' can be declared as pointer to const [constParameterPointer]
static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){
                                                         ^
src\trigger.c:759:39: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
static int tempTriggersExist(sqlite3 *db){
                                      ^
src\trigger.c:904:9: style: Parameter 'pTerm' can be declared as pointer to const [constParameterPointer]
  Expr *pTerm         /* A term in the RETURNING clause */
        ^
src\trigger.c:925:10: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
  Table *pTab           /* The table being updated */
         ^
src\trigger.c:985:12: style: Variable 'pSrc' can be declared as pointer to const [constVariablePointer]
  SrcList *pSrc;
           ^
src\trigger.c:1033:12: style: Parameter 'pTrigger' can be declared as pointer to const [constParameterPointer]
  Trigger *pTrigger,   /* The trigger step that defines the RETURNING */
           ^
src\trigger.c:1248:15: style: Variable 'pWhen' is assigned a value that is never used. [unreadVariable]
  Expr *pWhen = 0;            /* Duplicate of trigger WHEN expression */
              ^
src\upsert.c:97:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                 /* Result code */
      ^
src\upsert.c:98:7: style: The scope of the variable 'iCursor' can be reduced. [variableScope]
  int iCursor;            /* Cursor used by pTab */
      ^
src\upsert.c:101:9: style: The scope of the variable 'pTerm' can be reduced. [variableScope]
  Expr *pTerm;            /* One term of the conflict-target clause */
        ^
src\upsert.c:100:13: style: Variable 'pTarget' can be declared as pointer to const [constVariablePointer]
  ExprList *pTarget;      /* The conflict-target clause */
            ^
src\upsert.c:101:9: style: Variable 'pTerm' can be declared as pointer to const [constVariablePointer]
  Expr *pTerm;            /* One term of the conflict-target clause */
        ^
src\upsert.c:247:54: style: Parameter 'pIdx' can be declared as pointer to const [constParameterPointer]
Upsert *sqlite3UpsertOfIndex(Upsert *pUpsert, Index *pIdx){
                                                     ^
src\util.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 150 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\util.c:19:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
src\util.c:21:0: information: Include file: <math.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <math.h>
^
src\util.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\vacuum.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 151 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vacuum.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\vdbe.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 162 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vdbeapi.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 157 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vdbeapi.c:18:0: information: Include file: "opcodes.h" not found. [missingInclude]
#include "opcodes.h"
^
src\vdbeaux.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 159 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\util.c:418:10: style: The scope of the variable 'x' can be reduced. [variableScope]
  int c, x;
         ^
src\util.c:1507:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\vdbe.c:816:2: information: Limiting ValueFlow analysis in function 'sqlite3VdbeExec' since it is too complex. Please specify --check-level=exhaustive to perform full analysis. [checkLevelNormal]
){
 ^
src\util.c:104:33: style: Parameter 'pCol' can be declared as pointer to const [constParameterPointer]
char *sqlite3ColumnType(Column *pCol, char *zDflt){
                                ^
src\util.c:199:11: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
    char *z;
          ^
src\util.c:417:18: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  unsigned char *a, *b;
                 ^
src\util.c:417:22: style: Variable 'b' can be declared as pointer to const [constVariablePointer]
  unsigned char *a, *b;
                     ^
src\util.c:436:27: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  register unsigned char *a, *b;
                          ^
src\util.c:436:31: style: Variable 'b' can be declared as pointer to const [constVariablePointer]
  register unsigned char *a, *b;
                              ^
src\util.c:1564:41: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
int sqlite3SafetyCheckSickOrOk(sqlite3 *db){
                                        ^
src\vdbeapi.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\vdbe.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\vdbeblob.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 150 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vdbeaux.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\vdbeapi.c:1518:26: style: Condition 'db->mallocFailed>prior_mallocFailed' is always false [knownConditionTrueFalse]
    if( db->mallocFailed > prior_mallocFailed ){
                         ^
src\vdbeapi.c:1504:27: note: prior_mallocFailed is assigned 'db->mallocFailed' here.
    u8 prior_mallocFailed = db->mallocFailed;
                          ^
src\vdbeapi.c:1518:26: note: Condition 'db->mallocFailed>prior_mallocFailed' is always false
    if( db->mallocFailed > prior_mallocFailed ){
                         ^
src\vdbeblob.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\vdbeapi.c:1687:8: style: The scope of the variable 'pVar' can be reduced. [variableScope]
  Mem *pVar;
       ^
src\vdbeapi.c:30:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  Vdbe *p = (Vdbe*)pStmt;
        ^
src\vdbeapi.c:40:29: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int vdbeSafety(Vdbe *p){
                            ^
src\vdbeapi.c:245:39: style: Parameter 'pVal' can be declared as pointer to const [constParameterPointer]
int sqlite3_value_type(sqlite3_value* pVal){
                                      ^
src\vdbeapi.c:329:43: style: Parameter 'pVal' can be declared as pointer to const [constParameterPointer]
int sqlite3_value_encoding(sqlite3_value *pVal){
                                          ^
src\vdbeapi.c:334:43: style: Parameter 'pVal' can be declared as pointer to const [constParameterPointer]
int sqlite3_value_nochange(sqlite3_value *pVal){
                                          ^
src\vdbeapi.c:339:43: style: Parameter 'pVal' can be declared as pointer to const [constParameterPointer]
int sqlite3_value_frombind(sqlite3_value *pVal){
                                          ^
src\vdbeapi.c:628:65: style: Parameter 'pValue' can be declared as pointer to const [constParameterPointer]
void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){
                                                                ^
src\vdbeapi.c:1249:9: style: Variable 'pVm' can be declared as pointer to const [constVariablePointer]
  Vdbe *pVm = (Vdbe *)pStmt;
        ^
src\vdbeapi.c:1259:9: style: Variable 'pVm' can be declared as pointer to const [constVariablePointer]
  Vdbe *pVm = (Vdbe *)pStmt;
        ^
src\vdbeapi.c:2041:9: style: Variable 'v' can be declared as pointer to const [constVariablePointer]
  Vdbe *v = (Vdbe*)pStmt;
        ^
src\vdbemem.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 151 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vdbeblob.c:363:12: style: The scope of the variable 'db' can be reduced. [variableScope]
  sqlite3 *db;
           ^
src\vdbesort.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 151 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vdbemem.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\tclsqlite.c:3475:15: style: Variable 'wMask' is assigned a value that is never used. [unreadVariable]
        wMask = SQLITE_TRACE_STMT; /* use the "legacy" default */
              ^
src\vdbetrace.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 150 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vdbevtab.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 152 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vdbesort.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\vdbetrace.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\vdbemem.c:125:43: style: Checking if unsigned expression 'acc.mxAlloc' is less than zero. [unsignedLessThanZero]
    assert( acc.zText==zBuf && acc.mxAlloc<=0 );
                                          ^
src\vdbemem.c:652:49: style: Parameter 'pMem' can be declared as pointer to const [constParameterPointer]
static SQLITE_NOINLINE double memRealValue(Mem *pMem){
                                                ^
src\vdbemem.c:1419:10: style: struct member 'ValueNewStat4Ctx::pParse' is never used. [unusedStructMember]
  Parse *pParse;
         ^
src\vdbemem.c:1420:10: style: struct member 'ValueNewStat4Ctx::pIdx' is never used. [unusedStructMember]
  Index *pIdx;
         ^
src\vdbemem.c:1421:20: style: struct member 'ValueNewStat4Ctx::ppRec' is never used. [unusedStructMember]
  UnpackedRecord **ppRec;
                   ^
src\vdbemem.c:1422:7: style: struct member 'ValueNewStat4Ctx::iVal' is never used. [unusedStructMember]
  int iVal;
      ^
src\func.c:2720:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
src\vtab.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 145 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vdbetrace.c:32:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
src\wal.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 150 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vtab.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\wal.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\walker.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\walker.c:16:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
src\walker.c:17:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\vtab.c:637:23: style: Condition 'sCtx.bDeclared==0' is always true [knownConditionTrueFalse]
    if( sCtx.bDeclared==0 ){
                      ^
src\vtab.c:611:20: note: Assignment 'sCtx.bDeclared=0', assigned value is 0
  sCtx.bDeclared = 0;
                   ^
src\vtab.c:637:23: note: Condition 'sCtx.bDeclared==0' is always true
    if( sCtx.bDeclared==0 ){
                      ^
src\vtab.c:971:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\vtab.c:146:13: style: Variable 'pMod' can be declared as pointer to const [constVariablePointer]
    Module *pMod = (Module*)sqliteHashData(pThis);
            ^
src\vtab.c:192:35: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){
                                  ^
src\vtab.c:192:46: style: Parameter 'pTab' can be declared as pointer to const [constParameterPointer]
VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){
                                             ^
src\vtab.c:447:51: style: Parameter 'pEnd' can be declared as pointer to const [constParameterPointer]
void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){
                                                  ^
src\vtab.c:512:12: style: Variable 'pOld' can be declared as pointer to const [constVariablePointer]
    Table *pOld;
           ^
src\vtab.c:1314:39: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
int sqlite3_vtab_on_conflict(sqlite3 *db){
                                      ^
src\walker.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\walker.c:107:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\walker.c:168:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\walker.c:207:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
src\walker.c:142:12: style: Variable 'pParse' can be declared as pointer to const [constVariablePointer]
    Parse *pParse;
           ^
src\vdbesort.c:1587:9: style: The if condition is the same as the previous if condition [duplicateCondition]
  if( rc==SQLITE_OK ){
        ^
src\vdbesort.c:1582:9: note: First condition
  if( rc==SQLITE_OK ){
        ^
src\vdbesort.c:1587:9: note: Second condition
  if( rc==SQLITE_OK ){
        ^
src\vdbesort.c:1978:11: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( rc==SQLITE_OK ){
          ^
src\vdbesort.c:1972:11: note: First condition
    if( rc==SQLITE_OK ){
          ^
src\vdbesort.c:1978:11: note: Second condition
    if( rc==SQLITE_OK ){
          ^
src\vdbesort.c:585:7: style: The scope of the variable 'iBuf' can be reduced. [variableScope]
  int iBuf;
      ^
src\vdbesort.c:595:18: style: The scope of the variable 'rc' can be reduced. [variableScope]
      int i = 0, rc;
                 ^
src\vdbesort.c:1207:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\vdbesort.c:1784:7: style: The scope of the variable 'bFlush' can be reduced. [variableScope]
  int bFlush;                     /* True to flush contents of memory to PMA */
      ^
src\vdbesort.c:2528:11: style: The scope of the variable 'iTask' can be reduced. [variableScope]
      int iTask;
          ^
src\vdbesort.c:617:43: style: Parameter 'pTask' can be declared as pointer to const [constParameterPointer]
static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){
                                          ^
src\vdbesort.c:1394:55: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static SorterCompare vdbeSorterGetCompare(VdbeSorter *p){
                                                      ^
src\vdbesort.c:1485:48: style: Parameter 'pData' can be declared as pointer to const [constParameterPointer]
static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){
                                               ^
src\vdbesort.c:1894:16: style: Variable 'pTask' can be declared as pointer to const [constVariablePointer]
  SortSubtask *pTask = pIncr->pTask;
               ^
src\vdbesort.c:2710:15: style: Variable 'pSorter' can be declared as pointer to const [constVariablePointer]
  VdbeSorter *pSorter;
              ^
src\vdbesort.c:2711:9: style: Variable 'pKey' can be declared as pointer to const [constVariablePointer]
  void *pKey; int nKey;           /* Sorter key to copy into pOut */
        ^
src\vdbesort.c:2744:8: style: Parameter 'pVal' can be declared as pointer to const [constParameterPointer]
  Mem *pVal,                      /* Value to compare to current sorter key */
       ^
src\vdbesort.c:2752:9: style: Variable 'pKey' can be declared as pointer to const [constVariablePointer]
  void *pKey; int nKey;           /* Sorter key to compare pVal with */
        ^
src\vdbesort.c:2129:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;             /* Return code */
         ^
src\wherecode.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 148 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\where.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 152 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vdbe.c:503:24: warning: Identical inner 'return' condition is always true. [identicalInnerCondition]
    return pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null);
                       ^
src\vdbe.c:499:19: note: outer condition: pMem->flags&(0x0004|0x0008|0x0020|0x0001)
  if( pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null) ){
                  ^
src\vdbe.c:503:24: note: identical inner condition: pMem->flags&(0x0004|0x0008|0x0020|0x0001)
    return pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null);
                       ^
src\wherecode.c:1477:2: information: Limiting ValueFlow analysis in function 'sqlite3WhereCodeOneLoopStart' since it is too complex. Please specify --check-level=exhaustive to perform full analysis. [checkLevelNormal]
){
 ^
src\wherecode.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\wal.c:4230:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( isCommit ){
        ^
src\wal.c:4225:9: note: First condition
    if( isCommit ){
        ^
src\wal.c:4230:9: note: Second condition
    if( isCommit ){
        ^
src\wal.c:976:7: style: The scope of the variable 'nativeCksum' can be reduced. [variableScope]
  int nativeCksum;                /* True for native byte-order checksums */
      ^
src\wal.c:3754:10: style: The scope of the variable 'iFrame' can be reduced. [variableScope]
    Pgno iFrame;
         ^
src\where.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\wal.c:865:8: style: Variable 'aEnd' can be declared as pointer to const [constVariablePointer]
  u32 *aEnd = (u32 *)&a[nByte];
       ^
src\wal.c:1823:12: style: Variable 'aRight' can be declared as pointer to const [constVariablePointer]
  ht_slot *aRight = *paRight;
           ^
src\wal.c:2573:25: style: Variable 'aHdr' can be declared as pointer to const [constVariablePointer]
  WalIndexHdr volatile *aHdr;     /* Header in shared memory */
                        ^
src\wal.c:3852:27: style: Variable 'pInfo' can be declared as pointer to const [constVariablePointer]
    volatile WalCkptInfo *pInfo = walCkptInfo(pWal);
                          ^
src\wal.c:4027:16: style: Variable 'pLive' can be declared as pointer to const [constVariablePointer]
  WalIndexHdr *pLive;             /* Pointer to shared header */
               ^
src\wal.c:4125:15: style: Variable 'pData' can be declared as pointer to const [constVariablePointer]
        void *pData;
              ^
src\wal.c:4482:31: style: Parameter 'pWal' can be declared as pointer to const [constParameterPointer]
int sqlite3WalHeapMemory(Wal *pWal){
                              ^
src\wal.c:4607:35: style: Parameter 'pWal' can be declared as pointer to const [constParameterPointer]
sqlite3_file *sqlite3WalFile(Wal *pWal){
                                  ^
src\vdbe.c:509:3: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
  return 0;
  ^
src\vdbe.c:5110:7: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
      break;
      ^
src\vdbe.c:329:27: style: Parameter 'pRec' can be declared as pointer to const [constParameterPointer]
static int alsoAnInt(Mem *pRec, double rValue, i64 *piValue){
                          ^
src\vdbe.c:1172:11: style: Variable 'pCaller' can be declared as pointer to const [constVariablePointer]
  VdbeOp *pCaller;
          ^
src\vdbe.c:2462:12: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
  CollSeq *pColl;    /* Collating sequence to use on this term */
           ^
src\vdbe.c:2863:15: style: Variable 'pC' can be declared as pointer to const [constVariablePointer]
  VdbeCursor *pC;
              ^
src\vdbe.c:3417:9: style: Variable 'zAffinity' can be declared as pointer to const [constVariablePointer]
  char *zAffinity;       /* The affinity string for the record */
        ^
src\vdbe.c:5183:15: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  VdbeCursor *pCur;
              ^
src\vdbe.c:5285:15: style: Variable 'pC' can be declared as pointer to const [constVariablePointer]
  VdbeCursor *pC;
              ^
src\vdbe.c:5969:15: style: Variable 'pC' can be declared as pointer to const [constVariablePointer]
  VdbeCursor *pC;
              ^
src\vdbe.c:5999:15: style: Variable 'pC' can be declared as pointer to const [constVariablePointer]
  VdbeCursor *pC;
              ^
src\vdbe.c:6518:15: style: Variable 'pC' can be declared as pointer to const [constVariablePointer]
  VdbeCursor *pC;
              ^
src\vdbe.c:7331:8: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
  Mem *pEnd;              /* Last memory cell in new array */
       ^
src\vdbe.c:7334:9: style: Variable 't' can be declared as pointer to const [constVariablePointer]
  void *t;                /* Token identifying trigger */
        ^
src\vdbe.c:7466:8: style: Variable 'pIn' can be declared as pointer to const [constVariablePointer]
  Mem *pIn;
       ^
src\utf.c:575:19: style: The scope of the variable 't' can be reduced. [variableScope]
  unsigned int i, t;
                  ^
src\utf.c:578:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
src\utf.c:579:16: style: The scope of the variable 'c' can be reduced. [variableScope]
  unsigned int c;
               ^
src\whereexpr.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 147 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\vdbeaux.c:2570:11: style: Redundant assignment of 'nByte' to itself. [selfAssignment]
    nByte = ROUND8P(nByte);
          ^
src\vdbeaux.c:1607:11: style: The scope of the variable 'pOp' can be reduced. [variableScope]
  VdbeOp *pOp;
          ^
src\vdbeaux.c:3302:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                         /* Used to store transient return codes */
      ^
src\vdbeaux.c:52:32: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
Parse *sqlite3VdbeParser(Vdbe *p){
                               ^
src\vdbeaux.c:494:11: style: Variable 'pOp' can be declared as pointer to const [constVariablePointer]
  VdbeOp *pOp;
          ^
src\vdbeaux.c:525:11: style: Variable 'zMsg' can be declared as pointer to const [constVariablePointer]
    char *zMsg;
          ^
src\vdbeaux.c:562:58: style: Parameter 'zWhere' can be declared as pointer to const [constParameterPointer]
void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere, u16 p5){
                                                         ^
src\vdbeaux.c:619:64: style: Parameter 'v' can be declared as pointer to const [constParameterPointer]
static SQLITE_NOINLINE void resizeResolveLabel(Parse *p, Vdbe *v, int j){
                                                               ^
src\vdbeaux.c:875:8: style: Variable 'aLabel' can be declared as pointer to const [constVariablePointer]
  int *aLabel = pParse->aLabel;
       ^
src\vdbeaux.c:1065:34: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
int sqlite3VdbeCurrentAddr(Vdbe *p){
                                 ^
src\vdbeaux.c:1462:36: style: Parameter 'pVdbe' can be declared as pointer to const [constParameterPointer]
int sqlite3VdbeHasSubProgram(Vdbe *pVdbe){
                                   ^
src\vdbeaux.c:2174:10: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
    Mem *pEnd = &p[N];
         ^
src\vdbeaux.c:2449:13: style: Variable 'zP4' can be declared as pointer to const [constVariablePointer]
      char *zP4 = sqlite3VdbeDisplayP4(db, pOp);
            ^
src\vdbeaux.c:3274:12: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
  sqlite3 *db = p->db;
           ^
src\vdbeaux.c:5330:30: style: Parameter 'v' can be declared as pointer to const [constParameterPointer]
sqlite3 *sqlite3VdbeDb(Vdbe *v){
                             ^
src\vdbeaux.c:5337:34: style: Parameter 'v' can be declared as pointer to const [constParameterPointer]
u8 sqlite3VdbePrepareFlags(Vdbe *v){
                                 ^
src\vdbeaux.c:5352:10: style: Variable 'pMem' can be declared as pointer to const [constVariablePointer]
    Mem *pMem = &v->aVar[iVar-1];
         ^
src\whereexpr.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\window.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 144 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src\window.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\atrc.c:20:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\atrc.c:21:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\crashtest1.c:17:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\crashtest1.c:18:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
test\crashtest1.c:19:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
test\crashtest1.c:20:0: information: Include file: <sys/wait.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/wait.h>
^
test\crashtest1.c:21:0: information: Include file: <signal.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <signal.h>
^
test\crashtest1.c:22:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\crashtest1.c:23:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\crashtest1.c:24:0: information: Include file: <sched.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sched.h>
^
test\crashtest1.c:25:0: information: Include file: "sqlite.h" not found. [missingInclude]
#include "sqlite.h"
^
test\dbfuzz.c:23:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
test\dbfuzz.c:24:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\dbfuzz.c:25:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\dbfuzz.c:26:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\dbfuzz.c:27:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
test\dbfuzz.c:28:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
test\dbfuzz.c:31:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\dbfuzz.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
ext\lsm1\lsm_sorted.c:6176:13: style: Variable 'pKey' can be declared as pointer to const [constVariablePointer]
        u8 *pKey;
            ^
ext\lsm1\lsm_sorted.c:6017:28: error: Uninitialized variable: iTopic2 [uninitvar]
                pDb->xCmp, iTopic2, blob2.pData, blob2.nData,
                           ^
test\dbfuzz.c:226:10: style: Variable 'pVFile' can be declared as pointer to const [constVariablePointer]
  VFile *pVFile = pHandle->pVFile;
         ^
test\dbfuzz.c:272:36: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemSync' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemSync(sqlite3_file *pFile, int flags){
                                   ^
test\dbfuzz.c:311:22: note: You might need to cast the function pointer here
  /* xSync       */  inmemSync,
                     ^
test\dbfuzz.c:272:36: note: Parameter 'pFile' can be declared as pointer to const
static int inmemSync(sqlite3_file *pFile, int flags){
                                   ^
test\dbfuzz.c:279:36: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemLock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemLock(sqlite3_file *pFile, int type){
                                   ^
test\dbfuzz.c:313:22: note: You might need to cast the function pointer here
  /* xLock       */  inmemLock,
                     ^
test\dbfuzz.c:279:36: note: Parameter 'pFile' can be declared as pointer to const
static int inmemLock(sqlite3_file *pFile, int type){
                                   ^
test\dbfuzz.c:282:38: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemUnlock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemUnlock(sqlite3_file *pFile, int type){
                                     ^
test\dbfuzz.c:314:22: note: You might need to cast the function pointer here
  /* xUnlock     */  inmemUnlock,
                     ^
test\dbfuzz.c:282:38: note: Parameter 'pFile' can be declared as pointer to const
static int inmemUnlock(sqlite3_file *pFile, int type){
                                     ^
test\dbfuzz.c:289:43: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemFileControl' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemFileControl(sqlite3_file *pFile, int op, void *pArg){
                                          ^
test\dbfuzz.c:316:22: note: You might need to cast the function pointer here
  /* xFileCtrl   */  inmemFileControl,
                     ^
test\dbfuzz.c:289:43: note: Parameter 'pFile' can be declared as pointer to const
static int inmemFileControl(sqlite3_file *pFile, int op, void *pArg){
                                          ^
test\dbfuzz.c:289:64: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'inmemFileControl' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemFileControl(sqlite3_file *pFile, int op, void *pArg){
                                                               ^
test\dbfuzz.c:316:22: note: You might need to cast the function pointer here
  /* xFileCtrl   */  inmemFileControl,
                     ^
test\dbfuzz.c:289:64: note: Parameter 'pArg' can be declared as pointer to const
static int inmemFileControl(sqlite3_file *pFile, int op, void *pArg){
                                                               ^
test\dbfuzz.c:292:42: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemSectorSize(sqlite3_file *pFile){
                                         ^
test\dbfuzz.c:317:22: note: You might need to cast the function pointer here
  /* xSectorSz   */  inmemSectorSize,
                     ^
test\dbfuzz.c:292:42: note: Parameter 'pFile' can be declared as pointer to const
static int inmemSectorSize(sqlite3_file *pFile){
                                         ^
test\dbfuzz.c:295:53: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemDeviceCharacteristics' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemDeviceCharacteristics(sqlite3_file *pFile){
                                                    ^
test\dbfuzz.c:318:22: note: You might need to cast the function pointer here
  /* xDevchar    */  inmemDeviceCharacteristics,
                     ^
test\dbfuzz.c:295:53: note: Parameter 'pFile' can be declared as pointer to const
static int inmemDeviceCharacteristics(sqlite3_file *pFile){
                                                    ^
test\dbfuzz.c:379:10: style: Variable 'pVFile' can be declared as pointer to const [constVariablePointer]
  VFile *pVFile = findVFile(zFilename);
         ^
test\dbfuzz.c:401:16: style: Variable 'pDefault' can be declared as pointer to const [constVariablePointer]
  sqlite3_vfs *pDefault = sqlite3_vfs_find(0);
               ^
test\dbfuzz.c:477:26: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static char *StrStr(Str *p){
                         ^
test\dbfuzz.c:33:0: information: Include file: <signal.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <signal.h>
^
test\dbfuzz.c:34:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
test\dbfuzz2.c:38:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
test\dbfuzz2.c:39:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\dbfuzz2.c:40:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\dbfuzz2.c:41:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\dbfuzz2.c:42:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
test\dbfuzz2.c:43:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
test\dbfuzz2.c:44:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdint.h>
^
test\dbfuzz2.c:46:0: information: Include file: <sys/time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/time.h>
^
test\dbfuzz2.c:47:0: information: Include file: <sys/resource.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/resource.h>
^
test\dbfuzz2.c:49:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\dbfuzz2.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\dbfuzz2.c:250:15: style: Redundant condition: The condition 'z[0]' is redundant since 'z[0] == 'v'' is sufficient. [redundantCondition]
  while( z[0] && z[0]=='v' ){
              ^
test\dbfuzz2.c:169:35: style: Parameter 'pNotUsed' can be declared as pointer to const. However it seems that 'progress_handler' is a callback function, if 'pNotUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int progress_handler(void *pNotUsed){
                                  ^
test\dbfuzz2.c:211:38: note: You might need to cast the function pointer here
    sqlite3_progress_handler(db, 10, progress_handler, 0);
                                     ^
test\dbfuzz2.c:169:35: note: Parameter 'pNotUsed' can be declared as pointer to const
static int progress_handler(void *pNotUsed){
                                  ^
test\dbfuzz2.c:265:11: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
    char *z = argv[i];
          ^
test\dbfuzz2.c:316:15: style: Variable 'zType' can be declared as pointer to const [constVariablePointer]
        char *zType = "RLIMIT_STACK";
              ^
test\dbfuzz2.c:188:14: style: Variable 'zErr' is assigned a value that is never used. [unreadVariable]
  char *zErr = 0;
             ^
test\dbfuzz2.c:203:5: style: Variable 'x' is assigned a value that is never used. [unreadVariable]
  x = szMax;
    ^
test\fork-test.c:91:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\fork-test.c:92:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\fork-test.c:93:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
test\fork-test.c:94:0: information: Include file: <sys/wait.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/wait.h>
^
test\fork-test.c:95:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
test\fork-test.c:96:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\fork-test.c:97:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
test\fork-test.c:98:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\fork-test.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\fp-speed-1.c:120:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\fp-speed-1.c:121:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\fp-speed-1.c:122:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\fuzzcheck.c:81:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\fuzzcheck.c:82:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\fuzzcheck.c:83:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\fuzzcheck.c:84:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
test\fuzzcheck.c:85:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
test\fuzzcheck.c:86:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
test\fuzzcheck.c:87:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\fuzzcheck.c:88:0: information: Include file: "sqlite3recover.h" not found. [missingInclude]
#include "sqlite3recover.h"
^
test\fuzzcheck.c:103:0: information: Include file: <stddef.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stddef.h>
^
test\fuzzcheck.c:105:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdint.h>
^
src\build.c:813:7: style: Variable 'pOld' can be declared as pointer to const [constVariablePointer]
      TESTONLY ( Index *pOld = ) sqlite3HashInsert(
      ^
test\fuzzinvariants.c:24:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\fuzzinvariants.c:25:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\fuzzinvariants.c:26:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\fuzzinvariants.c:27:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\fuzzinvariants.c:28:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
test\fuzzinvariants.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\fuzzcheck.c:1904:32: information: Limiting ValueFlow analysis in function 'main' since it is too complex. Please specify --check-level=exhaustive to perform full analysis. [checkLevelNormal]
int main(int argc, char **argv){
                               ^
test\fuzzcheck.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\fuzzinvariants.c:437:11: style: Variable 'x' is reassigned a value before the old one has been used. [redundantAssignment]
        x = 0;
          ^
test\fuzzinvariants.c:403:11: note: x is assigned
        x = ((z1==0 && z2==0) || (z1!=0 && z2!=0 && strcmp(z1,z1)==0));
          ^
test\fuzzinvariants.c:437:11: note: x is overwritten
        x = 0;
          ^
test\fuzzinvariants.c:403:53: warning: Comparison of identical string variables. [stringCompare]
        x = ((z1==0 && z2==0) || (z1!=0 && z2!=0 && strcmp(z1,z1)==0));
                                                    ^
test\kvtest.c:115:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\kvtest.c:116:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\kvtest.c:117:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
test\kvtest.c:118:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
test\kvtest.c:119:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
test\kvtest.c:120:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\kvtest.c:121:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\kvtest.c:124:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
test\kvtest.c:136:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdint.h>
^
test\kvtest.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\window.c:1867:9: style: The scope of the variable 'addr' can be reduced. [variableScope]
    int addr;
        ^
src\window.c:3011:9: style: The scope of the variable 'addr' can be reduced. [variableScope]
    int addr = 0;
        ^
src\window.c:398:21: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  struct CallCount *p;
                    ^
src\window.c:454:20: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  struct NtileCtx *p;
                   ^
src\window.c:666:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    Window *p = windowFind(pParse, pList, pWin->zName);
            ^
src\window.c:933:51: style: Parameter 'pWalker' can be declared as pointer to const. However it seems that 'sqlite3WindowExtraAggFuncDepth' is a callback function, if 'pWalker' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int sqlite3WindowExtraAggFuncDepth(Walker *pWalker, Expr *pExpr){
                                                  ^
src\window.c:1100:27: note: You might need to cast the function pointer here
        w.xExprCallback = sqlite3WindowExtraAggFuncDepth;
                          ^
src\window.c:933:51: note: Parameter 'pWalker' can be declared as pointer to const
static int sqlite3WindowExtraAggFuncDepth(Walker *pWalker, Expr *pExpr){
                                                  ^
src\window.c:1279:13: style: Variable 'pExist' can be declared as pointer to const [constVariablePointer]
    Window *pExist = windowFind(pParse, pList, pWin->zBase);
            ^
src\window.c:1429:14: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    FuncDef *p = pWin->pWFunc;
             ^
src\window.c:1490:14: style: Variable 'aOp' can be declared as const array [constVariable]
  static int aOp[] = { OP_Ge, OP_Ge, OP_Gt, OP_Ge, OP_Ge };
             ^
src\window.c:1627:13: style: Variable 'pOrderBy' can be declared as pointer to const [constVariablePointer]
  ExprList *pOrderBy = pMWin->pOrderBy;
            ^
src\window.c:1933:16: style: Variable 'pFunc' can be declared as pointer to const [constVariablePointer]
      FuncDef *pFunc = pWin->pWFunc;
               ^
src\window.c:2005:14: style: Variable 'pFunc' can be declared as pointer to const [constVariablePointer]
    FuncDef *pFunc = pWin->pWFunc;
             ^
src\window.c:2035:14: style: Variable 'pFunc' can be declared as pointer to const [constVariablePointer]
    FuncDef *pFunc = pWin->pWFunc;
             ^
src\window.c:2439:50: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
static int windowExprGtZero(Parse *pParse, Expr *pExpr){
                                                 ^
test\kvtest.c:603:17: error: Resource leak: in [resourceLeak]
  if( pBuf==0 ) return 0;
                ^
test\kvtest.c:562:46: warning: If resource allocation fails, then there is a possible null pointer dereference: out [nullPointerOutOfResources]
    nWrote = fwrite(pData, 1, (size_t)nData, out);
                                             ^
test\kvtest.c:561:16: note: Assuming allocation function fails
    out = fopen(zFN, "wb");
               ^
test\kvtest.c:561:16: note: Assignment 'out=fopen(zFN,"wb")', assigned value is 0
    out = fopen(zFN, "wb");
               ^
test\kvtest.c:562:46: note: Null pointer dereference
    nWrote = fwrite(pData, 1, (size_t)nData, out);
                                             ^
test\kvtest.c:563:12: warning: If resource allocation fails, then there is a possible null pointer dereference: out [nullPointerOutOfResources]
    fclose(out);
           ^
test\kvtest.c:561:16: note: Assuming allocation function fails
    out = fopen(zFN, "wb");
               ^
test\kvtest.c:561:16: note: Assignment 'out=fopen(zFN,"wb")', assigned value is 0
    out = fopen(zFN, "wb");
               ^
test\kvtest.c:563:12: note: Null pointer dereference
    fclose(out);
           ^
test\ossfuzz.c:5:0: information: Include file: <stddef.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stddef.h>
^
test\ossfuzz.c:7:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdint.h>
^
test\ossfuzz.c:9:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\ossfuzz.c:10:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\ossfuzz.c:11:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\optfuzz.c:29:0: information: Include file: "sqlite3.c" not found. [missingInclude]
#include "sqlite3.c"
^
test\kvtest.c:508:10: style: The scope of the variable 'nWrote' can be reduced. [variableScope]
  size_t nWrote;
         ^
test\ossfuzz.c:197:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("Progress callback count....... %d\n", cx.nCb);
    ^
test\ossfuzz.c:108:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
test\ossfuzz.c:112:24: style: Checking if unsigned expression 'p->execCnt--' is less than zero. [unsignedLessThanZero]
  return (p->execCnt--)<=0 || progress_handler(pClientData);
                       ^
src\vdbemem.c:1047:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\vdbemem.c:157:9: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
  char *z;
        ^
src\vdbemem.c:1046:40: style: Parameter 'pVdbe' can be declared as pointer to const [constParameterPointer]
void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){
                                       ^
test\ossshell.c:8:0: information: Include file: <stddef.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stddef.h>
^
test\ossshell.c:10:0: information: Include file: <stdint.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdint.h>
^
test\ossshell.c:12:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\ossshell.c:13:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\ossshell.c:14:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\ossshell.c:15:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\ossshell.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\sessionfuzz.c:68:0: information: Include file: "sqlite3.c" not found. [missingInclude]
#include "sqlite3.c"
^
test\sessionfuzz.c:691:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\sessionfuzz.c:692:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\sessionfuzz.c:693:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
test\sessionfuzz.c:695:0: information: Include file: <zlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <zlib.h>
^
test\speedtest1.c:81:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\speedtest1.c:82:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
test\speedtest1.c:83:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\speedtest1.c:84:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\speedtest1.c:85:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
test\speedtest1.c:86:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\speedtest1.c:87:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
test\speedtest1.c:89:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
test\sessionfuzz.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\optfuzz.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\speedtest1.c:2962:32: information: Limiting ValueFlow analysis in function 'main' since it is too complex. Please specify --check-level=exhaustive to perform full analysis. [checkLevelNormal]
int main(int argc, char **argv){
                               ^
test\speedtest1.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\optfuzz.c:191:17: error: Resource leak: in [resourceLeak]
  if( pBuf==0 ) return 0;
                ^
test\optfuzz.c:251:19: style: The scope of the variable 'pCk' can be reduced. [variableScope]
    sqlite3_stmt *pCk;
                  ^
test\sessionfuzz.c:883:7: style: The scope of the variable 'bVerbose' can be reduced. [variableScope]
  int bVerbose = 0;
      ^
test\startup.c:27:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\startup.c:28:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
test\startup.c:29:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\startup.c:30:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\startup.c:31:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
test\startup.c:32:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\startup.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\kvtest.c:127:0: information: Include file: <direct.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <direct.h>
^
test\kvtest.c:128:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <io.h>
^
test\startup.c:378:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
test\startup.c:379:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
test\threadtest1.c:24:0: information: Include file: "sqlite.h" not found. [missingInclude]
#include "sqlite.h"
^
test\threadtest1.c:25:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
test\threadtest1.c:26:0: information: Include file: <sched.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sched.h>
^
test\threadtest1.c:27:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\threadtest1.c:28:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\threadtest1.c:29:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\threadtest1.c:30:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
test\threadtest1.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\threadtest1.c:199:10: style: The scope of the variable 'az' can be reduced. [variableScope]
  char **az;
         ^
test\threadtest1.c:50:31: style: Parameter 'NotUsed' can be declared as pointer to const. However it seems that 'db_is_locked' is a callback function, if 'NotUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int db_is_locked(void *NotUsed, int iCount){
                              ^
test\threadtest1.c:213:30: note: You might need to cast the function pointer here
    sqlite3_busy_handler(db, db_is_locked, zFilename);
                             ^
test\threadtest1.c:50:31: note: Parameter 'NotUsed' can be declared as pointer to const
static int db_is_locked(void *NotUsed, int iCount){
                              ^
test\threadtest1.c:176:9: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
  char *z;
        ^
test\threadtest1.c:117:8: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
    rc = sqlite3_exec(db, zSql, db_query_callback, &sResult, &zErrMsg);
       ^
test\threadtest1.c:196:9: style: Unused variable: azErr [unusedVariable]
  char *azErr;
        ^
test\threadtest2.c:18:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\threadtest2.c:19:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
test\threadtest2.c:20:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
test\threadtest2.c:21:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\threadtest2.c:22:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\threadtest2.c:23:0: information: Include file: "sqlite.h" not found. [missingInclude]
#include "sqlite.h"
^
test\threadtest2.c:77:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
test\threadtest2.c:87:8: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
    rc = sqlite3_exec(db, "INSERT INTO t1 VALUES('bogus data')", 0, 0, 0);
       ^
test\threadtest4.c:31:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\threadtest4.c:32:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
test\threadtest4.c:33:0: information: Include file: <sched.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sched.h>
^
test\threadtest4.c:34:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\threadtest4.c:35:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\threadtest4.c:36:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\threadtest4.c:37:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
test\threadtest4.c:38:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
test\threadtest5.c:26:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\threadtest5.c:27:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <pthread.h>
^
test\threadtest5.c:28:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\threadtest5.c:29:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
test\threadtest5.c:30:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\threadtest5.c:31:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\threadtest5.c:32:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
test\threadtest5.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\threadtest4.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\threadtest3.c:80:0: information: Include file: <sqlite3.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sqlite3.h>
^
test\threadtest3.c:94:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
test\threadtest3.c:95:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdio.h>
^
test\threadtest3.c:96:0: information: Include file: <pthread.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <pthread.h>
^
test\threadtest3.c:97:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <assert.h>
^
test\threadtest3.c:98:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <sys/types.h>
^
test\threadtest3.c:99:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <sys/stat.h>
^
test\threadtest3.c:100:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <string.h>
^
test\threadtest3.c:101:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <fcntl.h>
^
test\threadtest3.c:102:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <errno.h>
^
test\threadtest3.c:107:0: information: Include file: "test_multiplex.h" not found. [missingInclude]
#include "test_multiplex.h"
^
test\threadtest5.c:149:27: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'worker' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void *worker(void *pArg){
                          ^
test\threadtest5.c:302:36: note: You might need to cast the function pointer here
    pthread_create(&aWorker[i], 0, worker, aWorkerName[i]);
                                   ^
test\threadtest5.c:149:27: note: Parameter 'pArg' can be declared as pointer to const
static void *worker(void *pArg){
                          ^
test\tt3_stress.c:263:49: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'stress2_workload19' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static char *stress2_workload19(int iTid, void *pArg){
                                                ^
test\tt3_stress.c:359:33: note: You might need to cast the function pointer here
  launch_thread(&err, &threads, stress2_workload19, (void*)zDb);
                                ^
test\tt3_stress.c:263:49: note: Parameter 'pArg' can be declared as pointer to const
static char *stress2_workload19(int iTid, void *pArg){
                                                ^
test\threadtest4.c:288:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
test\threadtest4.c:289:17: style: The scope of the variable 'pStmt' can be reduced. [variableScope]
  sqlite3_stmt *pStmt;
                ^
test\threadtest4.c:69:29: style: Parameter 'x' can be declared as pointer to const [constParameterPointer]
static void check_oom(void *x){
                            ^
test\threadtest4.c:89:38: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static void worker_trace(WorkerInfo *p, const char *zFormat, ...){
                                     ^
test\fuzzcheck.c:830:18: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
    }else if( zIn[i]=='[' && i<n-3 && isOffset(zIn+i, nIn-i, &k, &i) ){
                 ^
test\fuzzcheck.c:832:17: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
   }else if( zIn[i]=='\n' && i<n-4 && memcmp(zIn+i,"\n--\n",4)==0 ){
                ^
test\vt02.c:173:0: information: Include file: "sqlite3ext.h" not found. [missingInclude]
  #include "sqlite3ext.h"
^
test\vt02.c:175:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
  #include <stdlib.h>
^
test\vt02.c:176:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
  #include <string.h>
^
test\vt02.c:177:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
  #include <assert.h>
^
test\wordcount.c:64:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
test\wordcount.c:65:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
test\wordcount.c:66:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
test\wordcount.c:67:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\wordcount.c:68:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
test\wordcount.c:69:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\wordcount.c:71:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
test\vt02.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\fuzzcheck.c:1849:15: style: Redundant condition: The condition 'z[0]' is redundant since 'z[0] == 'v'' is sufficient. [redundantCondition]
  while( z[0] && z[0]=='v' ){
              ^
test\wordcount.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\fuzzcheck.c:858:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("Timeout on progress callback %d\n", p->nCb);
    ^
src\whereexpr.c:716:20: style: The scope of the variable 'pAndTerm' can be reduced. [variableScope]
        WhereTerm *pAndTerm;
                   ^
src\whereexpr.c:717:13: style: The scope of the variable 'j' can be reduced. [variableScope]
        int j;
            ^
src\whereexpr.c:1014:7: style: The scope of the variable 'iCur' can be reduced. [variableScope]
  int iCur;
      ^
src\whereexpr.c:1317:18: style: The scope of the variable 'pNewTerm' can be reduced. [variableScope]
      WhereTerm *pNewTerm;
                 ^
src\whereexpr.c:1512:11: style: The scope of the variable 'idxNew' can be reduced. [variableScope]
      int idxNew;
          ^
src\whereexpr.c:1513:18: style: The scope of the variable 'pNewTerm' can be reduced. [variableScope]
      WhereTerm *pNewTerm;
                 ^
test\threadtest3.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\whereexpr.c:1829:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src\whereexpr.c:186:18: style: Variable 'pLeft' can be declared as pointer to const [constVariablePointer]
  Expr *pRight, *pLeft;      /* Right and left size of LIKE operator */
                 ^
src\whereexpr.c:748:20: style: Variable 'pOther' can be declared as pointer to const [constVariablePointer]
        WhereTerm *pOther = &pOrWc->a[pOrTerm->iParent];
                   ^
src\whereexpr.c:819:13: style: Variable 'pLeft' can be declared as pointer to const [constVariablePointer]
      Expr *pLeft = 0;
            ^
src\whereexpr.c:893:13: style: Variable 'pLeft' can be declared as pointer to const [constVariablePointer]
      Expr *pLeft = 0;       /* The LHS of the IN operator */
            ^
src\whereexpr.c:942:51: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
static int termIsEquivalence(Parse *pParse, Expr *pExpr){
                                                  ^
src\whereexpr.c:944:12: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
  CollSeq *pColl;
           ^
src\whereexpr.c:1270:15: style: Variable 'pList' can be declared as pointer to const [constVariablePointer]
    ExprList *pList;
              ^
src\whereexpr.c:1315:13: style: Variable 'pLeft' can be declared as pointer to const [constVariablePointer]
      Expr *pLeft = pExpr->pLeft;
            ^
src\whereexpr.c:1358:11: style: Variable 'pLeft' can be declared as pointer to const [constVariablePointer]
    Expr *pLeft;       /* LHS of LIKE/GLOB operator */
          ^
src\whereexpr.c:1601:9: style: Parameter 'pExpr' can be declared as pointer to const [constParameterPointer]
  Expr *pExpr,        /* Expression that defines the limit/offset */
        ^
src\whereexpr.c:1684:15: style: Variable 'pExpr' can be declared as pointer to const [constVariablePointer]
        Expr *pExpr = pOrderBy->a[ii].pExpr;
              ^
src\whereexpr.c:1730:16: style: Variable 'aLast' can be declared as pointer to const [constVariablePointer]
    WhereTerm *aLast = &pWC->a[pWC->nTerm-1];
               ^
src\whereexpr.c:1872:13: style: Variable 'pArgs' can be declared as pointer to const [constVariablePointer]
  ExprList *pArgs;
            ^
test\fuzzcheck.c:302:69: style: Parameter 'pData' can be declared as pointer to const [constParameterPointer]
static VFile *createVFile(const char *zName, int sz, unsigned char *pData){
                                                                    ^
test\fuzzcheck.c:324:35: style: Parameter 'aLine' can be declared as pointer to const [constParameterPointer]
static int allZero(unsigned char *aLine){
                                  ^
test\fuzzcheck.c:339:18: style: Parameter 'zSql' can be declared as pointer to const [constParameterPointer]
  unsigned char *zSql,   /* SQL content */
                 ^
test\fuzzcheck.c:1022:31: style: Parameter 'pCtx' can be declared as pointer to const. However it seems that 'recoverSqlCb' is a callback function, if 'pCtx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int recoverSqlCb(void *pCtx, const char *zSql){
                              ^
test\fuzzcheck.c:1040:44: note: You might need to cast the function pointer here
  p = sqlite3_recover_init_sql(db, "main", recoverSqlCb, 0);
                                           ^
test\fuzzcheck.c:1022:31: note: Parameter 'pCtx' can be declared as pointer to const
static int recoverSqlCb(void *pCtx, const char *zSql){
                              ^
test\fuzzcheck.c:1482:10: style: Variable 'pVFile' can be declared as pointer to const [constVariablePointer]
  VFile *pVFile = pHandle->pVFile;
         ^
test\fuzzcheck.c:1523:36: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemSync' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemSync(sqlite3_file *pFile, int flags){
                                   ^
test\fuzzcheck.c:1562:22: note: You might need to cast the function pointer here
  /* xSync     */    inmemSync,
                     ^
test\fuzzcheck.c:1523:36: note: Parameter 'pFile' can be declared as pointer to const
static int inmemSync(sqlite3_file *pFile, int flags){
                                   ^
test\fuzzcheck.c:1530:36: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemLock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemLock(sqlite3_file *pFile, int type){
                                   ^
test\fuzzcheck.c:1564:22: note: You might need to cast the function pointer here
  /* xLock     */    inmemLock,
                     ^
test\fuzzcheck.c:1530:36: note: Parameter 'pFile' can be declared as pointer to const
static int inmemLock(sqlite3_file *pFile, int type){
                                   ^
test\fuzzcheck.c:1533:38: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemUnlock' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemUnlock(sqlite3_file *pFile, int type){
                                     ^
test\fuzzcheck.c:1565:22: note: You might need to cast the function pointer here
  /* xUnlock   */    inmemUnlock,
                     ^
test\fuzzcheck.c:1533:38: note: Parameter 'pFile' can be declared as pointer to const
static int inmemUnlock(sqlite3_file *pFile, int type){
                                     ^
test\fuzzcheck.c:1540:43: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemFileControl' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemFileControl(sqlite3_file *pFile, int op, void *pArg){
                                          ^
test\fuzzcheck.c:1567:22: note: You might need to cast the function pointer here
  /* xFileCtrl */    inmemFileControl,
                     ^
test\fuzzcheck.c:1540:43: note: Parameter 'pFile' can be declared as pointer to const
static int inmemFileControl(sqlite3_file *pFile, int op, void *pArg){
                                          ^
test\fuzzcheck.c:1540:64: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'inmemFileControl' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemFileControl(sqlite3_file *pFile, int op, void *pArg){
                                                               ^
test\fuzzcheck.c:1567:22: note: You might need to cast the function pointer here
  /* xFileCtrl */    inmemFileControl,
                     ^
test\fuzzcheck.c:1540:64: note: Parameter 'pArg' can be declared as pointer to const
static int inmemFileControl(sqlite3_file *pFile, int op, void *pArg){
                                                               ^
test\fuzzcheck.c:1543:42: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemSectorSize' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemSectorSize(sqlite3_file *pFile){
                                         ^
test\fuzzcheck.c:1568:22: note: You might need to cast the function pointer here
  /* xSectorSz */    inmemSectorSize,
                     ^
test\fuzzcheck.c:1543:42: note: Parameter 'pFile' can be declared as pointer to const
static int inmemSectorSize(sqlite3_file *pFile){
                                         ^
test\fuzzcheck.c:1546:53: style: Parameter 'pFile' can be declared as pointer to const. However it seems that 'inmemDeviceCharacteristics' is a callback function, if 'pFile' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int inmemDeviceCharacteristics(sqlite3_file *pFile){
                                                    ^
test\fuzzcheck.c:1569:22: note: You might need to cast the function pointer here
  /* xDevchar  */    inmemDeviceCharacteristics,
                     ^
test\fuzzcheck.c:1546:53: note: Parameter 'pFile' can be declared as pointer to const
static int inmemDeviceCharacteristics(sqlite3_file *pFile){
                                                    ^
test\fuzzcheck.c:1630:10: style: Variable 'pVFile' can be declared as pointer to const [constVariablePointer]
  VFile *pVFile = findVFile(zFilename);
         ^
test\fuzzcheck.c:1660:16: style: Variable 'pDefault' can be declared as pointer to const [constVariablePointer]
  sqlite3_vfs *pDefault = sqlite3_vfs_find(0);
               ^
src\pager.c:1082:48: style: Parameter 'pPg' can be declared as pointer to const [constParameterPointer]
static int pageInJournal(Pager *pPager, PgHdr *pPg){
                                               ^
src\pager.c:4219:37: style: Parameter 'pPg' can be declared as pointer to const [constParameterPointer]
Pgno sqlite3PagerPagenumber(DbPage *pPg){
                                    ^
src\pager.c:6238:37: style: Parameter 'pPg' can be declared as pointer to const [constParameterPointer]
int sqlite3PagerIswriteable(DbPage *pPg){
                                    ^
tool\checkSpacing.c:10:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\checkSpacing.c:11:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\checkSpacing.c:12:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\checkSpacing.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\checkSpacing.c:20:7: style: The scope of the variable 'seenSpace' can be reduced. [variableScope]
  int seenSpace;
      ^
tool\checkSpacing.c:21:7: style: The scope of the variable 'seenTab' can be reduced. [variableScope]
  int seenTab;
      ^
tool\dbhash.c:22:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\dbhash.c:23:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\dbhash.c:24:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
tool\dbhash.c:25:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\dbhash.c:26:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\dbhash.c:27:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\dbhash.c:28:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\threadtest3.c:158:10: style: The scope of the variable 't' can be reduced. [variableScope]
  uint32 t;
         ^
test\threadtest3.c:375:46: style: Parameter 'digest' can be declared as pointer to const [constParameterPointer]
static void MD5DigestToBase16(unsigned char *digest, char *zBuf){
                                             ^
test\threadtest3.c:539:30: style: Parameter 'pArg' can be declared as pointer to const. However it seems that 'busyhandler' is a callback function, if 'pArg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int busyhandler(void *pArg, int n){
                             ^
test\threadtest3.c:563:37: note: You might need to cast the function pointer here
      sqlite3_busy_handler(pDb->db, busyhandler, 0);
                                    ^
test\threadtest3.c:539:30: note: Parameter 'pArg' can be declared as pointer to const
static int busyhandler(void *pArg, int n){
                             ^
test\threadtest3.c:867:10: style: Parameter 'pErr' can be declared as pointer to const [constParameterPointer]
  Error *pErr,
         ^
test\threadtest3.c:953:10: style: Parameter 'pErr' can be declared as pointer to const [constParameterPointer]
  Error *pErr,                    /* IN/OUT: Error code */
         ^
test\threadtest3.c:963:10: style: Parameter 'pErr' can be declared as pointer to const [constParameterPointer]
  Error *pErr                     /* IN/OUT: Error code */
         ^
test\threadtest3.c:83:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <stdio.h>
^
test\threadtest3.c:84:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <string.h>
^
test\threadtest3.c:85:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <assert.h>
^
test\threadtest3.c:86:0: information: Include file: <process.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <process.h>
^
test\threadtest3.c:87:0: information: Include file: <windows.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <windows.h>
^
test\threadtest3.c:88:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <sys/types.h>
^
test\threadtest3.c:89:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <sys/stat.h>
^
test\threadtest3.c:90:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <errno.h>
^
test\threadtest3.c:91:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <fcntl.h>
^
test\threadtest3.c:92:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <io.h>
^
test\vt02.c:536:16: style: The scope of the variable 'pStr' can be reduced. [variableScope]
  sqlite3_str *pStr;
               ^
test\vt02.c:738:7: style: The scope of the variable 'iIn' can be reduced. [variableScope]
  int iIn = -1;               /* Index of the IN constraint */
      ^
test\vt02.c:213:9: style: Parameter 'pAux' can be declared as pointer to const. However it seems that 'vt02Connect' is a callback function, if 'pAux' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  void *pAux,                 /* Pointer to an alternative schema */
        ^
test\vt02.c:969:24: note: You might need to cast the function pointer here
  /* xConnect      */  vt02Connect,
                       ^
test\vt02.c:213:9: note: Parameter 'pAux' can be declared as pointer to const
  void *pAux,                 /* Pointer to an alternative schema */
        ^
test\vt02.c:294:13: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  vt02_cur *pCur = (vt02_cur*)pCursor;
            ^
test\vt02.c:437:13: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  vt02_cur *pCur = (vt02_cur*)pCursor;
            ^
test\vt02.c:452:13: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  vt02_cur *pCur = (vt02_cur*)pCursor;
            ^
test\vt02.c:828:8: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
      i++;
       ^
tool\dbhash.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src\wal.c:643:0: information: Include file: <Windows.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <Windows.h>
^
tool\dbtotxt.c:38:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\dbtotxt.c:39:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\dbtotxt.c:40:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\dbtotxt.c:41:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\dbtotxt.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\dbtotxt.c:64:18: style: The scope of the variable 'aLine' can be reduced. [variableScope]
  unsigned char *aLine;       /* A single line of the file */
                 ^
tool\dbtotxt.c:44:35: style: Parameter 'aLine' can be declared as pointer to const [constParameterPointer]
static int allZero(unsigned char *aLine){
                                  ^
tool\dbtotxt.c:65:18: style: Variable 'aHdr' can be declared as pointer to const [constVariablePointer]
  unsigned char *aHdr;        /* File header */
                 ^
tool\enlargedb.c:14:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\enlargedb.c:15:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\enlargedb.c:16:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\speedtest1.c:2749:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("%5d %5d %5d %s\n", i, x1, x2, zNum);
    ^
test\speedtest1.c:2749:5: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("%5d %5d %5d %s\n", i, x1, x2, zNum);
    ^
test\speedtest1.c:2749:5: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("%5d %5d %5d %s\n", i, x1, x2, zNum);
    ^
tool\extract.c:10:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\extract.c:11:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\extract.c:40:5: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "got only %d of %d bytes\n", got, n);
    ^
tool\extract.c:34:5: error: Resource leak: f [resourceLeak]
    return 1;
    ^
tool\extract.c:41:5: error: Memory leak: zBuf [memleak]
    return 1;
    ^
tool\extract.c:45:3: error: Memory leak: zBuf [memleak]
  return 0;
  ^
tool\fast_vacuum.c:48:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\fast_vacuum.c:49:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\fast_vacuum.c:50:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\speedtest1.c:826:3: style: Variable 'n' is assigned an expression that holds the same value. [redundantAssignment]
  n = sz;
  ^
test\speedtest1.c:807:5: note: n is assigned 'sz' here.
  n = sz;
    ^
test\speedtest1.c:826:3: note: Variable 'n' is assigned an expression that holds the same value.
  n = sz;
  ^
test\speedtest1.c:1019:3: style: Variable 'n' is assigned an expression that holds the same value. [redundantAssignment]
  n = sz;
  ^
test\speedtest1.c:1003:5: note: n is assigned 'sz' here.
  n = sz;
    ^
test\speedtest1.c:1019:3: note: Variable 'n' is assigned an expression that holds the same value.
  n = sz;
  ^
tool\dbhash.c:380:15: style: The scope of the variable 'zDb' can be reduced. [variableScope]
  const char *zDb = 0;         /* Name of the database currently being hashed */
              ^
tool\dbhash.c:382:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                      /* Subroutine return code */
      ^
test\speedtest1.c:191:17: style: The scope of the variable 't' can be reduced. [variableScope]
  unsigned char t;
                ^
test\speedtest1.c:213:17: style: The scope of the variable 't' can be reduced. [variableScope]
  unsigned char t, i, j;
                ^
test\speedtest1.c:358:22: style: The scope of the variable 'tens' can be reduced. [variableScope]
  static const char *tens[] = { "", "ten", "twenty", "thirty", "forty",
                     ^
test\speedtest1.c:703:7: style: The scope of the variable 'y1' can be reduced. [variableScope]
  int y1;
      ^
test\speedtest1.c:740:15: style: The scope of the variable 'zVal' can be reduced. [variableScope]
  const char *zVal;
              ^
test\speedtest1.c:742:15: style: The scope of the variable 'zSep' can be reduced. [variableScope]
  const char *zSep;
              ^
test\speedtest1.c:743:7: style: The scope of the variable 'nVal' can be reduced. [variableScope]
  int nVal, nSep;
      ^
test\speedtest1.c:743:13: style: The scope of the variable 'nSep' can be reduced. [variableScope]
  int nVal, nSep;
            ^
test\speedtest1.c:2273:16: style: The scope of the variable 'len' can be reduced. [variableScope]
  unsigned x1, len;
               ^
test\speedtest1.c:2741:12: style: The scope of the variable 'x1' can be reduced. [variableScope]
  unsigned x1, x2;
           ^
tool\fuzzershell.c:64:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\fuzzershell.c:65:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
test\speedtest1.c:2741:16: style: The scope of the variable 'x2' can be reduced. [variableScope]
  unsigned x1, x2;
               ^
tool\fuzzershell.c:66:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\fuzzershell.c:67:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
tool\fuzzershell.c:68:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\fuzzershell.c:69:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
test\speedtest1.c:554:9: style: Local variable 'rc' shadows outer variable [shadowVariable]
    int rc = sqlite3_prepare_v2(g.db, zSql, -1, &pStmt, 0);
        ^
test\speedtest1.c:547:7: note: Shadowed declaration
  int rc;
      ^
test\speedtest1.c:554:9: note: Shadow variable
    int rc = sqlite3_prepare_v2(g.db, zSql, -1, &pStmt, 0);
        ^
test\speedtest1.c:2958:34: style: Parameter 'pCtx' can be declared as pointer to const. However it seems that 'xCompileOptions' is a callback function, if 'pCtx' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int xCompileOptions(void *pCtx, int nVal, char **azVal, char **azCol){
                                 ^
test\speedtest1.c:3402:50: note: You might need to cast the function pointer here
    sqlite3_exec(g.db, "PRAGMA compile_options", xCompileOptions, 0, 0);
                                                 ^
test\speedtest1.c:2958:34: note: Parameter 'pCtx' can be declared as pointer to const
static int xCompileOptions(void *pCtx, int nVal, char **azVal, char **azCol){
                                 ^
test\speedtest1.c:107:17: style: struct member 'HashContext::isInit' is never used. [unusedStructMember]
  unsigned char isInit;          /* True if initialized */
                ^
test\speedtest1.c:122:7: style: struct member 'Global::bWithoutRowid' is never used. [unusedStructMember]
  int bWithoutRowid;         /* True for --without-rowid */
      ^
tool\fuzzershell.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\dbhash.c:380:19: style: Variable 'zDb' is assigned a value that is never used. [unreadVariable]
  const char *zDb = 0;         /* Name of the database currently being hashed */
                  ^
test\speedtest1.c:547:7: style: Unused variable: rc [unusedVariable]
  int rc;
      ^
test\speedtest1.c:2967:13: style: Variable 'nHeap' is assigned a value that is never used. [unreadVariable]
  int nHeap = 0, mnHeap = 0;    /* Heap size from --heap */
            ^
test\speedtest1.c:2967:25: style: Variable 'mnHeap' is assigned a value that is never used. [unreadVariable]
  int nHeap = 0, mnHeap = 0;    /* Heap size from --heap */
                        ^
test\speedtest1.c:2973:13: style: Variable 'nLook' is assigned a value that is never used. [unreadVariable]
  int nLook = -1, szLook = 0;   /* --lookaside configuration */
            ^
test\speedtest1.c:2973:26: style: Variable 'szLook' is assigned a value that is never used. [unreadVariable]
  int nLook = -1, szLook = 0;   /* --lookaside configuration */
                         ^
test\speedtest1.c:2976:15: style: Variable 'nPCache' is assigned a value that is never used. [unreadVariable]
  int nPCache = 0, szPCache = 0;/* --pcache configuration */
              ^
test\speedtest1.c:2976:29: style: Variable 'szPCache' is assigned a value that is never used. [unreadVariable]
  int nPCache = 0, szPCache = 0;/* --pcache configuration */
                            ^
tool\getlock.c:9:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
tool\getlock.c:10:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
tool\getlock.c:11:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
tool\getlock.c:12:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
tool\getlock.c:13:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\getlock.c:14:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\getlock.c:15:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\getlock.c:16:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
test\speedtest1.c:2977:16: style: Variable 'doPCache' is assigned a value that is never used. [unreadVariable]
  int doPCache = 0;             /* True if --pcache is seen */
               ^
tool\getlock.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
test\speedtest1.c:3051:15: style: Variable 'nHeap' is assigned a value that is never used. [unreadVariable]
        nHeap = integerValue(argv[i+1]);
              ^
test\speedtest1.c:3052:16: style: Variable 'mnHeap' is assigned a value that is never used. [unreadVariable]
        mnHeap = integerValue(argv[i+2]);
               ^
test\speedtest1.c:3064:15: style: Variable 'nLook' is assigned a value that is never used. [unreadVariable]
        nLook = integerValue(argv[i+1]);
              ^
test\speedtest1.c:3065:16: style: Variable 'szLook' is assigned a value that is never used. [unreadVariable]
        szLook = integerValue(argv[i+2]);
               ^
test\speedtest1.c:3107:17: style: Variable 'nPCache' is assigned a value that is never used. [unreadVariable]
        nPCache = integerValue(argv[i+1]);
                ^
test\speedtest1.c:3108:18: style: Variable 'szPCache' is assigned a value that is never used. [unreadVariable]
        szPCache = integerValue(argv[i+2]);
                 ^
test\speedtest1.c:3109:18: style: Variable 'doPCache' is assigned a value that is never used. [unreadVariable]
        doPCache = 1;
                 ^
test\speedtest1.c:2991:7: style: Unused variable: iCur [unusedVariable]
  int iCur, iHi;                /* Stats values, current and "highwater" */
      ^
test\speedtest1.c:2991:13: style: Unused variable: iHi [unusedVariable]
  int iCur, iHi;                /* Stats values, current and "highwater" */
            ^
test\speedtest1.c:2993:7: style: Unused variable: rc [unusedVariable]
  int rc;                       /* API return code */
      ^
tool\getlock.c:71:7: style: The scope of the variable 'hShm' can be reduced. [variableScope]
  int hShm;       /* File descriptor for WAL shared-memory file */
      ^
tool\getlock.c:75:7: style: The scope of the variable 'nName' can be reduced. [variableScope]
  int nName;                 /* Length of filename */
      ^
tool\getlock.c:78:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                     /* Loop counter */
      ^
tool\index_usage.c:17:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\index_usage.c:18:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\index_usage.c:19:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\index_usage.c:20:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\index_usage.c:21:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\index_usage.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\index_usage.c:134:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = sqlite3_exec(db, zSql, 0, 0, 0);
     ^
tool\index_usage.c:127:6: note: rc is assigned
  rc = sqlite3_exec(db,
     ^
tool\index_usage.c:134:6: note: rc is overwritten
  rc = sqlite3_exec(db, zSql, 0, 0, 0);
     ^
tool\lempar.c:242:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\lempar.c:244:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\lempar.c:26:1: error: syntax error [syntaxError]
%%
^
tool\lemon.c:9:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\lemon.c:10:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
tool\lemon.c:11:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\lemon.c:12:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\lemon.c:13:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\lemon.c:14:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\lemon.c:39:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
tool\libvers.c:6:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\loadfts.c:18:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\loadfts.c:19:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\loadfts.c:20:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\loadfts.c:21:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\loadfts.c:22:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\loadfts.c:23:0: information: Include file: <errno.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <errno.h>
^
tool\loadfts.c:24:0: information: Include file: <dirent.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <dirent.h>
^
tool\loadfts.c:25:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\loadfts.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\loadfts.c:176:11: style: Variable 'zOpt' can be declared as pointer to const [constVariablePointer]
    char *zOpt = argv[i];
          ^
tool\loadfts.c:161:12: style: Variable 'bMap' is assigned a value that is never used. [unreadVariable]
  int bMap = 0;                   /* True to create mapping table */
           ^
tool\logest.c:32:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\logest.c:33:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\logest.c:34:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\logest.c:35:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\logest.c:36:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\logest.c:37:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\logest.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\max-limits.c:5:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\max-limits.c:6:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\max-limits.c:33:7: style: The scope of the variable 'j' can be reduced. [variableScope]
  int j, rc;
      ^
tool\mkkeywordhash.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
tool\mkkeywordhash.c:6:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\mkkeywordhash.c:7:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\mkkeywordhash.c:8:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\mkkeywordhash.c:9:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\mksourceid.c:13:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\mksourceid.c:14:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\mksourceid.c:15:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\mksourceid.c:16:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
tool\mksourceid.c:17:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\mkkeywordhash.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\offsets.c:8:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\offsets.c:9:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\offsets.c:10:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\offsets.c:11:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
tool\offsets.c:12:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
src\wherecode.c:288:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                        /* Loop counter */
      ^
src\wherecode.c:1298:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
src\wherecode.c:1639:17: style: The scope of the variable 'pOp' can be reduced. [variableScope]
        VdbeOp *pOp;     /* Opcode to access the value of the IN constraint */
                ^
src\wherecode.c:2420:13: style: The scope of the variable 'jmp1' can be reduced. [variableScope]
        int jmp1 = 0;                   /* Address of jump operation */
            ^
src\wherecode.c:287:9: style: Variable 'zMsg' can be declared as pointer to const [constVariablePointer]
  char *zMsg;                   /* Text to add to EQP output */
        ^
src\wherecode.c:417:37: style: Parameter 'pLevel' can be declared as pointer to const [constParameterPointer]
static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){
                                    ^
src\wherecode.c:455:69: style: Parameter 'zAff' can be declared as pointer to const [constParameterPointer]
static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){
                                                                    ^
src\wherecode.c:499:11: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    Expr *p = sqlite3VectorFieldSubexpr(pRight, i);
          ^
src\wherecode.c:523:60: style: Parameter 'pEList' can be declared as pointer to const [constParameterPointer]
static void adjustOrderByCol(ExprList *pOrderBy, ExprList *pEList){
                                                           ^
src\wherecode.c:575:9: style: Parameter 'pX' can be declared as pointer to const [constParameterPointer]
  Expr *pX              /* The IN expression to be reduced */
        ^
src\wherecode.c:982:13: style: Variable 'pRight' can be declared as pointer to const [constVariablePointer]
      Expr *pRight = pTerm->pExpr->pRight;
            ^
src\wherecode.c:1022:15: style: Parameter 'pLevel' can be declared as pointer to const [constParameterPointer]
  WhereLevel *pLevel,     /* The loop that contains the LIKE operator */
              ^
src\wherecode.c:1372:11: style: Variable 'pExpr' can be declared as pointer to const [constVariablePointer]
    Expr *pExpr;
          ^
src\wherecode.c:1450:41: style: Parameter 'pLoop' can be declared as pointer to const [constParameterPointer]
static int whereLoopIsOneRow(WhereLoop *pLoop){
                                        ^
src\wherecode.c:1559:15: style: Variable 'pSubq' can be declared as pointer to const [constVariablePointer]
    Subquery *pSubq;
              ^
src\wherecode.c:1639:17: style: Variable 'pOp' can be declared as pointer to const [constVariablePointer]
        VdbeOp *pOp;     /* Opcode to access the value of the IN constraint */
                ^
src\wherecode.c:2191:14: style: Variable 'pPk' can be declared as pointer to const [constVariablePointer]
      Index *pPk = sqlite3PrimaryKeyIndex(pIdx->pTable);
             ^
src\wherecode.c:2314:16: style: Variable 'origSrc' can be declared as pointer to const [constVariablePointer]
      SrcItem *origSrc;              /* Original list of tables */
               ^
src\wherecode.c:2749:21: style: Variable 'pRJ' can be declared as pointer to const [constVariablePointer]
    WhereRightJoin *pRJ = pLevel->pRJ;
                    ^
src\wherecode.c:2853:19: style: Variable 'pRJ' can be declared as pointer to const [constVariablePointer]
  WhereRightJoin *pRJ = pLevel->pRJ;
                  ^
tool\offsets.c:51:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;
          ^
src\wherecode.c:2857:14: style: Variable 'pLoop' can be declared as pointer to const [constVariablePointer]
  WhereLoop *pLoop = pLevel->pWLoop;
             ^
tool\offsets.c:227:7: style: The scope of the variable 'ofst' can be reduced. [variableScope]
  int ofst;
      ^
src\wherecode.c:2892:18: style: Variable 'pTerm' can be declared as pointer to const [constVariablePointer]
      WhereTerm *pTerm = &pWC->a[k];
                 ^
tool\offsets.c:228:7: style: The scope of the variable 'iChild' can be reduced. [variableScope]
  int iChild;
      ^
tool\offsets.c:245:7: style: The scope of the variable 'nPayload' can be reduced. [variableScope]
  int nPayload;
      ^
tool\offsets.c:50:31: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static void ofstTrace(GState *p, const char *zFormat, ...){
                              ^
tool\offsets.c:188:7: style: Variable 'a' can be declared as pointer to const [constVariablePointer]
  u8 *a = &p->aPage[*pOfst];
      ^
tool\offsets.c:206:31: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static int ofstInFile(GState *p, int ofst){
                              ^
tool\pagesig.c:17:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\pagesig.c:18:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\pagesig.c:19:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\pagesig.c:20:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\pagesig.c:78:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("%4d: %s\n", n, aBuf);
    ^
tool\pagesig.c:32:16: style: The scope of the variable 's0' can be reduced. [variableScope]
  unsigned int s0 = 0, s1 = 0;
               ^
tool\pagesig.c:32:24: style: The scope of the variable 's1' can be reduced. [variableScope]
  unsigned int s0 = 0, s1 = 0;
                       ^
tool\pagesig.c:33:17: style: The scope of the variable 'pI' can be reduced. [variableScope]
  unsigned int *pI;
                ^
tool\rollback-test.c:13:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\rollback-test.c:14:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\rollback-test.c:15:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\rollback-test.c:16:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\rollback-test.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\mkkeywordhash.c:449:16: style: Variable 'pOther' can be declared as pointer to const [constVariablePointer]
      Keyword *pOther = &aKeywordTable[j];
               ^
tool\mkkeywordhash.c:467:16: style: Variable 'pOther' can be declared as pointer to const [constVariablePointer]
      Keyword *pOther;
               ^
tool\mkkeywordhash.c:551:14: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    Keyword *p = &aKeywordTable[i];
             ^
tool\mkkeywordhash.c:647:11: style: Variable 'zToken' can be declared as pointer to const [constVariablePointer]
    char *zToken = aKeywordTable[i].zTokenType;
          ^
tool\rollback-test.c:45:10: style: The scope of the variable 'n' can be reduced. [variableScope]
  int i, n;
         ^
tool\rollback-test.c:46:9: style: The scope of the variable 'z' can be reduced. [variableScope]
  char *z;
        ^
tool\rollback-test.c:18:25: style: Parameter 'argv0' can be declared as pointer to const [constParameterPointer]
static void usage(char *argv0){
                        ^
tool\rollback-test.c:46:9: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
  char *z;
        ^
tool\showdb.c:4:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\showdb.c:5:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\showdb.c:8:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
tool\showdb.c:9:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
tool\showdb.c:10:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
tool\showdb.c:13:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
tool\showdb.c:18:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\showdb.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\showdb.c:20:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\showdb.c:21:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\showdb.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\lemon.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\mksourceid.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\showjournal.c:4:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\showjournal.c:5:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\showjournal.c:6:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\showjournal.c:7:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\showjournal.c:108:7: style: The scope of the variable 'nPage' can be reduced. [variableScope]
  int nPage, cnt;
      ^
tool\showjournal.c:108:14: style: The scope of the variable 'cnt' can be reduced. [variableScope]
  int nPage, cnt;
             ^
tool\showjournal.c:125:17: style: Variable 'nPage' is assigned a value that is never used. [unreadVariable]
    cnt = nPage = (int)decode_journal_header(iOfst);
                ^
tool\showlocks.c:11:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\showlocks.c:12:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
tool\showlocks.c:13:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
tool\showlocks.c:14:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\showlocks.c:15:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\showlocks.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\showlocks.c:60:7: error: Common realloc mistake: 'aPending' nulled but not freed upon failure [memleakOnRealloc]
      aPending = realloc(aPending, sizeof(aPending[0])*nAlloc );
      ^
tool\showshm.c:4:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\showshm.c:5:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\showshm.c:6:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
tool\showshm.c:7:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
tool\showshm.c:8:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
tool\showshm.c:9:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\showshm.c:15:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
tool\showshm.c:16:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
tool\showshm.c:21:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\showshm.c:22:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\showshm.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\showshm.c:58:18: style: Parameter 'aData' can be declared as pointer to const [constParameterPointer]
  unsigned char *aData,      /* Content being decoded */
                 ^
tool\showshm.c:18:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <io.h>
^
src\wal.c:687:33: style: Parameter 'pWal' can be declared as pointer to const [constParameterPointer]
static void sehInjectFault(Wal *pWal){
                                ^
tool\showstat4.c:6:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\showstat4.c:7:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\showstat4.c:8:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\showstat4.c:9:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\showstat4.c:10:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\showstat4.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\showstat4.c:39:14: style: The scope of the variable 'x' can be reduced. [variableScope]
  int rc, j, x, y, mxHdr;
             ^
tool\showstat4.c:40:24: style: The scope of the variable 'aSample' can be reduced. [variableScope]
  const unsigned char *aSample;
                       ^
tool\showstat4.c:41:7: style: The scope of the variable 'nSample' can be reduced. [variableScope]
  int nSample;
      ^
tool\showstat4.c:43:15: style: The scope of the variable 'zSep' can be reduced. [variableScope]
  const char *zSep;
              ^
tool\showwal.c:4:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\showwal.c:5:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\showwal.c:6:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
tool\showwal.c:7:0: information: Include file: <sys/stat.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/stat.h>
^
tool\showwal.c:8:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
tool\showwal.c:14:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
tool\showwal.c:15:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
tool\showwal.c:20:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\showwal.c:21:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\showwal.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\speedtest16.c:25:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\speedtest16.c:26:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\speedtest16.c:27:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\speedtest16.c:28:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\speedtest16.c:29:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
tool\speedtest16.c:30:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\speedtest16.c:38:0: information: Include file: "hwtime.h" not found. [missingInclude]
#include "hwtime.h"
^
tool\speedtest16.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\speedtest16.c:52:5: warning: If memory allocation fails, then there is a possible null pointer dereference: z16 [nullPointerOutOfMemory]
    z16[j++] = z[i];
    ^
tool\speedtest16.c:50:15: note: Assuming allocation function fails
  z16 = malloc( n*2 + 2 );
              ^
tool\speedtest16.c:50:15: note: Assignment 'z16=malloc(n*2+2)', assigned value is 0
  z16 = malloc( n*2 + 2 );
              ^
tool\speedtest16.c:52:5: note: Null pointer dereference
    z16[j++] = z[i];
    ^
tool\speedtest16.c:53:5: warning: If memory allocation fails, then there is a possible null pointer dereference: z16 [nullPointerOutOfMemory]
    z16[j++] = 0;
    ^
tool\speedtest16.c:50:15: note: Assuming allocation function fails
  z16 = malloc( n*2 + 2 );
              ^
tool\speedtest16.c:50:15: note: Assignment 'z16=malloc(n*2+2)', assigned value is 0
  z16 = malloc( n*2 + 2 );
              ^
tool\speedtest16.c:53:5: note: Null pointer dereference
    z16[j++] = 0;
    ^
tool\speedtest16.c:120:9: warning: If resource allocation fails, then there is a possible null pointer dereference: in [nullPointerOutOfResources]
  fseek(in, 0L, SEEK_END);
        ^
tool\speedtest16.c:119:13: note: Assuming allocation function fails
  in = fopen(argv[2], "r");
            ^
tool\speedtest16.c:119:13: note: Assignment 'in=fopen(argv[2],"r")', assigned value is 0
  in = fopen(argv[2], "r");
            ^
tool\speedtest16.c:120:9: note: Null pointer dereference
  fseek(in, 0L, SEEK_END);
        ^
tool\speedtest16.c:121:16: warning: If resource allocation fails, then there is a possible null pointer dereference: in [nullPointerOutOfResources]
  nSql = ftell(in);
               ^
tool\speedtest16.c:119:13: note: Assuming allocation function fails
  in = fopen(argv[2], "r");
            ^
tool\speedtest16.c:119:13: note: Assignment 'in=fopen(argv[2],"r")', assigned value is 0
  in = fopen(argv[2], "r");
            ^
tool\speedtest16.c:121:16: note: Null pointer dereference
  nSql = ftell(in);
               ^
tool\speedtest16.c:123:9: warning: If resource allocation fails, then there is a possible null pointer dereference: in [nullPointerOutOfResources]
  fseek(in, 0L, SEEK_SET);
        ^
tool\speedtest16.c:119:13: note: Assuming allocation function fails
  in = fopen(argv[2], "r");
            ^
tool\speedtest16.c:119:13: note: Assignment 'in=fopen(argv[2],"r")', assigned value is 0
  in = fopen(argv[2], "r");
            ^
tool\speedtest16.c:123:9: note: Null pointer dereference
  fseek(in, 0L, SEEK_SET);
        ^
tool\speedtest16.c:124:16: warning: If memory allocation fails, then there is a possible null pointer dereference: zSql [nullPointerOutOfMemory]
  nSql = fread(zSql, 1, nSql, in);
               ^
tool\speedtest16.c:122:16: note: Assuming allocation function fails
  zSql = malloc( nSql+1 );
               ^
tool\speedtest16.c:122:16: note: Assignment 'zSql=malloc(nSql+1)', assigned value is 0
  zSql = malloc( nSql+1 );
               ^
tool\speedtest16.c:124:16: note: Null pointer dereference
  nSql = fread(zSql, 1, nSql, in);
               ^
tool\speedtest16.c:124:31: warning: If resource allocation fails, then there is a possible null pointer dereference: in [nullPointerOutOfResources]
  nSql = fread(zSql, 1, nSql, in);
                              ^
tool\speedtest16.c:119:13: note: Assuming allocation function fails
  in = fopen(argv[2], "r");
            ^
tool\speedtest16.c:119:13: note: Assignment 'in=fopen(argv[2],"r")', assigned value is 0
  in = fopen(argv[2], "r");
            ^
tool\speedtest16.c:124:31: note: Null pointer dereference
  nSql = fread(zSql, 1, nSql, in);
                              ^
tool\speedtest16.c:125:3: warning: If memory allocation fails, then there is a possible null pointer dereference: zSql [nullPointerOutOfMemory]
  zSql[nSql] = 0;
  ^
tool\speedtest16.c:122:16: note: Assuming allocation function fails
  zSql = malloc( nSql+1 );
               ^
tool\speedtest16.c:122:16: note: Assignment 'zSql=malloc(nSql+1)', assigned value is 0
  zSql = malloc( nSql+1 );
               ^
tool\speedtest16.c:125:3: note: Null pointer dereference
  zSql[nSql] = 0;
  ^
tool\speedtest16.c:137:9: warning: If memory allocation fails, then there is a possible null pointer dereference: zSql [nullPointerOutOfMemory]
    if( zSql[j]==';' ){
        ^
tool\speedtest16.c:122:16: note: Assuming allocation function fails
  zSql = malloc( nSql+1 );
               ^
tool\speedtest16.c:122:16: note: Assignment 'zSql=malloc(nSql+1)', assigned value is 0
  zSql = malloc( nSql+1 );
               ^
tool\speedtest16.c:137:9: note: Null pointer dereference
    if( zSql[j]==';' ){
        ^
tool\speedtest8.c:24:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\speedtest8.c:25:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\speedtest8.c:26:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\speedtest8.c:27:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\speedtest8.c:28:0: information: Include file: <time.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <time.h>
^
tool\speedtest8.c:33:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
tool\speedtest8.c:34:0: information: Include file: <sys/times.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/times.h>
^
tool\speedtest8.c:35:0: information: Include file: <sched.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sched.h>
^
tool\speedtest8.c:38:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\speedtest8.c:44:0: information: Include file: "hwtime.h" not found. [missingInclude]
#include "hwtime.h"
^
tool\speedtest8.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\speedtest8.c:65:7: style: The if condition is the same as the previous if condition [duplicateCondition]
  if (!bQuiet) printf("SQL statement: [%s]\n", zSql);
      ^
tool\speedtest8.c:62:7: note: First condition
  if (!bQuiet){
      ^
tool\speedtest8.c:65:7: note: Second condition
  if (!bQuiet) printf("SQL statement: [%s]\n", zSql);
      ^
tool\speedtest8.c:163:13: style: Condition 'argc>3' is always true [knownConditionTrueFalse]
    if( argc>3 && strcmp(argv[1], "-quiet")==0 ){
            ^
tool\speedtest8.c:117:14: note: Assuming that condition 'argc>3' is not redundant
  while (argc>3)
             ^
tool\speedtest8.c:135:16: note: Assuming condition is false
    if( argc>4 && (strcmp(argv[1], "-priority")==0) ){
               ^
tool\speedtest8.c:163:13: note: Condition 'argc>3' is always true
    if( argc>3 && strcmp(argv[1], "-quiet")==0 ){
            ^
tool\speedtest8.c:187:9: warning: If resource allocation fails, then there is a possible null pointer dereference: in [nullPointerOutOfResources]
  fseek(in, 0L, SEEK_END);
        ^
tool\speedtest8.c:186:13: note: Assuming allocation function fails
  in = fopen(argv[2], "r");
            ^
tool\speedtest8.c:186:13: note: Assignment 'in=fopen(argv[2],"r")', assigned value is 0
  in = fopen(argv[2], "r");
            ^
tool\speedtest8.c:187:9: note: Null pointer dereference
  fseek(in, 0L, SEEK_END);
        ^
tool\speedtest8.c:188:16: warning: If resource allocation fails, then there is a possible null pointer dereference: in [nullPointerOutOfResources]
  nSql = ftell(in);
               ^
tool\speedtest8.c:186:13: note: Assuming allocation function fails
  in = fopen(argv[2], "r");
            ^
tool\speedtest8.c:186:13: note: Assignment 'in=fopen(argv[2],"r")', assigned value is 0
  in = fopen(argv[2], "r");
            ^
tool\speedtest8.c:188:16: note: Null pointer dereference
  nSql = ftell(in);
               ^
tool\speedtest8.c:190:9: warning: If resource allocation fails, then there is a possible null pointer dereference: in [nullPointerOutOfResources]
  fseek(in, 0L, SEEK_SET);
        ^
tool\speedtest8.c:186:13: note: Assuming allocation function fails
  in = fopen(argv[2], "r");
            ^
tool\speedtest8.c:186:13: note: Assignment 'in=fopen(argv[2],"r")', assigned value is 0
  in = fopen(argv[2], "r");
            ^
tool\speedtest8.c:190:9: note: Null pointer dereference
  fseek(in, 0L, SEEK_SET);
        ^
tool\speedtest8.c:191:16: warning: If memory allocation fails, then there is a possible null pointer dereference: zSql [nullPointerOutOfMemory]
  nSql = fread(zSql, 1, nSql, in);
               ^
tool\speedtest8.c:189:16: note: Assuming allocation function fails
  zSql = malloc( nSql+1 );
               ^
tool\speedtest8.c:189:16: note: Assignment 'zSql=malloc(nSql+1)', assigned value is 0
  zSql = malloc( nSql+1 );
               ^
tool\speedtest8.c:191:16: note: Null pointer dereference
  nSql = fread(zSql, 1, nSql, in);
               ^
tool\speedtest8.c:191:31: warning: If resource allocation fails, then there is a possible null pointer dereference: in [nullPointerOutOfResources]
  nSql = fread(zSql, 1, nSql, in);
                              ^
tool\speedtest8.c:186:13: note: Assuming allocation function fails
  in = fopen(argv[2], "r");
            ^
tool\speedtest8.c:186:13: note: Assignment 'in=fopen(argv[2],"r")', assigned value is 0
  in = fopen(argv[2], "r");
            ^
tool\speedtest8.c:191:31: note: Null pointer dereference
  nSql = fread(zSql, 1, nSql, in);
                              ^
tool\speedtest8.c:192:3: warning: If memory allocation fails, then there is a possible null pointer dereference: zSql [nullPointerOutOfMemory]
  zSql[nSql] = 0;
  ^
tool\speedtest8.c:189:16: note: Assuming allocation function fails
  zSql = malloc( nSql+1 );
               ^
tool\speedtest8.c:189:16: note: Assignment 'zSql=malloc(nSql+1)', assigned value is 0
  zSql = malloc( nSql+1 );
               ^
tool\speedtest8.c:192:3: note: Null pointer dereference
  zSql[nSql] = 0;
  ^
tool\showdb.c:749:5: portability: %d in format string (no. 1) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
    printf("Decode of freelist trunk page %d:\n", pgno);
    ^
tool\showdb.c:757:9: portability: %d in format string (no. 1) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
        sprintf(zIdx, "[%d]", i);
        ^
tool\showdb.c:788:5: portability: %d in format string (no. 1) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
    printf("ERROR: page %d out of range 1..%u: %s\n",
    ^
tool\showdb.c:794:5: portability: %d in format string (no. 1) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
    printf("ERROR: page %d used multiple times:\n", pgno);
    ^
tool\showdb.c:920:9: portability: %d in format string (no. 1) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
        printf("ERROR: page %d too many cells (%d)\n", pgno, nCell);
        ^
tool\showdb.c:925:9: portability: %d in format string (no. 1) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
        printf("ERROR: page %d cell %d out of bounds\n", pgno, i);
        ^
tool\showdb.c:963:7: portability: %d in format string (no. 1) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
      printf("ERROR: page %d too many freelist entries (%d)\n", pgno, n);
      ^
tool\showdb.c:1120:5: portability: %d in format string (no. 2) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "Invalid page number %d:  valid range is 1..%d\n",
    ^
tool\showdb.c:1250:9: portability: %d in format string (no. 1) requires 'int' but the argument type is 'u32 {aka unsigned int}'. [invalidPrintfArgType_sint]
        fprintf(stderr,
        ^
tool\showdb.c:144:7: style: The scope of the variable 'got' can be reduced. [variableScope]
  int got;
      ^
tool\showdb.c:318:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int n, j;
         ^
tool\showdb.c:419:7: style: The scope of the variable 'leftChild' can be reduced. [variableScope]
  u32 leftChild;
      ^
tool\showdb.c:496:7: style: The scope of the variable 'leftChild' can be reduced. [variableScope]
  u32 leftChild;
      ^
tool\showdb.c:506:7: style: The scope of the variable 'nCol' can be reduced. [variableScope]
  int nCol = 0;
      ^
tool\showdb.c:507:7: style: The scope of the variable 'szCol' can be reduced. [variableScope]
  int szCol[2000];
      ^
tool\showdb.c:509:7: style: The scope of the variable 'typeCol' can be reduced. [variableScope]
  int typeCol[2000];
      ^
tool\showdb.c:950:18: style: The scope of the variable 'a' can be reduced. [variableScope]
  unsigned char *a;
                 ^
tool\showdb.c:953:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
tool\showdb.c:954:7: style: The scope of the variable 'iNext' can be reduced. [variableScope]
  int iNext;
      ^
tool\showdb.c:998:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
tool\showdb.c:787:11: style: Checking if unsigned expression 'pgno' is less than zero. [unsignedLessThanZero]
  if( pgno<=0 || pgno>g.mxPage ){
          ^
tool\showdb.c:875:11: style: Checking if unsigned expression 'pgno' is less than zero. [unsignedLessThanZero]
  if( pgno<=0 || pgno>g.mxPage ) return;
          ^
tool\showdb.c:254:18: style: Parameter 'aData' can be declared as pointer to const [constParameterPointer]
  unsigned char *aData,      /* Content being decoded */
                 ^
tool\showdb.c:451:20: style: Variable 'b' can be declared as pointer to const [constVariablePointer]
    unsigned char *b = &a[nLocal];
                   ^
tool\showdb.c:468:18: style: Parameter 'aData' can be declared as pointer to const [constParameterPointer]
  unsigned char *aData,      /* Content being decoded */
                 ^
tool\showdb.c:469:18: style: Parameter 'aStart' can be declared as pointer to const [constParameterPointer]
  unsigned char *aStart,     /* Start of content to be printed */
                 ^
tool\showdb.c:645:9: style: Parameter 'zArgs' can be declared as pointer to const [constParameterPointer]
  char *zArgs         /* Flags to control formatting */
        ^
tool\showdb.c:980:35: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
static void page_usage_ptrmap(u8 *a){
                                  ^
tool\showdb.c:424:5: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  i = 0;
    ^
tool\showdb.c:458:11: style: Variable 'nDesc' is assigned a value that is never used. [unreadVariable]
    nDesc += describeContent(a, nLocal, &zDesc[nDesc-1]);
          ^
tool\showdb.c:506:12: style: Variable 'nCol' is assigned a value that is never used. [unreadVariable]
  int nCol = 0;
           ^
tool\showdb.c:812:9: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
  int n = 0;
        ^
tool\showdb.c:816:5: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  i = 0;
    ^
tool\showdb.c:819:7: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
    n += 4;
      ^
tool\showdb.c:824:7: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
    n += i;
      ^
tool\showdb.c:832:7: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
    n += i;
      ^
tool\showdb.c:15:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <io.h>
^
test\speedtest1.c:108:17: style: struct member 'HashContext::i' is never used. [unusedStructMember]
  unsigned char i, j;            /* State variables */
                ^
test\speedtest1.c:108:20: style: struct member 'HashContext::j' is never used. [unusedStructMember]
  unsigned char i, j;            /* State variables */
                   ^
test\speedtest1.c:109:17: style: struct member 'HashContext::s' is never used. [unusedStructMember]
  unsigned char s[256];          /* State variables */
                ^
test\speedtest1.c:110:17: style: struct member 'HashContext::r' is never used. [unusedStructMember]
  unsigned char r[32];           /* Result */
                ^
tool\speedtest8.c:163:13: style: Condition 'argc>3' is always true [knownConditionTrueFalse]
    if( argc>3 && strcmp(argv[1], "-quiet")==0 ){
            ^
tool\speedtest8.c:117:14: note: Assuming that condition 'argc>3' is not redundant
  while (argc>3)
             ^
tool\speedtest8.c:120:16: note: Assuming condition is false
    if( argc>4 && (strcmp(argv[1], "-log")==0) ){
               ^
tool\speedtest8.c:163:13: note: Condition 'argc>3' is always true
    if( argc>3 && strcmp(argv[1], "-quiet")==0 ){
            ^
tool\speedtest8.c:31:0: information: Include file: <windows.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <windows.h>
^
tool\speedtest8inst1.c:24:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\speedtest8inst1.c:25:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\speedtest8inst1.c:26:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\speedtest8inst1.c:27:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\speedtest8inst1.c:28:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
tool\speedtest8inst1.c:29:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
tool\speedtest8inst1.c:30:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\speedtest8inst1.c:34:0: information: Include file: "test_osinst.c" not found. [missingInclude]
#include "test_osinst.c"
^
tool\speedtest8inst1.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\sqldiff.c:22:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\sqldiff.c:23:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\sqldiff.c:24:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
tool\sqldiff.c:25:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\sqldiff.c:26:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\sqldiff.c:27:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\sqldiff.c:28:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\sqldiff.c:29:0: information: Include file: "sqlite3_stdio.h" not found. [missingInclude]
#include "sqlite3_stdio.h"
^
tool\showwal.c:236:3: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  fprintf(stdout, "Frame %4d: %6d %6d 0x%08x,%08x 0x%08x,%08x",
  ^
tool\showwal.c:236:3: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  fprintf(stdout, "Frame %4d: %6d %6d 0x%08x,%08x 0x%08x,%08x",
  ^
tool\showwal.c:489:12: warning: If memory allocation fails, then there is a possible null pointer dereference: zMap [nullPointerOutOfMemory]
    memset(zMap, '.', pagesize);
           ^
tool\showwal.c:488:18: note: Assuming allocation function fails
    zMap = malloc(pagesize);
                 ^
tool\showwal.c:488:18: note: Assignment 'zMap=malloc(pagesize)', assigned value is 0
    zMap = malloc(pagesize);
                 ^
tool\showwal.c:489:12: note: Null pointer dereference
    memset(zMap, '.', pagesize);
           ^
tool\showwal.c:490:12: warning: If memory allocation fails, then there is a possible null pointer dereference: zMap [nullPointerOutOfMemory]
    memset(zMap, '1', hdrSize);
           ^
tool\showwal.c:488:18: note: Assuming allocation function fails
    zMap = malloc(pagesize);
                 ^
tool\showwal.c:488:18: note: Assignment 'zMap=malloc(pagesize)', assigned value is 0
    zMap = malloc(pagesize);
                 ^
tool\showwal.c:490:12: note: Null pointer dereference
    memset(zMap, '1', hdrSize);
           ^
tool\showwal.c:602:26: style: Variable 'hdrSize' is reassigned a value before the old one has been used. [redundantAssignment]
          ofst = hdrSize = 100;
                         ^
tool\showwal.c:601:19: note: hdrSize is assigned
          hdrSize = 100;
                  ^
tool\showwal.c:602:26: note: hdrSize is overwritten
          ofst = hdrSize = 100;
                         ^
tool\showwal.c:609:14: style: Variable 'ofst' is reassigned a value before the old one has been used. [redundantAssignment]
        ofst = 32 + hdrSize + (i64)(iStart-1)*(pagesize+24) + 24;
             ^
tool\showwal.c:602:16: note: ofst is assigned
          ofst = hdrSize = 100;
               ^
tool\showwal.c:609:14: note: ofst is overwritten
        ofst = 32 + hdrSize + (i64)(iStart-1)*(pagesize+24) + 24;
             ^
tool\showwal.c:609:14: style: Variable 'ofst' is reassigned a value before the old one has been used. [redundantAssignment]
        ofst = 32 + hdrSize + (i64)(iStart-1)*(pagesize+24) + 24;
             ^
tool\showwal.c:606:16: note: ofst is assigned
          ofst = (i64)(iStart-1)*pagesize;
               ^
tool\showwal.c:609:14: note: ofst is overwritten
        ofst = 32 + hdrSize + (i64)(iStart-1)*(pagesize+24) + 24;
             ^
tool\showwal.c:297:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int n, j;
         ^
tool\showwal.c:360:7: style: The scope of the variable 'surplus' can be reduced. [variableScope]
  i64 surplus;
      ^
tool\showwal.c:397:7: style: The scope of the variable 'leftChild' can be reduced. [variableScope]
  int leftChild;
      ^
tool\showwal.c:135:18: style: Parameter 'aData' can be declared as pointer to const [constParameterPointer]
  unsigned char *aData,  /* Content to print */
                 ^
tool\showwal.c:176:18: style: Parameter 'aData' can be declared as pointer to const [constParameterPointer]
  unsigned char *aData,      /* Content being decoded */
                 ^
tool\showwal.c:429:20: style: Variable 'b' can be declared as pointer to const [constVariablePointer]
    unsigned char *b = &a[nLocal];
                   ^
tool\showwal.c:402:5: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  i = 0;
    ^
tool\showwal.c:436:11: style: Variable 'nDesc' is assigned a value that is never used. [unreadVariable]
    nDesc += describeContent(a, nLocal, &zDesc[nDesc-1]);
          ^
tool\showwal.c:17:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <io.h>
^
tool\sqldiff.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\sqlite3_rsync.c:16:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\sqlite3_rsync.c:17:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\sqlite3_rsync.c:18:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\sqlite3_rsync.c:19:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\sqlite3_rsync.c:20:0: information: Include file: <stdarg.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdarg.h>
^
tool\sqlite3_rsync.c:21:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\sqlite3_rsync.c:107:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
tool\sqlite3_rsync.c:108:0: information: Include file: <signal.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <signal.h>
^
tool\sqlite3_rsync.c:109:0: information: Include file: <sys/wait.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/wait.h>
^
tool\sqlite3_rsync.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\src-verify.c:43:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\src-verify.c:44:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\src-verify.c:45:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\src-verify.c:47:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
test\wordcount.c:188:24: style: The scope of the variable 'zVal' can be reduced. [variableScope]
  const unsigned char *zVal;
                       ^
test\wordcount.c:189:7: style: The scope of the variable 'nVal' can be reduced. [variableScope]
  int nVal, i, j;
      ^
test\wordcount.c:189:13: style: The scope of the variable 'i' can be reduced. [variableScope]
  int nVal, i, j;
            ^
test\wordcount.c:189:16: style: The scope of the variable 'j' can be reduced. [variableScope]
  int nVal, i, j;
               ^
test\wordcount.c:205:8: style: The scope of the variable 'zResult' can be reduced. [variableScope]
  char zResult[24];
       ^
test\wordcount.c:285:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                       /* Return code from an SQLite interface */
      ^
test\wordcount.c:135:33: style: Parameter 'NotUsed' can be declared as pointer to const. However it seems that 'traceCallback' is a callback function, if 'NotUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void traceCallback(void *NotUsed, const char *zSql){
                                ^
test\wordcount.c:383:35: note: You might need to cast the function pointer here
  if( doTrace ) sqlite3_trace(db, traceCallback, 0);
                                  ^
test\wordcount.c:135:33: note: Parameter 'NotUsed' can be declared as pointer to const
static void traceCallback(void *NotUsed, const char *zSql){
                                ^
test\wordcount.c:141:30: style: Parameter 'NotUsed' can be declared as pointer to const. However it seems that 'printResult' is a callback function, if 'NotUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int printResult(void *NotUsed, int nArg, char **azArg, char **azNm){
                             ^
test\wordcount.c:604:9: note: You might need to cast the function pointer here
        printResult, 0, 0);
        ^
test\wordcount.c:141:30: note: Parameter 'NotUsed' can be declared as pointer to const
static int printResult(void *NotUsed, int nArg, char **azArg, char **azNm){
                             ^
test\wordcount.c:73:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <io.h>
^
tool\srcck1.c:22:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\srcck1.c:23:0: information: Include file: <ctype.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctype.h>
^
tool\srcck1.c:24:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\srcck1.c:25:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\stripccomments.c:24:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\stripccomments.c:25:0: information: Include file: <assert.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <assert.h>
^
tool\stripccomments.c:26:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\fuzzershell.c:1150:12: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
        rc = sqlite3_close(db);
           ^
tool\fuzzershell.c:1139:14: note: rc is assigned
          rc = sqlite3_exec(db, zSql, execCallback, 0, &zErrMsg);
             ^
tool\fuzzershell.c:1150:12: note: rc is overwritten
        rc = sqlite3_close(db);
           ^
tool\fuzzershell.c:1150:12: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
        rc = sqlite3_close(db);
           ^
tool\fuzzershell.c:1145:14: note: rc is assigned
          rc = sqlite3_exec(db, zSql, execNoop, 0, 0);
             ^
tool\fuzzershell.c:1150:12: note: rc is overwritten
        rc = sqlite3_close(db);
           ^
tool\fuzzershell.c:195:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
tool\fuzzershell.c:407:17: style: The scope of the variable 'pNew' can be reduced. [variableScope]
  sqlite3_vtab *pNew;
                ^
tool\fuzzershell.c:187:32: style: Parameter 'pNotUsed' can be declared as pointer to const. However it seems that 'shellLogNoop' is a callback function, if 'pNotUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void shellLogNoop(void *pNotUsed, int iErrCode, const char *zMsg){
                               ^
tool\fuzzershell.c:931:62: note: You might need to cast the function pointer here
  sqlite3_config(SQLITE_CONFIG_LOG, verboseFlag ? shellLog : shellLogNoop, 0);
                                                             ^
tool\fuzzershell.c:187:32: note: Parameter 'pNotUsed' can be declared as pointer to const
static void shellLogNoop(void *pNotUsed, int iErrCode, const char *zMsg){
                               ^
tool\fuzzershell.c:211:27: style: Parameter 'NotUsed' can be declared as pointer to const. However it seems that 'execNoop' is a callback function, if 'NotUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int execNoop(void *NotUsed, int argc, char **argv, char **colv){
                          ^
tool\fuzzershell.c:1145:39: note: You might need to cast the function pointer here
          rc = sqlite3_exec(db, zSql, execNoop, 0, 0);
                                      ^
tool\fuzzershell.c:211:27: note: Parameter 'NotUsed' can be declared as pointer to const
static int execNoop(void *NotUsed, int argc, char **argv, char **colv){
                          ^
tool\fuzzershell.c:224:29: style: Parameter 'NotUsed' can be declared as pointer to const. However it seems that 'traceNoop' is a callback function, if 'NotUsed' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void traceNoop(void *NotUsed, const char *zMsg){
                            ^
tool\fuzzershell.c:1107:57: note: You might need to cast the function pointer here
        sqlite3_trace(db, verboseFlag ? traceCallback : traceNoop, 0);
                                                        ^
tool\fuzzershell.c:224:29: note: Parameter 'NotUsed' can be declared as pointer to const
static void traceNoop(void *NotUsed, const char *zMsg){
                            ^
tool\fuzzershell.c:269:26: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static char *StrStr(Str *p){
                         ^
tool\fuzzershell.c:478:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  series_cursor *pCur = (series_cursor*)cur;
                 ^
tool\fuzzershell.c:495:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  series_cursor *pCur = (series_cursor*)cur;
                 ^
tool\fuzzershell.c:505:18: style: Variable 'pCur' can be declared as pointer to const [constVariablePointer]
  series_cursor *pCur = (series_cursor*)cur;
                 ^
tool\varint.c:5:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\varint.c:6:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\varint.c:7:0: information: Include file: <stdlib.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdlib.h>
^
tool\version-info.c:21:0: information: Include file: "sqlite3.h" not found. [missingInclude]
#include "sqlite3.h"
^
tool\version-info.c:23:0: information: Include file: <stdio.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <stdio.h>
^
tool\version-info.c:24:0: information: Include file: <string.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string.h>
^
tool\version-info.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\varint.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\sqlite3_rsync.c:1914:10: style: The comparison 'pIn != 0' is always false. [knownConditionTrueFalse]
  if( pIn!=0 && pOut!=0 ){
         ^
tool\sqlite3_rsync.c:1657:15: note: 'pIn' is assigned value '0' here.
  FILE *pIn = 0;
              ^
tool\sqlite3_rsync.c:1914:10: note: The comparison 'pIn != 0' is always false.
  if( pIn!=0 && pOut!=0 ){
         ^
tool\sqlite3_rsync.c:1914:14: style: Same expression on both sides of '&&' because 'pIn!=0' and 'pOut!=0' represent the same value. [knownConditionTrueFalse]
  if( pIn!=0 && pOut!=0 ){
             ^
tool\sqlite3_rsync.c:1657:15: note: 'pIn' is assigned value '0' here.
  FILE *pIn = 0;
              ^
tool\sqlite3_rsync.c:1658:16: note: 'pOut' is assigned value '0' here.
  FILE *pOut = 0;
               ^
tool\sqlite3_rsync.c:1914:14: note: Same expression on both sides of '&&' because 'pIn!=0' and 'pOut!=0' represent the same value.
  if( pIn!=0 && pOut!=0 ){
             ^
tool\sqlite3_rsync.c:1914:21: style: The comparison 'pOut != 0' is always false. [knownConditionTrueFalse]
  if( pIn!=0 && pOut!=0 ){
                    ^
tool\sqlite3_rsync.c:1658:16: note: 'pOut' is assigned value '0' here.
  FILE *pOut = 0;
               ^
tool\sqlite3_rsync.c:1914:21: note: The comparison 'pOut != 0' is always false.
  if( pIn!=0 && pOut!=0 ){
                    ^
tool\sqlite3_rsync.c:998:9: style: The scope of the variable 'zMsg' can be reduced. [variableScope]
  char *zMsg;
        ^
tool\sqlite3_rsync.c:1158:11: style: The scope of the variable 'n' can be reduced. [variableScope]
      int n;
          ^
tool\sqlite3_rsync.c:420:9: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
  char *z = sqlite3_str_value(pStr);
        ^
tool\sqlite3_rsync.c:901:11: warning: Shifting signed 32-bit value by 31 bits is undefined behaviour. See condition at line 897. [shiftTooManyBitsSigned]
  return 1<<x;
          ^
tool\sqlite3_rsync.c:897:15: note: Assuming that condition 'x>=32' is not redundant
  if( x<0 || x>=32 ){
              ^
tool\sqlite3_rsync.c:901:11: note: Shift
  return 1<<x;
          ^
tool\varint.c:55:7: style: The scope of the variable 'x' can be reduced. [variableScope]
  u64 x;
      ^
tool\varint.c:97:11: style: Variable 'z' can be declared as pointer to const [constVariablePointer]
    char *z = argv[1];
          ^
tool\sqldiff.c:1139:14: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
  for(i=0; az[i] && (i<n || n<0); i++){
             ^
tool\sqldiff.c:1768:15: style: Condition 'pOut<pEnd' is always true [knownConditionTrueFalse]
      if( pOut<pEnd ) *pOut++ = *p;
              ^
tool\sqldiff.c:1763:22: note: Assuming that condition 'pOut<pEnd' is not redundant
    while( *p && pOut<pEnd ){
                     ^
tool\sqldiff.c:1768:15: note: Condition 'pOut<pEnd' is always true
      if( pOut<pEnd ) *pOut++ = *p;
              ^
tool\sqldiff.c:210:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, j;                /* Loop counters */
      ^
tool\sqldiff.c:210:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;                /* Loop counters */
         ^
tool\sqldiff.c:409:10: style: The scope of the variable 'az' can be reduced. [variableScope]
  char **az = 0;            /* List of columns */
         ^
tool\sqldiff.c:411:7: style: The scope of the variable 'nCol' can be reduced. [variableScope]
  int nCol;                 /* Number of data columns */
      ^
tool\sqldiff.c:412:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                    /* Loop counter */
      ^
tool\sqldiff.c:414:15: style: The scope of the variable 'zSep' can be reduced. [variableScope]
  const char *zSep;         /* Separator string */
              ^
tool\sqldiff.c:415:16: style: The scope of the variable 'pIns' can be reduced. [variableScope]
  sqlite3_str *pIns;        /* Beginning of the INSERT statement */
               ^
tool\sqldiff.c:1002:15: style: The scope of the variable 'iBlock' can be reduced. [variableScope]
    int iSrc, iBlock;
              ^
tool\sqldiff.c:1487:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
tool\sqldiff.c:1487:10: style: The scope of the variable 'n' can be reduced. [variableScope]
  int i, n;
         ^
tool\sqldiff.c:817:29: style: Parameter 'pHash' can be declared as pointer to const [constParameterPointer]
static u32 hash_32bit(hash *pHash){
                            ^
tool\sqldiff.c:409:13: style: Variable 'az' is assigned a value that is never used. [unreadVariable]
  char **az = 0;            /* List of columns */
            ^
tool\sqldiff.c:1091:17: style: Variable 'bestCnt' is assigned a value that is never used. [unreadVariable]
        bestCnt = 0;
                ^
tool\sqldiff.c:1812:8: style: Variable 'zSql' is assigned a value that is never used. [unreadVariable]
  zSql = gobble_token(zSql, zToken, sizeof(zToken));
       ^
tool\src-verify.c:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
tool\mksourceid.c:71:7: style: The scope of the variable 'C0' can be reduced. [variableScope]
  u64 C0, C1, C2, C3, C4;
      ^
tool\mksourceid.c:71:11: style: The scope of the variable 'C1' can be reduced. [variableScope]
  u64 C0, C1, C2, C3, C4;
          ^
tool\mksourceid.c:71:15: style: The scope of the variable 'C2' can be reduced. [variableScope]
  u64 C0, C1, C2, C3, C4;
              ^
tool\mksourceid.c:71:19: style: The scope of the variable 'C3' can be reduced. [variableScope]
  u64 C0, C1, C2, C3, C4;
                  ^
tool\mksourceid.c:71:23: style: The scope of the variable 'C4' can be reduced. [variableScope]
  u64 C0, C1, C2, C3, C4;
                      ^
tool\mksourceid.c:72:7: style: The scope of the variable 'D0' can be reduced. [variableScope]
  u64 D0, D1, D2, D3, D4;
      ^
tool\mksourceid.c:72:11: style: The scope of the variable 'D1' can be reduced. [variableScope]
  u64 D0, D1, D2, D3, D4;
          ^
tool\mksourceid.c:72:15: style: The scope of the variable 'D2' can be reduced. [variableScope]
  u64 D0, D1, D2, D3, D4;
              ^
tool\mksourceid.c:72:19: style: The scope of the variable 'D3' can be reduced. [variableScope]
  u64 D0, D1, D2, D3, D4;
                  ^
tool\mksourceid.c:72:23: style: The scope of the variable 'D4' can be reduced. [variableScope]
  u64 D0, D1, D2, D3, D4;
                      ^
tool\mksourceid.c:482:43: style: Parameter 'digest' can be declared as pointer to const [constParameterPointer]
static void DigestToBase16(unsigned char *digest, char *zBuf, int nByte){
                                          ^
src\expr.c:6468:14: style: Variable 'pDef' can be declared as pointer to const [constVariablePointer]
    FuncDef *pDef;
             ^
tool\src-verify.c:877:12: warning: Either the condition 'nDir<0' is redundant or the array 'zFile[40000]' is accessed at index -1, which is out of bounds. [negativeIndex]
  if( zFile[nDir-1]!='/' ){
           ^
tool\src-verify.c:872:11: note: Assuming that condition 'nDir<0' is not redundant
  if( nDir<0 ){
          ^
tool\src-verify.c:877:12: note: Negative array index
  if( zFile[nDir-1]!='/' ){
           ^
tool\sqlite3_rsync.c:95:0: information: Include file: <windows.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <windows.h>
^
tool\sqlite3_rsync.c:96:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <io.h>
^
tool\sqlite3_rsync.c:97:0: information: Include file: <fcntl.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fcntl.h>
^
tool\src-verify.c:281:7: style: The scope of the variable 'C0' can be reduced. [variableScope]
  u64 C0, C1, C2, C3, C4;
      ^
tool\src-verify.c:281:11: style: The scope of the variable 'C1' can be reduced. [variableScope]
  u64 C0, C1, C2, C3, C4;
          ^
tool\src-verify.c:281:15: style: The scope of the variable 'C2' can be reduced. [variableScope]
  u64 C0, C1, C2, C3, C4;
              ^
tool\src-verify.c:281:19: style: The scope of the variable 'C3' can be reduced. [variableScope]
  u64 C0, C1, C2, C3, C4;
                  ^
tool\src-verify.c:281:23: style: The scope of the variable 'C4' can be reduced. [variableScope]
  u64 C0, C1, C2, C3, C4;
                      ^
tool\src-verify.c:282:7: style: The scope of the variable 'D0' can be reduced. [variableScope]
  u64 D0, D1, D2, D3, D4;
      ^
tool\src-verify.c:282:11: style: The scope of the variable 'D1' can be reduced. [variableScope]
  u64 D0, D1, D2, D3, D4;
          ^
tool\src-verify.c:282:15: style: The scope of the variable 'D2' can be reduced. [variableScope]
  u64 D0, D1, D2, D3, D4;
              ^
tool\src-verify.c:282:19: style: The scope of the variable 'D3' can be reduced. [variableScope]
  u64 D0, D1, D2, D3, D4;
                  ^
tool\src-verify.c:282:23: style: The scope of the variable 'D4' can be reduced. [variableScope]
  u64 D0, D1, D2, D3, D4;
                      ^
tool\src-verify.c:720:10: style: Checking if unsigned expression 'n' is less than zero. [unsignedLessThanZero]
    if( n<=0 ) break;
         ^
tool\src-verify.c:748:10: style: Checking if unsigned expression 'n' is less than zero. [unsignedLessThanZero]
    if( n<=0 ) break;
         ^
tool\src-verify.c:689:43: style: Parameter 'digest' can be declared as pointer to const [constParameterPointer]
static void DigestToBase16(unsigned char *digest, char *zBuf, int nByte){
                                          ^
tool\src-verify.c:761:9: style: Variable 'zSlash' can be declared as pointer to const [constVariablePointer]
  char *zSlash = strchr(z, '\\');
        ^
test\speedtest1.c:2073:11: style: Parameter 'aCoord' can be declared as pointer to const. However it seems that 'xsliceGeometryCallback' is a callback function, if 'aCoord' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
  double *aCoord,
          ^
test\speedtest1.c:2182:51: note: You might need to cast the function pointer here
  sqlite3_rtree_geometry_callback(g.db, "xslice", xsliceGeometryCallback, 0);
                                                  ^
test\speedtest1.c:2073:11: note: Parameter 'aCoord' can be declared as pointer to const
  double *aCoord,
          ^
tool\sqlite3_rsync.c:1826:15: style: Condition 'popen2(zCmd,&ctx.pIn,&ctx.pOut,&childPid,0)' is always false [knownConditionTrueFalse]
    if( popen2(zCmd, &ctx.pIn, &ctx.pOut, &childPid, 0) ){
              ^
tool\sqlite3_rsync.c:1826:15: note: Calling function 'popen2' returns 0
    if( popen2(zCmd, &ctx.pIn, &ctx.pOut, &childPid, 0) ){
              ^
tool\sqlite3_rsync.c:1826:15: note: Condition 'popen2(zCmd,&ctx.pIn,&ctx.pOut,&childPid,0)' is always false
    if( popen2(zCmd, &ctx.pIn, &ctx.pOut, &childPid, 0) ){
              ^
tool\sqlite3_rsync.c:1852:15: style: Condition 'popen2(zCmd,&ctx.pIn,&ctx.pOut,&childPid,0)' is always false [knownConditionTrueFalse]
    if( popen2(zCmd, &ctx.pIn, &ctx.pOut, &childPid, 0) ){
              ^
tool\sqlite3_rsync.c:1852:15: note: Calling function 'popen2' returns 0
    if( popen2(zCmd, &ctx.pIn, &ctx.pOut, &childPid, 0) ){
              ^
tool\sqlite3_rsync.c:1852:15: note: Condition 'popen2(zCmd,&ctx.pIn,&ctx.pOut,&childPid,0)' is always false
    if( popen2(zCmd, &ctx.pIn, &ctx.pOut, &childPid, 0) ){
              ^
tool\sqlite3_rsync.c:1873:15: style: Condition 'popen2(zCmd,&ctx.pIn,&ctx.pOut,&childPid,0)' is always false [knownConditionTrueFalse]
    if( popen2(zCmd, &ctx.pIn, &ctx.pOut, &childPid, 0) ){
              ^
tool\sqlite3_rsync.c:1873:15: note: Calling function 'popen2' returns 0
    if( popen2(zCmd, &ctx.pIn, &ctx.pOut, &childPid, 0) ){
              ^
tool\sqlite3_rsync.c:1873:15: note: Condition 'popen2(zCmd,&ctx.pIn,&ctx.pOut,&childPid,0)' is always false
    if( popen2(zCmd, &ctx.pIn, &ctx.pOut, &childPid, 0) ){
              ^
ext\fts5\fts5_index.c:8238:26: style: Condition '(z[i+2]&0xC0)!=0x80' is always false [knownConditionTrueFalse]
      if( (z[i+2] & 0xC0)!=0x80 ) return 1;
                         ^
ext\fts5\fts5_index.c:8237:61: note: Assuming that condition '(z[i+2]&0xC0)!=0x80' is not redundant
      if( i+3>=n || (z[i+1] & 0xC0)!=0x80 || (z[i+2] & 0xC0)!=0x80 ) return 1;
                                                            ^
ext\fts5\fts5_index.c:8238:26: note: Condition '(z[i+2]&0xC0)!=0x80' is always false
      if( (z[i+2] & 0xC0)!=0x80 ) return 1;
                         ^
ext\fts5\fts5_index.c:2931:7: style: The scope of the variable 'i1' can be reduced. [variableScope]
  int i1 = p1 - pIter->aSeg;
      ^
ext\fts5\fts5_index.c:2932:7: style: The scope of the variable 'i2' can be reduced. [variableScope]
  int i2 = p2 - pIter->aSeg;
      ^
ext\fts5\fts5_index.c:2926:13: style: Parameter 'pIter' can be declared as pointer to const [constParameterPointer]
  Fts5Iter *pIter,
            ^
ext\fts5\fts5_index.c:2929:16: style: Parameter 'pRes' can be declared as pointer to const [constParameterPointer]
  Fts5CResult *pRes
               ^
ext\fts5\fts5_index.c:2967:49: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static void fts5AssertMultiIterSetup(Fts5Index *p, Fts5Iter *pIter){
                                                ^
ext\fts5\fts5_index.c:6499:27: style: Variable 'p1' can be declared as pointer to const [constVariablePointer]
        Fts5TokenDataMap *p1 = &pT->aMap[ii-1];
                          ^
ext\fts5\fts5_index.c:6500:27: style: Variable 'p2' can be declared as pointer to const [constVariablePointer]
        Fts5TokenDataMap *p2 = &pT->aMap[ii];
                          ^
ext\fts5\fts5_index.c:8170:10: style: Variable 'pDlidx' is assigned a value that is never used. [unreadVariable]
  pDlidx = 0;
         ^
ext\wasm\api\sqlite3-wasm.c:403:11: style: int result is assigned to long long variable. If the variable is long long to avoid loss of information, then you have loss of information. [truncLongCastAssignment]
    s->v8 = s->v4 * 2;
          ^
tool\src-verify.c:49:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <io.h>
^
test\speedtest1.c:91:0: information: Include file: <io.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <io.h>
^
src\where.c:4762:19: style: Condition 'sCur.n==0' is always true [knownConditionTrueFalse]
        if( sCur.n==0 ){
                  ^
src\where.c:4741:18: note: Assignment 'sCur.n=0', assigned value is 0
        sCur.n = 0;
                 ^
src\where.c:4762:19: note: Condition 'sCur.n==0' is always true
        if( sCur.n==0 ){
                  ^
src\test1.c:9160:14: style: Local variable 'sqlite3WhereTrace' shadows outer variable [shadowVariable]
  extern u32 sqlite3WhereTrace;
             ^
src\sqliteInt.h:1161:12: note: Shadowed declaration
extern u32 sqlite3WhereTrace;
           ^
src\test1.c:9160:14: note: Shadow variable
  extern u32 sqlite3WhereTrace;
             ^
src\where.c:125:15: style: The scope of the variable 'pInner' can be reduced. [variableScope]
  WhereLevel *pInner;
              ^
src\where.c:1275:7: style: The scope of the variable 'addrTop' can be reduced. [variableScope]
  int addrTop;                         /* Address of OP_Rewind */
      ^
src\where.c:1276:7: style: The scope of the variable 'addrCont' can be reduced. [variableScope]
  int addrCont;                        /* Jump here to skip a row */
      ^
src\where.c:1278:20: style: The scope of the variable 'pWCEnd' can be reduced. [variableScope]
  const WhereTerm *pWCEnd;             /* Last WHERE clause term */
                   ^
src\where.c:1282:7: style: The scope of the variable 'iCur' can be reduced. [variableScope]
  int iCur;                            /* Cursor for table getting the filter */
      ^
src\where.c:3665:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                    /* Loop counter */
      ^
src\where.c:3667:14: style: The scope of the variable 'aiColumn' can be reduced. [variableScope]
  const i16 *aiColumn;      /* Columns contained in the index */
             ^
src\where.c:3668:7: style: The scope of the variable 'nColumn' can be reduced. [variableScope]
  u16 nColumn;              /* Number of columns in the index */
      ^
src\where.c:3721:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, rc;
      ^
src\where.c:4948:9: style: The scope of the variable 'pOBExpr' can be reduced. [variableScope]
  Expr *pOBExpr;          /* Current term of outer ORDER BY */
        ^
src\where.c:54:46: style: Parameter 'pWInfo' can be declared as pointer to const [constParameterPointer]
LogEst sqlite3WhereOutputRowCount(WhereInfo *pWInfo){
                                             ^
src\where.c:62:39: style: Parameter 'pWInfo' can be declared as pointer to const [constParameterPointer]
int sqlite3WhereIsDistinct(WhereInfo *pWInfo){
                                      ^
src\where.c:125:15: style: Variable 'pInner' can be declared as pointer to const [constVariablePointer]
  WhereLevel *pInner;
              ^
src\where.c:143:42: style: Parameter 'pWInfo' can be declared as pointer to const [constParameterPointer]
int sqlite3WhereContinueLabel(WhereInfo *pWInfo){
                                         ^
src\where.c:152:39: style: Parameter 'pWInfo' can be declared as pointer to const [constParameterPointer]
int sqlite3WhereBreakLabel(WhereInfo *pWInfo){
                                      ^
src\where.c:173:38: style: Parameter 'pWInfo' can be declared as pointer to const [constParameterPointer]
int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){
                                     ^
src\where.c:189:45: style: Parameter 'pWInfo' can be declared as pointer to const [constParameterPointer]
int sqlite3WhereUsesDeferredSeek(WhereInfo *pWInfo){
                                            ^
src\where.c:196:56: style: Parameter 'pSrc' can be declared as pointer to const [constParameterPointer]
static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){
                                                       ^
src\where.c:277:20: style: Variable 'pOldBlk' can be declared as pointer to const [constVariablePointer]
    WhereMemBlock *pOldBlk = (WhereMemBlock*)pOld;
                   ^
src\where.c:594:11: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    Expr *p = sqlite3ExprSkipCollateAndLikely(pList->a[i].pExpr);
          ^
src\where.c:600:16: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
      CollSeq *pColl = sqlite3ExprNNCollSeq(pParse, pList->a[i].pExpr);
               ^
src\where.c:659:11: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    Expr *p = sqlite3ExprSkipCollateAndLikely(pDistinct->a[i].pExpr);
          ^
src\where.c:994:14: style: Variable 'pWCEnd' can be declared as pointer to const [constVariablePointer]
  WhereTerm *pWCEnd;          /* End of pWC->a[] */
             ^
src\where.c:1132:15: style: Variable 'pX' can be declared as pointer to const [constVariablePointer]
        Expr *pX = pTerm->pExpr;
              ^
src\where.c:1193:15: style: Variable 'pSubq' can be declared as pointer to const [constVariablePointer]
    Subquery *pSubq;
              ^
src\where.c:1908:43: style: Parameter 'pTerm' can be declared as pointer to const [constParameterPointer]
static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){
                                          ^
src\where.c:2918:12: style: Variable 'pIndex' can be declared as pointer to const [constVariablePointer]
    Index *pIndex = p->u.btree.pIndex;
           ^
src\where.c:2960:22: style: Variable 'pX' can be declared as pointer to const [constVariablePointer]
  WhereTerm *pTerm, *pX;
                     ^
src\where.c:3007:17: style: Variable 'pRight' can be declared as pointer to const [constVariablePointer]
          Expr *pRight = pTerm->pExpr->pRight;
                ^
src\where.c:3048:10: style: Parameter 'pIdx' can be declared as pointer to const [constParameterPointer]
  Index *pIdx,         /* The index to be used for a inequality constraint */
         ^
src\where.c:3061:14: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
    CollSeq *pColl;               /* Comparison collation sequence */
             ^
src\where.c:3062:11: style: Variable 'pLhs' can be declared as pointer to const [constVariablePointer]
    Expr *pLhs, *pRhs;
          ^
src\where.c:3551:21: style: Parameter 'pBuilder' can be declared as pointer to const [constParameterPointer]
  WhereLoopBuilder *pBuilder,
                    ^
src\where.c:3594:10: style: Variable 'pParse' can be declared as pointer to const [constVariablePointer]
  Parse *pParse;
         ^
src\where.c:3603:11: style: Variable 'pExpr' can be declared as pointer to const [constVariablePointer]
    Expr *pExpr;
          ^
src\where.c:3664:66: style: Parameter 'pExpr' can be declared as pointer to const. However it seems that 'whereIsCoveringIndexWalkCallback' is a callback function, if 'pExpr' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int whereIsCoveringIndexWalkCallback(Walker *pWalk, Expr *pExpr){
                                                                 ^
src\where.c:3745:21: note: You might need to cast the function pointer here
  w.xExprCallback = whereIsCoveringIndexWalkCallback;
                    ^
src\where.c:3664:66: note: Parameter 'pExpr' can be declared as pointer to const
static int whereIsCoveringIndexWalkCallback(Walker *pWalk, Expr *pExpr){
                                                                 ^
src\where.c:3817:11: style: Variable 'pLeft' can be declared as pointer to const [constVariablePointer]
    Expr *pLeft = pPart->pLeft;
          ^
src\where.c:3898:12: style: Variable 'pTabList' can be declared as pointer to const [constVariablePointer]
  SrcList *pTabList;          /* The FROM clause */
           ^
src\where.c:3963:16: style: Variable 'pWCEnd' can be declared as pointer to const [constVariablePointer]
    WhereTerm *pWCEnd = pWC->a + pWC->nTerm;
               ^
src\where.c:4193:35: style: Parameter 'pTerm' can be declared as pointer to const [constParameterPointer]
static int isLimitTerm(WhereTerm *pTerm){
                                  ^
src\where.c:4204:42: style: Parameter 'aUsage' can be declared as pointer to const [constParameterPointer]
  struct sqlite3_index_constraint_usage *aUsage,
                                         ^
src\where.c:4436:11: style: Variable 'pX' can be declared as pointer to const [constVariablePointer]
    Expr *pX = termFromWhereClause(pHidden->pWC, iTerm)->pExpr;
          ^
src\where.c:4482:18: style: Variable 'pTerm' can be declared as pointer to const [constVariablePointer]
      WhereTerm *pTerm = termFromWhereClause(
                 ^
src\where.c:4506:20: style: Variable 'pHidden' can be declared as pointer to const [constVariablePointer]
  HiddenIndexInfo *pHidden = (HiddenIndexInfo*)&pIdxInfo[1];
                   ^
src\where.c:4695:22: style: Variable 'pWCEnd' can be declared as pointer to const [constVariablePointer]
  WhereTerm *pTerm, *pWCEnd;
                     ^
src\where.c:4701:12: style: Variable 'pItem' can be declared as pointer to const [constVariablePointer]
  SrcItem *pItem;
           ^
src\where.c:4718:25: style: Variable 'pOrWCEnd' can be declared as pointer to const [constVariablePointer]
      WhereTerm * const pOrWCEnd = &pOrWC->a[pOrWC->nTerm];
                        ^
src\where.c:4821:12: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
  SrcItem *pEnd = &pTabList->a[pWInfo->nLevel];
           ^
src\where.c:4936:14: style: Parameter 'pWInfo' can be declared as pointer to const [constParameterPointer]
  WhereInfo *pWInfo,      /* The WHERE clause */
             ^
src\where.c:4948:9: style: Variable 'pOBExpr' can be declared as pointer to const [constVariablePointer]
  Expr *pOBExpr;          /* Current term of outer ORDER BY */
        ^
src\where.c:5028:14: style: Variable 'pTerm' can be declared as pointer to const [constVariablePointer]
  WhereTerm *pTerm;     /* A single term of the WHERE clause */
             ^
src\where.c:5030:12: style: Variable 'pColl' can be declared as pointer to const [constVariablePointer]
  CollSeq *pColl;       /* COLLATE function from an ORDER BY clause term */
           ^
src\where.c:5032:12: style: Variable 'db' can be declared as pointer to const [constVariablePointer]
  sqlite3 *db = pWInfo->pParse->db;  /* Database connection */
           ^
src\where.c:5120:18: style: Variable 'pColl2' can be declared as pointer to const [constVariablePointer]
        CollSeq *pColl2 = sqlite3ExprCompareCollSeq(pParse, pTerm->pExpr);
                 ^
src\where.c:5199:19: style: Variable 'pX' can be declared as pointer to const [constVariablePointer]
            Expr *pX = pLoop->aLTerm[j]->pExpr;
                  ^
src\where.c:5362:37: style: Parameter 'pWInfo' can be declared as pointer to const [constParameterPointer]
int sqlite3WhereIsSorted(WhereInfo *pWInfo){
                                    ^
src\where.c:5540:16: style: Variable 'pFactTab' can be declared as pointer to const [constVariablePointer]
      SrcItem *pFactTab;        /* The candidate fact table */
               ^
src\where.c:6134:16: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    WhereLoop *p = pWInfo->a[i].pWLoop;
               ^
src\where.c:6269:59: style: Parameter 'pExpr' can be declared as pointer to const. However it seems that 'exprNodeIsDeterministic' is a callback function, if 'pExpr' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static int exprNodeIsDeterministic(Walker *pWalker, Expr *pExpr){
                                                          ^
src\where.c:6286:21: note: You might need to cast the function pointer here
  w.xExprCallback = exprNodeIsDeterministic;
                    ^
src\where.c:6269:59: note: Parameter 'pExpr' can be declared as pointer to const
static int exprNodeIsDeterministic(Walker *pWalker, Expr *pExpr){
                                                          ^
src\where.c:6377:24: style: Variable 'pEnd' can be declared as pointer to const [constVariablePointer]
    WhereTerm *pTerm, *pEnd;
                       ^
src\where.c:6378:14: style: Variable 'pItem' can be declared as pointer to const [constVariablePointer]
    SrcItem *pItem;
             ^
src\where.c:6379:16: style: Variable 'pLoop' can be declared as pointer to const [constVariablePointer]
    WhereLoop *pLoop;
               ^
src\where.c:6552:14: style: Variable 'pItem' can be declared as pointer to const [constVariablePointer]
    SrcItem *pItem = &pWInfo->pTabList->a[ii];
             ^
src\where.c:7248:17: style: Variable 'pSubq' can be declared as pointer to const [constVariablePointer]
      Subquery *pSubq;
                ^
src\where.c:7359:14: style: Variable 'pIdx' can be declared as pointer to const [constVariablePointer]
      Index *pIdx;
             ^
src\where.c:7506:19: style: Variable 'pLastOp' can be declared as pointer to const [constVariablePointer]
    VdbeOp *pOp, *pLastOp;
                  ^
src\where.c:4947:13: style: Variable 'revIdx' is assigned a value that is never used. [unreadVariable]
  u8 revIdx = 0;          /* Sort direction for jSub */
            ^
test\speedtest1.c:2912:0: information: Include file: <sys/types.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <sys/types.h>
^
test\speedtest1.c:2913:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <unistd.h>
^
test\fuzzcheck.c:99:0: information: Include file: <signal.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <signal.h>
^
test\fuzzcheck.c:100:0: information: Include file: <unistd.h> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
# include <unistd.h>
^
tool\lemon.c:1340:24: style: Condition 'spx->prec==spy->prec' is always true [knownConditionTrueFalse]
    }else if( spx->prec==spy->prec && spx->assoc==RIGHT ){ /* Use operator */
                       ^
tool\lemon.c:1336:24: note: Assuming that condition 'spx->prec>spy->prec' is not redundant
    }else if( spx->prec>spy->prec ){    /* higher precedence wins */
                       ^
tool\lemon.c:1338:24: note: Assuming that condition 'spx->prec<spy->prec' is not redundant
    }else if( spx->prec<spy->prec ){
                       ^
tool\lemon.c:1340:24: note: Condition 'spx->prec==spy->prec' is always true
    }else if( spx->prec==spy->prec && spx->assoc==RIGHT ){ /* Use operator */
                       ^
tool\lemon.c:1342:24: style: Condition 'spx->prec==spy->prec' is always true [knownConditionTrueFalse]
    }else if( spx->prec==spy->prec && spx->assoc==LEFT ){  /* to break tie */
                       ^
tool\lemon.c:1336:24: note: Assuming that condition 'spx->prec>spy->prec' is not redundant
    }else if( spx->prec>spy->prec ){    /* higher precedence wins */
                       ^
tool\lemon.c:1338:24: note: Assuming that condition 'spx->prec<spy->prec' is not redundant
    }else if( spx->prec<spy->prec ){
                       ^
tool\lemon.c:1342:24: note: Condition 'spx->prec==spy->prec' is always true
    }else if( spx->prec==spy->prec && spx->assoc==LEFT ){  /* to break tie */
                       ^
tool\lemon.c:1357:24: style: Condition 'spx->prec<spy->prec' is always true [knownConditionTrueFalse]
    }else if( spx->prec<spy->prec ){
                       ^
tool\lemon.c:1352:29: note: Assuming that condition 'spx->prec==spy->prec' is not redundant
    spy->prec<0 || spx->prec==spy->prec ){
                            ^
tool\lemon.c:1357:24: note: Condition 'spx->prec<spy->prec' is always true
    }else if( spx->prec<spy->prec ){
                       ^
tool\lemon.c:3874:10: style: Condition 'cp==0' is always false [knownConditionTrueFalse]
   if( cp==0 ) return;
         ^
tool\lemon.c:1074:5: warning: Either the condition '(stp)==0' is redundant or there is possible null pointer dereference: stp. [nullPointerRedundantCheck]
    stp->bp = bp;                /* Remember the configuration basis */
    ^
tool\lemon.c:1073:5: note: Assuming that condition '(stp)==0' is not redundant
    MemoryCheck(stp);
    ^
tool\lemon.c:1074:5: note: Null pointer dereference
    stp->bp = bp;                /* Remember the configuration basis */
    ^
tool\lemon.c:1075:5: warning: Either the condition '(stp)==0' is redundant or there is possible null pointer dereference: stp. [nullPointerRedundantCheck]
    stp->cfp = cfp;              /* Remember the configuration closure */
    ^
tool\lemon.c:1073:5: note: Assuming that condition '(stp)==0' is not redundant
    MemoryCheck(stp);
    ^
tool\lemon.c:1075:5: note: Null pointer dereference
    stp->cfp = cfp;              /* Remember the configuration closure */
    ^
tool\lemon.c:1076:5: warning: Either the condition '(stp)==0' is redundant or there is possible null pointer dereference: stp. [nullPointerRedundantCheck]
    stp->statenum = lemp->nstate++; /* Every state gets a sequence number */
    ^
tool\lemon.c:1073:5: note: Assuming that condition '(stp)==0' is not redundant
    MemoryCheck(stp);
    ^
tool\lemon.c:1076:5: note: Null pointer dereference
    stp->statenum = lemp->nstate++; /* Every state gets a sequence number */
    ^
tool\lemon.c:1077:5: warning: Either the condition '(stp)==0' is redundant or there is possible null pointer dereference: stp. [nullPointerRedundantCheck]
    stp->ap = 0;                 /* No actions, yet. */
    ^
tool\lemon.c:1073:5: note: Assuming that condition '(stp)==0' is not redundant
    MemoryCheck(stp);
    ^
tool\lemon.c:1077:5: note: Null pointer dereference
    stp->ap = 0;                 /* No actions, yet. */
    ^
tool\lemon.c:1078:22: warning: Either the condition '(stp)==0' is redundant or there is possible null pointer dereference: stp. [nullPointerRedundantCheck]
    State_insert(stp,stp->bp);   /* Add to the state table */
                     ^
tool\lemon.c:1073:5: note: Assuming that condition '(stp)==0' is not redundant
    MemoryCheck(stp);
    ^
tool\lemon.c:1078:22: note: Null pointer dereference
    State_insert(stp,stp->bp);   /* Add to the state table */
                     ^
tool\lemon.c:1114:11: warning: Either the condition '(stp)==0' is redundant or there is possible null pointer dereference: stp. [nullPointerRedundantCheck]
  for(cfp=stp->cfp; cfp; cfp=cfp->next) cfp->status = INCOMPLETE;
          ^
tool\lemon.c:1073:5: note: Assuming that condition '(stp)==0' is not redundant
    MemoryCheck(stp);
    ^
tool\lemon.c:1079:22: note: Calling function 'buildshifts', 2nd argument 'stp' value is 0
    buildshifts(lemp,stp);       /* Recursively compute successor states */
                     ^
tool\lemon.c:1114:11: note: Null pointer dereference
  for(cfp=stp->cfp; cfp; cfp=cfp->next) cfp->status = INCOMPLETE;
          ^
tool\lemon.c:5551:5: warning: Either the condition '(sp)==0' is redundant or there is possible null pointer dereference: sp. [nullPointerRedundantCheck]
    sp->name = Strsafe(x);
    ^
tool\lemon.c:5550:5: note: Assuming that condition '(sp)==0' is not redundant
    MemoryCheck(sp);
    ^
tool\lemon.c:5551:5: note: Null pointer dereference
    sp->name = Strsafe(x);
    ^
tool\lemon.c:2194:10: portability: Casting between signed char * and double * which have an incompatible binary data representation. [invalidPointerCast]
        *(double*)(op[j].arg) = dv;
         ^
tool\lemon.c:1484:10: style: The scope of the variable 'dot' can be reduced. [variableScope]
  int i, dot;
         ^
tool\lemon.c:2074:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
tool\lemon.c:2075:7: style: The scope of the variable 'dashdash' can be reduced. [variableScope]
  int dashdash = 0;
      ^
tool\lemon.c:2131:7: style: The scope of the variable 'lv' can be reduced. [variableScope]
  int lv = 0;
      ^
tool\lemon.c:2132:10: style: The scope of the variable 'dv' can be reduced. [variableScope]
  double dv = 0.0;
         ^
tool\lemon.c:2242:7: style: The scope of the variable 'dashdash' can be reduced. [variableScope]
  int dashdash = 0;
      ^
tool\lemon.c:2243:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
tool\lemon.c:2269:12: style: The scope of the variable 'len' can be reduced. [variableScope]
  int max, len;
           ^
tool\lemon.c:2752:39: style: The scope of the variable 'nBack' can be reduced. [variableScope]
        int nOld, n, nLine = 0, nNew, nBack;
                                      ^
tool\lemon.c:3382:21: style: The scope of the variable 'len' can be reduced. [variableScope]
  int i, j, maxlen, len, ncolumns, skip;
                    ^
tool\lemon.c:3414:18: style: The scope of the variable 'sp' can be reduced. [variableScope]
  struct symbol *sp;
                 ^
tool\lemon.c:3587:9: style: The scope of the variable 'j' can be reduced. [variableScope]
    int j;
        ^
tool\lemon.c:3730:10: style: The scope of the variable 'iStart' can be reduced. [variableScope]
  int i, iStart;
         ^
tool\lemon.c:3923:15: style: The scope of the variable 'empty' can be reduced. [variableScope]
  static char empty[1] = { 0 };
              ^
tool\lemon.c:3927:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
tool\lemon.c:5116:8: style: The scope of the variable 'pattern' can be reduced. [variableScope]
  char pattern[LINESIZE];
       ^
tool\lemon.c:5735:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i,arrSize;
      ^
tool\lemon.c:5914:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i,arrSize;
      ^
tool\lemon.c:91:12: style: Checking if unsigned expression 'nByte' is less than zero. [unsignedLessThanZero]
  if( nByte<0 ) return 0;
           ^
tool\lemon.c:110:15: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
    MemChunk *p = (MemChunk*)pOld;
              ^
tool\lemon.c:117:13: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  MemChunk *p;
            ^
tool\lemon.c:868:32: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
int acttab_action_size(acttab *p){
                               ^
tool\lemon.c:937:24: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
        struct symbol *sp = rp->rhs[i];
                       ^
tool\lemon.c:1087:32: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
int same_symbol(struct symbol *a, struct symbol *b)
                               ^
tool\lemon.c:1087:50: style: Parameter 'b' can be declared as pointer to const [constParameterPointer]
int same_symbol(struct symbol *a, struct symbol *b)
                                                 ^
tool\lemon.c:1322:18: style: Variable 'spx' can be declared as pointer to const [constVariablePointer]
  struct symbol *spx, *spy;
                 ^
tool\lemon.c:1322:24: style: Variable 'spy' can be declared as pointer to const [constVariablePointer]
  struct symbol *spx, *spy;
                       ^
tool\lemon.c:1634:35: style: Parameter 'z' can be declared as pointer to const. However it seems that 'handle_U_option' is a callback function, if 'z' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void handle_U_option(char *z){
                                  ^
tool\lemon.c:1774:28: note: You might need to cast the function pointer here
    {OPT_FSTR, "U", (char*)handle_U_option, "Undefine a macro."},
                           ^
tool\lemon.c:1634:35: note: Parameter 'z' can be declared as pointer to const
static void handle_U_option(char *z){
                                  ^
tool\lemon.c:1651:35: style: Parameter 'z' can be declared as pointer to const. However it seems that 'handle_d_option' is a callback function, if 'z' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void handle_d_option(char *z){
                                  ^
tool\lemon.c:1755:29: note: You might need to cast the function pointer here
    {OPT_FSTR, "d", (char*)&handle_d_option, "Output directory.  Default '.'"},
                            ^
tool\lemon.c:1651:35: note: Parameter 'z' can be declared as pointer to const
static void handle_d_option(char *z){
                                  ^
tool\lemon.c:1661:35: style: Parameter 'z' can be declared as pointer to const. However it seems that 'handle_T_option' is a callback function, if 'z' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void handle_T_option(char *z){
                                  ^
tool\lemon.c:1773:28: note: You might need to cast the function pointer here
    {OPT_FSTR, "T", (char*)handle_T_option, "Specify a template file."},
                           ^
tool\lemon.c:1661:35: note: Parameter 'z' can be declared as pointer to const
static void handle_T_option(char *z){
                                  ^
tool\lemon.c:3306:9: style: Variable 'filename' can be declared as pointer to const [constVariablePointer]
  char *filename = lemp->filename;
        ^
tool\lemon.c:3363:20: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
    struct symbol *sp = rp->rhs[i];
                   ^
tool\lemon.c:3381:18: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
  struct symbol *sp;
                 ^
tool\lemon.c:3414:18: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
  struct symbol *sp;
                 ^
tool\lemon.c:3485:21: style: Variable 'stp' can be declared as pointer to const [constVariablePointer]
      struct state *stp = ap->x.stp;
                    ^
tool\lemon.c:3588:20: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
    struct symbol *sp;
                   ^
tool\lemon.c:3611:20: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
    struct symbol *sp = lemp->symbols[i];
                   ^
tool\lemon.c:3692:42: style: Parameter 'lemp' can be declared as pointer to const [constParameterPointer]
PRIVATE int compute_action(struct lemon *lemp, struct action *ap)
                                         ^
tool\lemon.c:3728:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
PRIVATE void tplt_xfer(char *name, FILE *in, FILE *out, int *lineno)
                             ^
tool\lemon.c:3768:9: style: Variable 'tpltname' can be declared as pointer to const [constVariablePointer]
  char *tpltname;
        ^
tool\lemon.c:3770:9: style: Variable 'cp' can be declared as pointer to const [constVariablePointer]
  char *cp;
        ^
tool\lemon.c:3819:56: style: Parameter 'filename' can be declared as pointer to const [constParameterPointer]
PRIVATE void tplt_linedir(FILE *out, int lineno, char *filename)
                                                       ^
tool\lemon.c:3831:62: style: Parameter 'str' can be declared as pointer to const [constParameterPointer]
PRIVATE void tplt_print(FILE *out, struct lemon *lemp, char *str, int *lineno)
                                                             ^
tool\lemon.c:3899:35: style: Parameter 'sp' can be declared as pointer to const [constParameterPointer]
int has_destructor(struct symbol *sp, struct lemon *lemp)
                                  ^
tool\lemon.c:3899:53: style: Parameter 'lemp' can be declared as pointer to const [constParameterPointer]
int has_destructor(struct symbol *sp, struct lemon *lemp)
                                                    ^
tool\lemon.c:4169:16: style: Parameter 'rp' can be declared as pointer to const [constParameterPointer]
  struct rule *rp,
               ^
tool\lemon.c:4245:20: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
    struct symbol *sp = lemp->symbols[i];
                   ^
tool\lemon.c:4264:11: style: Variable 'cp' can be declared as pointer to const [constVariablePointer]
    char *cp;
          ^
tool\lemon.c:4379:17: style: Variable 'p1' can be declared as pointer to const [constVariablePointer]
  struct axset *p1 = (struct axset*)a;
                ^
tool\lemon.c:4380:17: style: Variable 'p2' can be declared as pointer to const [constVariablePointer]
  struct axset *p2 = (struct axset*)b;
                ^
tool\lemon.c:4397:20: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
    struct symbol *sp = rp->rhs[j];
                   ^
tool\lemon.c:4431:9: style: Variable 'prefix' can be declared as pointer to const [constVariablePointer]
  char *prefix;
        ^
tool\lemon.c:4500:24: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
        struct symbol *sp = rp->rhs[j];
                       ^
tool\lemon.c:4757:20: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
    struct symbol *sp = lemp->symbols[i];
                   ^
tool\lemon.c:4918:22: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
      struct symbol *p = lemp->symbols[i];
                     ^
tool\lemon.c:4956:22: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
      struct symbol *sp = lemp->symbols[i];
                     ^
tool\lemon.c:4990:20: style: Variable 'sp' can be declared as pointer to const [constVariablePointer]
    struct symbol *sp = lemp->symbols[i];
                   ^
tool\lemon.c:5157:21: style: Variable 'rp2' can be declared as pointer to const [constVariablePointer]
  struct rule *rp, *rp2, *rbest;
                    ^
tool\lemon.c:5372:30: style: Parameter 's2' can be declared as pointer to const [constParameterPointer]
int SetUnion(char *s1, char *s2)
                             ^
tool\lemon.c:5498:15: style: Variable 'oldnp' can be declared as pointer to const [constVariablePointer]
      x1node *oldnp, *newnp;
              ^
tool\lemon.c:3648:17: style: Variable 'pathbuf' is assigned a value that is never used. [unreadVariable]
  char *pathbuf = 0;
                ^
ext\fts5\fts5_index.c:8888:7: style: The scope of the variable 'ii' can be reduced. [variableScope]
  int ii;
      ^
ext\fts5\fts5_index.c:9148:15: style: The scope of the variable 'zArg' can be reduced. [variableScope]
  const char *zArg;
              ^
ext\fts5\fts5_index.c:9155:11: style: The scope of the variable 'segid' can be reduced. [variableScope]
      int segid, pgno;
          ^
ext\fts5\fts5_index.c:9155:18: style: The scope of the variable 'pgno' can be reduced. [variableScope]
      int segid, pgno;
                 ^
ext\fts5\fts5_index.c:9282:18: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
  Fts5Structure *p = pCsr->pStruct;
                 ^
ext\fts5\fts5_index.c:9303:19: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts5StructVcsr *pCsr = (Fts5StructVcsr*)cur;
                  ^
ext\fts5\fts5_index.c:9311:19: style: Variable 'pCsr' can be declared as pointer to const [constVariablePointer]
  Fts5StructVcsr *pCsr = (Fts5StructVcsr*)cur;
                  ^
ext\fts5\fts5_index.c:9122:12: style: Variable 'iOff' is assigned a value that is never used. [unreadVariable]
      iOff += fts5DecodeDoclist(&rc, &s, &a[iOff], iEnd-iOff);
           ^
src\json.c:2521:14: style: Return value 'sz+n==(u32)nBlob' is always true [knownConditionTrueFalse]
  return sz+n==(u32)nBlob;
             ^
src\json.c:2519:11: note: Assuming that condition 'sz+n!=(u32)nBlob' is not redundant
  if( sz+n!=(u32)nBlob ) return 0;
          ^
src\json.c:2520:38: note: Assuming condition is false
  if( (aBlob[0] & 0x0f)<=JSONB_FALSE && sz>0 ) return 0;
                                     ^
src\json.c:2521:14: note: Return value 'sz+n==(u32)nBlob' is always true
  return sz+n==(u32)nBlob;
             ^
src\vdbe.c:8813:5: warning: %u in format string (no. 3) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
    printf("hash: %llu modulo %d -> %u\n", h, pIn1->n, (int)(h%pIn1->n));
    ^
src\vdbe.c:8849:5: warning: %u in format string (no. 3) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
    printf("hash: %llu modulo %d -> %u\n", h, pIn1->n, (int)(h%pIn1->n));
    ^
src\vdbe.c:878:9: style: The scope of the variable 'once' can be reduced. [variableScope]
    int once = 1;
        ^
src\vdbe.c:91:36: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
static void updateMaxBlobsize(Mem *p){
                                   ^
src\vdbeaux.c:4906:15: warning: Assert statement calls a function which may have desired side effects: 'vdbeRecordCompareDebug'. [assertWithSideEffect]
      assert( vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, rc) );
              ^
src\vdbeaux.c:4932:11: warning: Assert statement calls a function which may have desired side effects: 'vdbeRecordCompareDebug'. [assertWithSideEffect]
       || vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, pPKey2->default_rc)
          ^
src\vdbeaux.c:5040:11: warning: Assert statement calls a function which may have desired side effects: 'vdbeRecordCompareDebug'. [assertWithSideEffect]
  assert( vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, res) );
          ^
src\vdbeaux.c:5108:11: warning: Assert statement calls a function which may have desired side effects: 'vdbeRecordCompareDebug'. [assertWithSideEffect]
  assert( vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, res)
          ^
src\vdbeaux.c:706:7: style: The scope of the variable 'nOp' can be reduced. [variableScope]
  int nOp;
      ^
src\vdbeaux.c:1652:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;
          ^
src\vdbeaux.c:1660:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;
          ^
src\vdbeaux.c:1745:7: style: The scope of the variable 'ii' can be reduced. [variableScope]
  int ii;
      ^
src\vdbeaux.c:1773:15: style: The scope of the variable 'v2' can be reduced. [variableScope]
          int v2;
              ^
src\vdbeaux.c:775:7: style: Variable 'pOp' can be declared as pointer to const [constVariablePointer]
  Op *pOp;
      ^
src\vdbeaux.c:829:55: style: Parameter 'pC' can be declared as pointer to const [constParameterPointer]
void sqlite3VdbeIncrWriteCounter(Vdbe *p, VdbeCursor *pC){
                                                      ^
src\vdbeaux.c:1032:19: style: Variable 'pX' can be declared as pointer to const [constVariablePointer]
          VdbeOp *pX = &v->aOp[j];
                  ^
src\vdbeaux.c:1079:46: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){
                                             ^
src\vdbeaux.c:1787:30: style: Variable 'pCtx' can be declared as pointer to const [constVariablePointer]
            sqlite3_context *pCtx = pOp->p4.pCtx;
                             ^
src\vdbeaux.c:2226:40: style: Parameter 'pFrame' can be declared as pointer to const [constParameterPointer]
int sqlite3VdbeFrameIsValid(VdbeFrame *pFrame){
                                       ^
src\vdbeaux.c:2467:17: style: Variable 'zCom' can be declared as pointer to const [constVariablePointer]
          char *zCom = sqlite3VdbeDisplayComment(db, pOp, zP4);
                ^
src\json.c:3730:17: style: Condition 'n==0' is always true [knownConditionTrueFalse]
      iStart = n==0 ? iStart+1 : iEnd;
                ^
src\json.c:3728:10: note: Assuming that condition 'n==0' is not redundant
    if( n==0 ){
         ^
src\json.c:3730:17: note: Condition 'n==0' is always true
      iStart = n==0 ? iStart+1 : iEnd;
                ^
src\wherecode.c:136:11: style: Variable 'zMsg' can be declared as pointer to const [constVariablePointer]
    char *zMsg;                   /* Text to add to EQP output */
          ^
src\select.c:1586:40: style: Parameter 'p' can be declared as pointer to const [constParameterPointer]
int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }
                                       ^
src\select.c:8785:13: style: Variable 'pExpr' can be declared as pointer to const [constVariablePointer]
      Expr *pExpr = pAggInfo->aCol[i].pCExpr;
            ^
src\select.c:8791:13: style: Variable 'pExpr' can be declared as pointer to const [constVariablePointer]
      Expr *pExpr = pAggInfo->aFunc[i].pFExpr;
            ^
src\where.c:7313:14: style: Parameter 'db' can be declared as pointer to const [constParameterPointer]
    sqlite3 *db,
             ^
autosetup\jimsh0.c:7470:0: style: The function 'Jim_IntHashFunction' is never used. [unusedFunction]
unsigned int Jim_IntHashFunction(unsigned int key)
^
tool\lemon.c:2260:0: style: The function 'OptErr' is never used. [unusedFunction]
void OptErr(int n)
^
src\tclsqlite.c:4016:0: style: The function 'Sqlite3_SafeInit' is never used. [unusedFunction]
EXTERN int Sqlite3_SafeInit(Tcl_Interp *interp){ return TCL_ERROR; }
^
src\tclsqlite.c:4017:0: style: The function 'Sqlite3_SafeUnload' is never used. [unusedFunction]
EXTERN int Sqlite3_SafeUnload(Tcl_Interp *interp, int flags){return TCL_ERROR;}
^
src\tclsqlite.c:4009:0: style: The function 'Sqlite3_Unload' is never used. [unusedFunction]
EXTERN int Sqlite3_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }
^
src\tclsqlite.c:4027:0: style: The function 'Sqlite_Init' is never used. [unusedFunction]
EXTERN int Sqlite_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp);}
^
src\tclsqlite.c:4031:0: style: The function 'Sqlite_SafeInit' is never used. [unusedFunction]
EXTERN int Sqlite_SafeInit(Tcl_Interp *interp){ return TCL_ERROR; }
^
src\tclsqlite.c:4032:0: style: The function 'Sqlite_SafeUnload' is never used. [unusedFunction]
EXTERN int Sqlite_SafeUnload(Tcl_Interp *interp, int flags){return TCL_ERROR;}
^
src\tclsqlite.c:4029:0: style: The function 'Sqlite_Unload' is never used. [unusedFunction]
EXTERN int Sqlite_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }
^
ext\fts3\fts3_test.c:603:0: style: The function 'Sqlitetestfts3_Init' is never used. [unusedFunction]
int Sqlitetestfts3_Init(Tcl_Interp *interp){
^
tool\lemon.c:5712:0: style: The function 'Symbol_Nth' is never used. [unusedFunction]
struct symbol *Symbol_Nth(int n)
^
src\tclsqlite.c:4008:0: style: The function 'Tclsqlite3_Init' is never used. [unusedFunction]
EXTERN int Tclsqlite3_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp); }
^
src\tclsqlite.c:4010:0: style: The function 'Tclsqlite3_Unload' is never used. [unusedFunction]
EXTERN int Tclsqlite3_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }
^
src\tclsqlite.c:4028:0: style: The function 'Tclsqlite_Init' is never used. [unusedFunction]
EXTERN int Tclsqlite_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp); }
^
src\tclsqlite.c:4030:0: style: The function 'Tclsqlite_Unload' is never used. [unusedFunction]
EXTERN int Tclsqlite_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }
^
ext\lsm1\lsm_sorted.c:6053:0: style: The function 'assertPointersOk' is never used. [unusedFunction]
static int assertPointersOk(
^
ext\lsm1\lsm_tree.c:391:0: style: The function 'assert_leaf_looks_ok' is never used. [unusedFunction]
void assert_leaf_looks_ok(TreeNode *pNode){
^
ext\lsm1\lsm_tree.c:395:0: style: The function 'assert_node_looks_ok' is never used. [unusedFunction]
void assert_node_looks_ok(TreeNode *pNode, int nHeight){
^
ext\lsm1\lsm-test\lsmtest_tdb4.c:268:0: style: The function 'btDeref' is never used. [unusedFunction]
static void btDeref(BtDb *p){
^
ext\lsm1\lsm-test\lsmtest_bt.c:5:0: style: The function 'do_bt' is never used. [unusedFunction]
int do_bt(int nArg, char **azArg){
^
ext\lsm1\lsm_tree.c:544:0: style: The function 'dump_tree_contents' is never used. [unusedFunction]
void dump_tree_contents(lsm_db *pDb, const char *zCaption){
^
test\threadtest2.c:57:0: style: The function 'integrity_check' is never used. [unusedFunction]
int integrity_check(sqlite *db, int id){
^
ext\lsm1\lsm_ckpt.c:654:0: style: The function 'lsmCheckpointLevels' is never used. [unusedFunction]
int lsmCheckpointLevels(
^
ext\lsm1\lsm_ckpt.c:613:0: style: The function 'lsmCheckpointLoadLevels' is never used. [unusedFunction]
int lsmCheckpointLoadLevels(lsm_db *pDb, void *pVal, int nVal){
^
ext\lsm1\lsm_file.c:822:0: style: The function 'lsmFsFileid' is never used. [unusedFunction]
int lsmFsFileid(lsm_db *pDb, void **ppId, int *pnId){
^
ext\lsm1\lsm_file.c:498:0: style: The function 'lsmFsTruncateLog' is never used. [unusedFunction]
int lsmFsTruncateLog(FileSystem *pFS, i64 nByte){
^
ext\lsm1\lsm_shared.c:1462:0: style: The function 'lsmHoldingClientMutex' is never used. [unusedFunction]
int lsmHoldingClientMutex(lsm_db *pDb){
^
ext\lsm1\lsm_shared.c:1628:0: style: The function 'lsmLsmInUse' is never used. [unusedFunction]
int lsmLsmInUse(lsm_db *db, i64 iLsmId, int *pbInUse){
^
ext\lsm1\lsm_sorted.c:3347:0: style: The function 'lsmMCursorType' is never used. [unusedFunction]
int lsmMCursorType(MultiCursor *pCsr, int *peType){
^
ext\lsm1\lsm_mem.c:95:0: style: The function 'lsmMallocStrdup' is never used. [unusedFunction]
char *lsmMallocStrdup(lsm_env *pEnv, const char *zIn){
^
ext\lsm1\lsm_mutex.c:85:0: style: The function 'lsmMutexNotHeld' is never used. [unusedFunction]
int lsmMutexNotHeld(lsm_env *pEnv, lsm_mutex *pMutex){
^
ext\lsm1\lsm_mutex.c:53:0: style: The function 'lsmMutexTry' is never used. [unusedFunction]
int lsmMutexTry(lsm_env *pEnv, lsm_mutex *pMutex){
^
ext\lsm1\lsm_sorted.c:5864:0: style: The function 'lsmSortedDumpStructure' is never used. [unusedFunction]
void lsmSortedDumpStructure(
^
ext\lsm1\lsm_sorted.c:2650:0: style: The function 'lsmSortedLoadFreelist' is never used. [unusedFunction]
int lsmSortedLoadFreelist(
^
ext\lsm1\lsm_sorted.c:3306:0: style: The function 'lsm_csr_cmp' is never used. [unusedFunction]
int lsm_csr_cmp(lsm_cursor *csr, const void *pKey, int nKey, int *piRes){
^
ext\lsm1\lsm_sorted.c:5361:0: style: The function 'lsm_flush' is never used. [unusedFunction]
int lsm_flush(lsm_db *db){
^
ext\lsm1\lsm_main.c:962:0: style: The function 'lsm_get_user_version' is never used. [unusedFunction]
int lsm_get_user_version(lsm_db *pDb, unsigned int *piUsr){
^
ext\lsm1\lsm_main.c:984:0: style: The function 'lsm_set_user_version' is never used. [unusedFunction]
int lsm_set_user_version(lsm_db *pDb, unsigned int iUsr){
^
ext\lsm1\lsm_shared.c:1962:0: style: The function 'print_all_db_locks' is never used. [unusedFunction]
void print_all_db_locks(lsm_db *db){
^
src\pager.c:987:0: style: The function 'print_pager_state' is never used. [unusedFunction]
char *print_pager_state(Pager *p){
^
src\test_windirent.c:131:0: style: The function 'readdir_r' is never used. [unusedFunction]
INT readdir_r(
^
ext\lsm1\lsm_sorted.c:5536:0: style: The function 'sortedDumpPage' is never used. [unusedFunction]
void sortedDumpPage(lsm_db *pDb, Segment *pRun, Page *pPg, int bVals){
^
src\build.c:1888:0: style: The function 'sqlite3AddCheckConstraint' is never used. [unusedFunction]
void sqlite3AddCheckConstraint(
^
src\build.c:1924:0: style: The function 'sqlite3AddCollateType' is never used. [unusedFunction]
void sqlite3AddCollateType(Parse *pParse, Token *pToken){
^
src\build.c:1476:0: style: The function 'sqlite3AddColumn' is never used. [unusedFunction]
void sqlite3AddColumn(Parse *pParse, Token sName, Token sType){
^
src\build.c:1715:0: style: The function 'sqlite3AddDefaultValue' is never used. [unusedFunction]
void sqlite3AddDefaultValue(
^
src\build.c:1957:0: style: The function 'sqlite3AddGenerated' is never used. [unusedFunction]
void sqlite3AddGenerated(Parse *pParse, Expr *pExpr, Token *pType){
^
src\build.c:1590:0: style: The function 'sqlite3AddNotNull' is never used. [unusedFunction]
void sqlite3AddNotNull(Parse *pParse, int onError){
^
src\build.c:1815:0: style: The function 'sqlite3AddPrimaryKey' is never used. [unusedFunction]
void sqlite3AddPrimaryKey(
^
src\build.c:1425:0: style: The function 'sqlite3AddReturning' is never used. [unusedFunction]
void sqlite3AddReturning(Parse *pParse, ExprList *pList){
^
src\alter.c:483:0: style: The function 'sqlite3AlterBeginAddColumn' is never used. [unusedFunction]
void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){
^
src\alter.c:2172:0: style: The function 'sqlite3AlterDropColumn' is never used. [unusedFunction]
void sqlite3AlterDropColumn(Parse *pParse, SrcList *pSrc, const Token *pName){
^
src\alter.c:313:0: style: The function 'sqlite3AlterFinishAddColumn' is never used. [unusedFunction]
void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){
^
src\alter.c:596:0: style: The function 'sqlite3AlterRenameColumn' is never used. [unusedFunction]
void sqlite3AlterRenameColumn(
^
src\alter.c:124:0: style: The function 'sqlite3AlterRenameTable' is never used. [unusedFunction]
void sqlite3AlterRenameTable(
^
src\analyze.c:1457:0: style: The function 'sqlite3Analyze' is never used. [unusedFunction]
void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){
^
src\attach.c:440:0: style: The function 'sqlite3Attach' is never used. [unusedFunction]
void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){
^
src\build.c:5221:0: style: The function 'sqlite3BeginTransaction' is never used. [unusedFunction]
void sqlite3BeginTransaction(Parse *pParse, int type){
^
src\trigger.c:104:0: style: The function 'sqlite3BeginTrigger' is never used. [unusedFunction]
void sqlite3BeginTrigger(
^
src\main.c:3920:0: style: The function 'sqlite3CorruptPgnoError' is never used. [unusedFunction]
int sqlite3CorruptPgnoError(int lineno, Pgno pgno){
^
src\build.c:3599:0: style: The function 'sqlite3CreateForeignKey' is never used. [unusedFunction]
void sqlite3CreateForeignKey(
^
src\build.c:2973:0: style: The function 'sqlite3CreateView' is never used. [unusedFunction]
void sqlite3CreateView(
^
src\build.c:5683:0: style: The function 'sqlite3CteNew' is never used. [unusedFunction]
Cte *sqlite3CteNew(
^
src\dbpage.c:468:0: style: The function 'sqlite3DbpageRegister' is never used. [unusedFunction]
int sqlite3DbpageRegister(sqlite3 *db){
^
src\build.c:3731:0: style: The function 'sqlite3DeferForeignKey' is never used. [unusedFunction]
void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){
^
src\util.c:332:0: style: The function 'sqlite3DequoteNumber' is never used. [unusedFunction]
void sqlite3DequoteNumber(Parse *pParse, Expr *p){
^
src\attach.c:420:0: style: The function 'sqlite3Detach' is never used. [unusedFunction]
void sqlite3Detach(Parse *pParse, Expr *pDbname){
^
src\build.c:4578:0: style: The function 'sqlite3DropIndex' is never used. [unusedFunction]
void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){
^
src\build.c:3477:0: style: The function 'sqlite3DropTable' is never used. [unusedFunction]
void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){
^
src\trigger.c:624:0: style: The function 'sqlite3DropTrigger' is never used. [unusedFunction]
void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){
^
src\build.c:5257:0: style: The function 'sqlite3EndTransaction' is never used. [unusedFunction]
void sqlite3EndTransaction(Parse *pParse, int eType){
^
src\expr.c:1209:0: style: The function 'sqlite3ExprAddFunctionOrderBy' is never used. [unusedFunction]
void sqlite3ExprAddFunctionOrderBy(
^
src\expr.c:1300:0: style: The function 'sqlite3ExprAssignVarNumber' is never used. [unusedFunction]
void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr, u32 n){
^
src\expr.c:2078:0: style: The function 'sqlite3ExprListAppendVector' is never used. [unusedFunction]
ExprList *sqlite3ExprListAppendVector(
^
src\expr.c:2213:0: style: The function 'sqlite3ExprListSetSpan' is never used. [unusedFunction]
void sqlite3ExprListSetSpan(
^
src\expr.c:1088:0: style: The function 'sqlite3ExprListToValues' is never used. [unusedFunction]
Select *sqlite3ExprListToValues(Parse *pParse, int nElem, ExprList *pEList){
^
src\build.c:141:0: style: The function 'sqlite3FinishCoding' is never used. [unusedFunction]
void sqlite3FinishCoding(Parse *pParse){
^
src\trigger.c:318:0: style: The function 'sqlite3FinishTrigger' is never used. [unusedFunction]
void sqlite3FinishTrigger(
^
ext\fts3\fts3.c:4105:0: style: The function 'sqlite3Fts3Init' is never used. [unusedFunction]
int sqlite3Fts3Init(sqlite3 *db){
^
ext\fts5\fts5_main.c:3850:0: style: The function 'sqlite3Fts5Init' is never used. [unusedFunction]
int sqlite3Fts5Init(sqlite3 *db){
^
ext\fts5\fts5_expr.c:2101:0: style: The function 'sqlite3Fts5ParseColset' is never used. [unusedFunction]
Fts5Colset *sqlite3Fts5ParseColset(
^
ext\fts5\fts5_expr.c:2078:0: style: The function 'sqlite3Fts5ParseColsetInvert' is never used. [unusedFunction]
Fts5Colset *sqlite3Fts5ParseColsetInvert(Fts5Parse *pParse, Fts5Colset *p){
^
ext\fts5\fts5_expr.c:1814:0: style: The function 'sqlite3Fts5ParseFinished' is never used. [unusedFunction]
void sqlite3Fts5ParseFinished(Fts5Parse *pParse, Fts5ExprNode *p){
^
ext\fts5\fts5_expr.c:2451:0: style: The function 'sqlite3Fts5ParseImplicitAnd' is never used. [unusedFunction]
Fts5ExprNode *sqlite3Fts5ParseImplicitAnd(
^
ext\fts5\fts5_expr.c:1993:0: style: The function 'sqlite3Fts5ParseNear' is never used. [unusedFunction]
void sqlite3Fts5ParseNear(Fts5Parse *pParse, Fts5Token *pTok){
^
ext\fts5\fts5_expr.c:1639:0: style: The function 'sqlite3Fts5ParseSetCaret' is never used. [unusedFunction]
void sqlite3Fts5ParseSetCaret(Fts5ExprPhrase *pPhrase){
^
ext\fts5\fts5_expr.c:2001:0: style: The function 'sqlite3Fts5ParseSetDistance' is never used. [unusedFunction]
void sqlite3Fts5ParseSetDistance(
^
ext\fts5\fts5_expr.c:1838:0: style: The function 'sqlite3Fts5ParseTerm' is never used. [unusedFunction]
Fts5ExprPhrase *sqlite3Fts5ParseTerm(
^
ext\icu\icu.c:534:0: style: The function 'sqlite3IcuInit' is never used. [unusedFunction]
int sqlite3IcuInit(sqlite3 *db){
^
src\main.c:1761:0: style: The function 'sqlite3InvokeBusyHandler' is never used. [unusedFunction]
int sqlite3InvokeBusyHandler(BusyHandler *p){
^
src\select.c:262:0: style: The function 'sqlite3JoinType' is never used. [unusedFunction]
int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){
^
src\vdbemem.c:949:0: style: The function 'sqlite3MemSetArrayInt64' is never used. [unusedFunction]
void sqlite3MemSetArrayInt64(sqlite3_value *aMem, int iIdx, i64 val){
^
test\dbfuzz2.c:150:0: style: The function 'sqlite3MemTraceDeactivate' is never used. [unusedFunction]
int sqlite3MemTraceDeactivate(void){
^
src\insert.c:676:0: style: The function 'sqlite3MultiValues' is never used. [unusedFunction]
Select *sqlite3MultiValues(Parse *pParse, Select *pLeft, ExprList *pRow){
^
src\pager.c:7467:0: style: The function 'sqlite3PagerBackupPtr' is never used. [unusedFunction]
sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){
^
src\pager.c:5902:0: style: The function 'sqlite3PagerBegin' is never used. [unusedFunction]
int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){
^
src\pager.c:7490:0: style: The function 'sqlite3PagerCheckpoint' is never used. [unusedFunction]
int sqlite3PagerCheckpoint(
^
src\pager.c:7475:0: style: The function 'sqlite3PagerClearCache' is never used. [unusedFunction]
void sqlite3PagerClearCache(Pager *pPager){
^
src\pager.c:802:0: style: The function 'sqlite3PagerDirectReadOk' is never used. [unusedFunction]
int sqlite3PagerDirectReadOk(Pager *pPager, Pgno pgno){
^
src\pager.c:6263:0: style: The function 'sqlite3PagerDontWrite' is never used. [unusedFunction]
void sqlite3PagerDontWrite(PgHdr *pPg){
^
src\pager.c:7294:0: style: The function 'sqlite3PagerGetExtra' is never used. [unusedFunction]
void *sqlite3PagerGetExtra(DbPage *pPg){
^
src\pager.c:6798:0: style: The function 'sqlite3PagerIsreadonly' is never used. [unusedFunction]
u8 sqlite3PagerIsreadonly(Pager *pPager){
^
src\pager.c:6238:0: style: The function 'sqlite3PagerIswriteable' is never used. [unusedFunction]
int sqlite3PagerIswriteable(DbPage *pPg){
^
src\pager.c:7108:0: style: The function 'sqlite3PagerJournalname' is never used. [unusedFunction]
const char *sqlite3PagerJournalname(Pager *pPager){
^
src\pager.c:3829:0: style: The function 'sqlite3PagerMaxPageCount' is never used. [unusedFunction]
Pgno sqlite3PagerMaxPageCount(Pager *pPager, Pgno mxPage){
^
src\pager.c:7138:0: style: The function 'sqlite3PagerMovepage' is never used. [unusedFunction]
int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){
^
src\pager.c:6826:0: style: The function 'sqlite3PagerPageRefcount' is never used. [unusedFunction]
int sqlite3PagerPageRefcount(DbPage *pPage){
^
src\pager.c:3879:0: style: The function 'sqlite3PagerReadFileheader' is never used. [unusedFunction]
int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){
^
src\pager.c:4227:0: style: The function 'sqlite3PagerRef' is never used. [unusedFunction]
void sqlite3PagerRef(DbPage *pPg){
^
src\pager.c:6806:0: style: The function 'sqlite3PagerRefcount' is never used. [unusedFunction]
int sqlite3PagerRefcount(Pager *pPager){
^
src\pager.c:7276:0: style: The function 'sqlite3PagerRekey' is never used. [unusedFunction]
void sqlite3PagerRekey(DbPage *pPg, Pgno iNew, u16 flags){
^
src\pager.c:3705:0: style: The function 'sqlite3PagerSetBusyHandler' is never used. [unusedFunction]
void sqlite3PagerSetBusyHandler(
^
src\pager.c:3544:0: style: The function 'sqlite3PagerSetMmapLimit' is never used. [unusedFunction]
void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){
^
src\pager.c:3521:0: style: The function 'sqlite3PagerSetSpillsize' is never used. [unusedFunction]
int sqlite3PagerSetSpillsize(Pager *pPager, int mxPage){
^
src\pager.c:3818:0: style: The function 'sqlite3PagerTempSpace' is never used. [unusedFunction]
void *sqlite3PagerTempSpace(Pager *pPager){
^
ext\misc\pcachetrace.c:156:0: style: The function 'sqlite3PcacheTraceActivate' is never used. [unusedFunction]
int sqlite3PcacheTraceActivate(FILE *out){
^
ext\misc\pcachetrace.c:169:0: style: The function 'sqlite3PcacheTraceDeactivate' is never used. [unusedFunction]
int sqlite3PcacheTraceDeactivate(void){
^
src\pragma.c:409:0: style: The function 'sqlite3Pragma' is never used. [unusedFunction]
void sqlite3Pragma(
^
src\vdbe.c:616:0: style: The function 'sqlite3PrintMem' is never used. [unusedFunction]
/**/ void sqlite3PrintMem(Mem *pMem){
^
src\build.c:5578:0: style: The function 'sqlite3Reindex' is never used. [unusedFunction]
void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){
^
src\build.c:5279:0: style: The function 'sqlite3Savepoint' is never used. [unusedFunction]
void sqlite3Savepoint(Parse *pParse, int op, Token *pName){
^
src\build.c:5160:0: style: The function 'sqlite3SrcListFuncArgs' is never used. [unusedFunction]
void sqlite3SrcListFuncArgs(Parse *pParse, SrcList *p, ExprList *pList){
^
src\build.c:5114:0: style: The function 'sqlite3SrcListIndexedBy' is never used. [unusedFunction]
void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){
^
src\build.c:5195:0: style: The function 'sqlite3SrcListShiftJoinType' is never used. [unusedFunction]
void sqlite3SrcListShiftJoinType(Parse *pParse, SrcList *p){
^
src\trigger.c:579:0: style: The function 'sqlite3TriggerDeleteStep' is never used. [unusedFunction]
TriggerStep *sqlite3TriggerDeleteStep(
^
src\trigger.c:494:0: style: The function 'sqlite3TriggerInsertStep' is never used. [unusedFunction]
TriggerStep *sqlite3TriggerInsertStep(
^
src\trigger.c:437:0: style: The function 'sqlite3TriggerSelectStep' is never used. [unusedFunction]
TriggerStep *sqlite3TriggerSelectStep(
^
src\trigger.c:539:0: style: The function 'sqlite3TriggerUpdateStep' is never used. [unusedFunction]
TriggerStep *sqlite3TriggerUpdateStep(
^
src\vacuum.c:105:0: style: The function 'sqlite3Vacuum' is never used. [unusedFunction]
void sqlite3Vacuum(Parse *pParse, Token *pNm, Expr *pInto){
^
src\vdbeaux.c:5120:0: style: The function 'sqlite3VdbeFindCompare' is never used. [unusedFunction]
RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){
^
src\vtab.c:541:0: style: The function 'sqlite3VtabArgExtend' is never used. [unusedFunction]
void sqlite3VtabArgExtend(Parse *pParse, Token *p){
^
src\vtab.c:531:0: style: The function 'sqlite3VtabArgInit' is never used. [unusedFunction]
void sqlite3VtabArgInit(Parse *pParse){
^
src\vtab.c:385:0: style: The function 'sqlite3VtabBeginParse' is never used. [unusedFunction]
void sqlite3VtabBeginParse(
^
src\vtab.c:447:0: style: The function 'sqlite3VtabFinishParse' is never used. [unusedFunction]
void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){
^
src\window.c:1177:0: style: The function 'sqlite3WindowAlloc' is never used. [unusedFunction]
Window *sqlite3WindowAlloc(
^
src\window.c:1249:0: style: The function 'sqlite3WindowAssemble' is never used. [unusedFunction]
Window *sqlite3WindowAssemble(
^
src\window.c:1310:0: style: The function 'sqlite3WindowAttach' is never used. [unusedFunction]
void sqlite3WindowAttach(Parse *pParse, Expr *p, Window *pWin){
^
src\build.c:5734:0: style: The function 'sqlite3WithAdd' is never used. [unusedFunction]
With *sqlite3WithAdd(
^
src\tclsqlite.c:4037:0: style: The function 'sqlite3_Init' is never used. [unusedFunction]
EXTERN int sqlite3_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp);}
^
ext\wasm\api\sqlite3-wasm.c:1948:0: style: The function 'sqlite3__wasm_SQLTester_strglob' is never used. [unusedFunction]
int sqlite3__wasm_SQLTester_strglob(const char *zGlob, const char *z){
^
ext\wasm\api\sqlite3-wasm.c:1686:0: style: The function 'sqlite3__wasm_config_i' is never used. [unusedFunction]
int sqlite3__wasm_config_i(int op, int arg){
^
ext\wasm\api\sqlite3-wasm.c:1698:0: style: The function 'sqlite3__wasm_config_ii' is never used. [unusedFunction]
int sqlite3__wasm_config_ii(int op, int arg1, int arg2){
^
ext\wasm\api\sqlite3-wasm.c:1710:0: style: The function 'sqlite3__wasm_config_j' is never used. [unusedFunction]
int sqlite3__wasm_config_j(int op, sqlite3_int64 arg){
^
ext\wasm\api\sqlite3-wasm.c:1617:0: style: The function 'sqlite3__wasm_db_config_ip' is never used. [unusedFunction]
int sqlite3__wasm_db_config_ip(sqlite3 *pDb, int op, int arg1, int* pArg2){
^
ext\wasm\api\sqlite3-wasm.c:1653:0: style: The function 'sqlite3__wasm_db_config_pii' is never used. [unusedFunction]
int sqlite3__wasm_db_config_pii(sqlite3 *pDb, int op, void * pArg1, int arg2, int arg3){
^
ext\wasm\api\sqlite3-wasm.c:1669:0: style: The function 'sqlite3__wasm_db_config_s' is never used. [unusedFunction]
int sqlite3__wasm_db_config_s(sqlite3 *pDb, int op, const char *zArg){
^
ext\wasm\api\sqlite3-wasm.c:376:0: style: The function 'sqlite3__wasm_db_error' is never used. [unusedFunction]
int sqlite3__wasm_db_error(sqlite3*db, int err_code, const char *zMsg){
^
ext\wasm\api\sqlite3-wasm.c:1327:0: style: The function 'sqlite3__wasm_db_export_chunked' is never used. [unusedFunction]
int sqlite3__wasm_db_export_chunked( sqlite3* pDb,
^
ext\wasm\api\sqlite3-wasm.c:1296:0: style: The function 'sqlite3__wasm_db_reset' is never used. [unusedFunction]
int sqlite3__wasm_db_reset(sqlite3 *pDb){
^
ext\wasm\api\sqlite3-wasm.c:1378:0: style: The function 'sqlite3__wasm_db_serialize' is never used. [unusedFunction]
int sqlite3__wasm_db_serialize( sqlite3 *pDb, const char *zSchema,
^
ext\wasm\api\sqlite3-wasm.c:1273:0: style: The function 'sqlite3__wasm_db_vfs' is never used. [unusedFunction]
sqlite3_vfs * sqlite3__wasm_db_vfs(sqlite3 *pDb, const char *zDbName){
^
ext\wasm\api\sqlite3-wasm.c:428:0: style: The function 'sqlite3__wasm_enum_json' is never used. [unusedFunction]
const char * sqlite3__wasm_enum_json(void){
^
ext\wasm\api\sqlite3-wasm.c:1779:0: style: The function 'sqlite3__wasm_init_wasmfs' is never used. [unusedFunction]
int sqlite3__wasm_init_wasmfs(const char *zUnused){
^
ext\wasm\api\sqlite3-wasm.c:1561:0: style: The function 'sqlite3__wasm_kvvfsMakeKeyOnPstack' is never used. [unusedFunction]
char * sqlite3__wasm_kvvfsMakeKeyOnPstack(const char *zClass,
^
ext\wasm\api\sqlite3-wasm.c:1580:0: style: The function 'sqlite3__wasm_kvvfs_methods' is never used. [unusedFunction]
sqlite3_kvvfs_methods * sqlite3__wasm_kvvfs_methods(void){
^
ext\wasm\api\sqlite3-wasm.c:1532:0: style: The function 'sqlite3__wasm_posix_create_file' is never used. [unusedFunction]
int sqlite3__wasm_posix_create_file( const char *zFilename,
^
ext\wasm\api\sqlite3-wasm.c:312:0: style: The function 'sqlite3__wasm_pstack_ptr' is never used. [unusedFunction]
SQLITE_WASM_EXPORT void * sqlite3__wasm_pstack_ptr(void){
^
ext\wasm\api\sqlite3-wasm.c:357:0: style: The function 'sqlite3__wasm_pstack_quota' is never used. [unusedFunction]
SQLITE_WASM_EXPORT int sqlite3__wasm_pstack_quota(void){
^
ext\wasm\api\sqlite3-wasm.c:346:0: style: The function 'sqlite3__wasm_pstack_remaining' is never used. [unusedFunction]
SQLITE_WASM_EXPORT int sqlite3__wasm_pstack_remaining(void){
^
ext\wasm\api\sqlite3-wasm.c:319:0: style: The function 'sqlite3__wasm_pstack_restore' is never used. [unusedFunction]
SQLITE_WASM_EXPORT void sqlite3__wasm_pstack_restore(unsigned char * p){
^
ext\wasm\api\sqlite3-wasm.c:1723:0: style: The function 'sqlite3__wasm_qfmt_token' is never used. [unusedFunction]
char * sqlite3__wasm_qfmt_token(char *z, int addQuotes){
^
ext\wasm\api\sqlite3-wasm.c:1814:0: style: The function 'sqlite3__wasm_test_int64_minmax' is never used. [unusedFunction]
void sqlite3__wasm_test_int64_minmax(int64_t * min, int64_t *max){
^
ext\wasm\api\sqlite3-wasm.c:1809:0: style: The function 'sqlite3__wasm_test_int64_times2' is never used. [unusedFunction]
int64_t sqlite3__wasm_test_int64_times2(int64_t x){
^
ext\wasm\api\sqlite3-wasm.c:1821:0: style: The function 'sqlite3__wasm_test_int64ptr' is never used. [unusedFunction]
int64_t sqlite3__wasm_test_int64ptr(int64_t * p){
^
ext\wasm\api\sqlite3-wasm.c:1789:0: style: The function 'sqlite3__wasm_test_intptr' is never used. [unusedFunction]
int sqlite3__wasm_test_intptr(int * p){
^
ext\wasm\api\sqlite3-wasm.c:1827:0: style: The function 'sqlite3__wasm_test_stack_overflow' is never used. [unusedFunction]
void sqlite3__wasm_test_stack_overflow(int recurse){
^
ext\wasm\api\sqlite3-wasm.c:1833:0: style: The function 'sqlite3__wasm_test_str_hello' is never used. [unusedFunction]
char * sqlite3__wasm_test_str_hello(int fail){
^
ext\wasm\api\sqlite3-wasm.c:400:0: style: The function 'sqlite3__wasm_test_struct' is never used. [unusedFunction]
void sqlite3__wasm_test_struct(WasmTestStruct * s){
^
ext\wasm\api\sqlite3-wasm.c:1794:0: style: The function 'sqlite3__wasm_test_voidptr' is never used. [unusedFunction]
void * sqlite3__wasm_test_voidptr(void * p){
^
ext\wasm\api\sqlite3-wasm.c:1442:0: style: The function 'sqlite3__wasm_vfs_create_file' is never used. [unusedFunction]
int sqlite3__wasm_vfs_create_file( sqlite3_vfs *pVfs,
^
ext\wasm\api\sqlite3-wasm.c:1255:0: style: The function 'sqlite3__wasm_vfs_unlink' is never used. [unusedFunction]
int sqlite3__wasm_vfs_unlink(sqlite3_vfs *pVfs, const char *zName){
^
ext\wasm\api\sqlite3-wasm.c:1596:0: style: The function 'sqlite3__wasm_vtab_config' is never used. [unusedFunction]
int sqlite3__wasm_vtab_config(sqlite3 *pDb, int op, int arg){
^
ext\misc\anycollseq.c:49:0: style: The function 'sqlite3_anycollseq_init' is never used. [unusedFunction]
int sqlite3_anycollseq_init(
^
ext\misc\base85.c:355:0: style: The function 'sqlite3_base_init' is never used. [unusedFunction]
int sqlite3_base_init
^
ext\misc\blobio.c:137:0: style: The function 'sqlite3_blobio_init' is never used. [unusedFunction]
int sqlite3_blobio_init(
^
ext\misc\btreeinfo.c:423:0: style: The function 'sqlite3_btreeinfo_init' is never used. [unusedFunction]
int sqlite3_btreeinfo_init(
^
ext\misc\carray.c:434:0: style: The function 'sqlite3_carray_bind' is never used. [unusedFunction]
SQLITE_API int sqlite3_carray_bind(
^
ext\repair\checkfreelist.c:222:0: style: The function 'sqlite3_check_freelist' is never used. [unusedFunction]
int sqlite3_check_freelist(sqlite3 *db, const char *zDb){
^
ext\repair\checkfreelist.c:303:0: style: The function 'sqlite3_checkfreelist_init' is never used. [unusedFunction]
int sqlite3_checkfreelist_init(
^
ext\repair\checkindex.c:922:0: style: The function 'sqlite3_checkindex_init' is never used. [unusedFunction]
int sqlite3_checkindex_init(
^
ext\misc\cksumvfs.c:865:0: style: The function 'sqlite3_cksumvfs_init' is never used. [unusedFunction]
int sqlite3_cksumvfs_init(
^
ext\misc\completion.c:495:0: style: The function 'sqlite3_completion_init' is never used. [unusedFunction]
int sqlite3_completion_init(
^
ext\misc\compress.c:114:0: style: The function 'sqlite3_compress_init' is never used. [unusedFunction]
int sqlite3_compress_init(
^
ext\misc\vtshim.c:457:0: style: The function 'sqlite3_create_disposable_module' is never used. [unusedFunction]
void *sqlite3_create_disposable_module(
^
ext\misc\vtshim.c:521:0: style: The function 'sqlite3_dispose_module' is never used. [unusedFunction]
void sqlite3_dispose_module(void *pX){
^
ext\misc\sqlite3_stdio.c:147:0: style: The function 'sqlite3_fgets' is never used. [unusedFunction]
char *sqlite3_fgets(char *buf, int sz, FILE *in){
^
ext\misc\fossildelta.c:1070:0: style: The function 'sqlite3_fossildelta_init' is never used. [unusedFunction]
int sqlite3_fossildelta_init(
^
ext\misc\sqlite3_stdio.c:293:0: style: The function 'sqlite3_fsetmode' is never used. [unusedFunction]
void sqlite3_fsetmode(FILE *fp, int mode){
^
ext\fts5\fts5_main.c:3840:0: style: The function 'sqlite3_fts5_init' is never used. [unusedFunction]
int sqlite3_fts5_init(
^
ext\fts5\fts5_main.c:3827:0: style: The function 'sqlite3_fts_init' is never used. [unusedFunction]
int sqlite3_fts_init(
^
ext\rtree\geopoly.c:1790:0: style: The function 'sqlite3_geopoly_init' is never used. [unusedFunction]
static int sqlite3_geopoly_init(sqlite3 *db){
^
src\test_sqllog.c:546:0: style: The function 'sqlite3_init_sqllog' is never used. [unusedFunction]
void sqlite3_init_sqllog(void){
^
ext\lsm1\lsm_vtab.c:1075:0: style: The function 'sqlite3_lsm_init' is never used. [unusedFunction]
int sqlite3_lsm_init(
^
src\malloc.c:72:0: style: The function 'sqlite3_memory_alarm' is never used. [unusedFunction]
int sqlite3_memory_alarm(
^
ext\misc\memstat.c:422:0: style: The function 'sqlite3_memstat_init' is never used. [unusedFunction]
int sqlite3_memstat_init(
^
ext\misc\memvfs.c:554:0: style: The function 'sqlite3_memvfs_init' is never used. [unusedFunction]
int sqlite3_memvfs_init(
^
ext\misc\noop.c:62:0: style: The function 'sqlite3_noop_init' is never used. [unusedFunction]
int sqlite3_noop_init(
^
ext\misc\sqlite3_stdio.c:123:0: style: The function 'sqlite3_popen' is never used. [unusedFunction]
FILE *sqlite3_popen(const char *zCommand, const char *zMode){
^
ext\misc\vfslog.c:755:0: style: The function 'sqlite3_register_vfslog' is never used. [unusedFunction]
int sqlite3_register_vfslog(const char *zArg){
^
ext\misc\rot13.c:100:0: style: The function 'sqlite3_rot_init' is never used. [unusedFunction]
int sqlite3_rot_init(
^
src\test_schema.c:355:0: style: The function 'sqlite3_schema_init' is never used. [unusedFunction]
int sqlite3_schema_init(
^
ext\misc\sha1.c:386:0: style: The function 'sqlite3_sha_init' is never used. [unusedFunction]
int sqlite3_sha_init(
^
ext\misc\shathree.c:817:0: style: The function 'sqlite3_shathree_init' is never used. [unusedFunction]
int sqlite3_shathree_init(
^
ext\misc\showauth.c:93:0: style: The function 'sqlite3_showauth_init' is never used. [unusedFunction]
int sqlite3_showauth_init(
^
ext\misc\sqlar.c:109:0: style: The function 'sqlite3_sqlar_init' is never used. [unusedFunction]
int sqlite3_sqlar_init(
^
ext\misc\stmt.c:334:0: style: The function 'sqlite3_stmt_init' is never used. [unusedFunction]
int sqlite3_stmt_init(
^
ext\misc\templatevtab.c:260:0: style: The function 'sqlite3_templatevtab_init' is never used. [unusedFunction]
int sqlite3_templatevtab_init(
^
ext\misc\uint.c:84:0: style: The function 'sqlite3_uint_init' is never used. [unusedFunction]
int sqlite3_uint_init(
^
ext\misc\urifuncs.c:180:0: style: The function 'sqlite3_urifuncs_init' is never used. [unusedFunction]
int sqlite3_urifuncs_init(
^
ext\misc\uuid.c:212:0: style: The function 'sqlite3_uuid_init' is never used. [unusedFunction]
int sqlite3_uuid_init(
^
ext\misc\vfsstat.c:806:0: style: The function 'sqlite3_vfsstat_init' is never used. [unusedFunction]
int sqlite3_vfsstat_init(
^
ext\misc\vtablog.c:616:0: style: The function 'sqlite3_vtablog_init' is never used. [unusedFunction]
int sqlite3_vtablog_init(
^
ext\misc\vtshim.c:546:0: style: The function 'sqlite3_vtshim_init' is never used. [unusedFunction]
int sqlite3_vtshim_init(
^
ext\wasm\example_extra_init.c:20:0: style: The function 'sqlite3_wasm_extra_init' is never used. [unusedFunction]
int sqlite3_wasm_extra_init(const char *z){
^
ext\misc\zipfile.c:2238:0: style: The function 'sqlite3_zipfile_init' is never used. [unusedFunction]
int sqlite3_zipfile_init(
^
ext\misc\zorder.c:87:0: style: The function 'sqlite3_zorder_init' is never used. [unusedFunction]
int sqlite3_zorder_init(
^
src\tclsqlite.c:4038:0: style: The function 'sqlite_Init' is never used. [unusedFunction]
EXTERN int sqlite_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp);}
^
ext\lsm1\lsm-test\lsmtest_tdb4.c:789:0: style: The function 'tdb_bt' is never used. [unusedFunction]
bt_db *tdb_bt(TestDb *pDb){
^
ext\lsm1\lsm-test\lsmtest_tdb4.c:782:0: style: The function 'tdb_bt_prepare_sync_crash' is never used. [unusedFunction]
void tdb_bt_prepare_sync_crash(TestDb *pTestDb, int iSync){
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1111:0: style: The function 'tdb_lsm_application_crash' is never used. [unusedFunction]
void tdb_lsm_application_crash(TestDb *pDb){
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1104:0: style: The function 'tdb_lsm_enable_log' is never used. [unusedFunction]
void tdb_lsm_enable_log(TestDb *pDb, int bEnable){
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1118:0: style: The function 'tdb_lsm_prepare_system_crash' is never used. [unusedFunction]
void tdb_lsm_prepare_system_crash(TestDb *pDb){
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1133:0: style: The function 'tdb_lsm_safety' is never used. [unusedFunction]
void tdb_lsm_safety(TestDb *pDb, int eMode){
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1125:0: style: The function 'tdb_lsm_system_crash' is never used. [unusedFunction]
void tdb_lsm_system_crash(TestDb *pDb){
^
ext\lsm1\lsm-test\lsmtest1.c:541:0: style: The function 'testPutU32' is never used. [unusedFunction]
void testPutU32(u8 *aBuf, u32 iVal){
^
ext\lsm1\lsm-test\lsmtest_tdb4.c:763:0: style: The function 'test_fbt_open' is never used. [unusedFunction]
int test_fbt_open(
^
ext\lsm1\lsm-test\lsmtest_tdb4.c:772:0: style: The function 'test_fbts_open' is never used. [unusedFunction]
int test_fbts_open(
^
ext\lsm1\lsm-test\lsmtest_tdb3.c:1422:0: style: The function 'test_lsm_mt' is never used. [unusedFunction]
int test_lsm_mt(const char *zFilename, int bClear, TestDb **ppDb){
^
src\test_loadext.c:118:0: style: The function 'testbrokenext_init' is never used. [unusedFunction]
int testbrokenext_init(
^
src\test_loadext.c:97:0: style: The function 'testloadext_init' is never used. [unusedFunction]
int testloadext_init(
^
ext\misc\vfstrace.c:1205:0: style: The function 'vfstrace_unregister' is never used. [unusedFunction]
void vfstrace_unregister(const char *zTraceName){
^
test\vt02.c:1008:0: style: The function 'vt02_init' is never used. [unusedFunction]
static void vt02_init(th3state *p, int iDb, char *zArg){
^
test\speedtest1.c:3476:0: style: The function 'wasm_main' is never used. [unusedFunction]
int wasm_main(int argc, char **argv){
^
ext\fts5\fts5_index.c:1042:23: warning: Null pointer dereference: pp [ctunullpointer]
  Fts5Structure *p = *pp;
                      ^
ext\fts5\fts5_index.c:1194:20: note: Assuming that condition 'ppStruct!=0' is not redundant
  assert( (ppStruct!=0 && (*ppStruct)!=0) || (*pRc)!=SQLITE_OK );
                   ^
ext\fts5\fts5_index.c:1193:28: note: Calling function fts5StructureMakeWritable, 2nd argument is null
  fts5StructureMakeWritable(pRc, ppStruct);
                           ^
ext\fts5\fts5_index.c:1042:23: note: Dereferencing argument pp that is null
  Fts5Structure *p = *pp;
                      ^
src\memjournal.c:431:10: error: Null pointer dereference: p [ctunullpointer]
  return p->pMethods==&MemJournalMethods;
         ^
src\os.c:223:3: note: Calling function sqlite3JournalIsInMemory, 1st argument is null
  DO_OS_MALLOC_TEST(0);
  ^
src\memjournal.c:431:10: note: Dereferencing argument p that is null
  return p->pMethods==&MemJournalMethods;
         ^
src\prepare.c:850:4: warning: Null pointer dereference: ppStmt [ctunullpointer]
  *ppStmt = 0;
   ^
src\prepare.c:931:34: note: Assuming that condition 'ppStmt==0' is not redundant
  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */
                                 ^
src\prepare.c:930:29: note: Calling function sqlite3LockAndPrepare, 6th argument is null
  rc = sqlite3LockAndPrepare(db,zSql,nBytes,0,0,ppStmt,pzTail);
                            ^
src\prepare.c:850:4: note: Dereferencing argument ppStmt that is null
  *ppStmt = 0;
   ^
src\prepare.c:999:4: warning: Null pointer dereference: ppStmt [ctunullpointer]
  *ppStmt = 0;
   ^
src\prepare.c:1059:34: note: Assuming that condition 'ppStmt==0' is not redundant
  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */
                                 ^
src\prepare.c:1058:24: note: Calling function sqlite3Prepare16, 5th argument is null
  rc = sqlite3Prepare16(db,zSql,nBytes,0,ppStmt,pzTail);
                       ^
src\prepare.c:999:4: note: Dereferencing argument ppStmt that is null
  *ppStmt = 0;
   ^
tool\lemon.c:1114:11: warning: Null pointer dereference: stp [ctunullpointer]
  for(cfp=stp->cfp; cfp; cfp=cfp->next) cfp->status = INCOMPLETE;
          ^
tool\lemon.c:1073:5: note: Assuming that condition '(stp)==0' is not redundant
    MemoryCheck(stp);
    ^
tool\lemon.c:1079:16: note: Calling function buildshifts, 2nd argument is null
    buildshifts(lemp,stp);       /* Recursively compute successor states */
               ^
tool\lemon.c:1114:11: note: Dereferencing argument stp that is null
  for(cfp=stp->cfp; cfp; cfp=cfp->next) cfp->status = INCOMPLETE;
          ^
ext\lsm1\lsm_ckpt.c:247:8: error: Using argument pRc that points at uninitialized variable rc [ctuuninitvar]
  if( *pRc ) return;
       ^
ext\lsm1\lsm_ckpt.c:677:15: note: Calling function ckptSetValue, 4th argument is uninitialized
  ckptSetValue(&ckpt, 0, nLevel, &rc);
              ^
ext\lsm1\lsm_ckpt.c:247:8: note: Using argument pRc
  if( *pRc ) return;
       ^
nofile:0:0: information: Active checkers: There was critical errors (use --checkers-report=<filename> to see details) [checkersReport]

